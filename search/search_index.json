{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#welcome-to-temperature-response-functions","title":"Welcome to Temperature Response Functions","text":"<p>This is a small but powerful package for estimating wheat yield under non-stressed and VPD stressed conditions as a function of temperature. Different temperature response functions could predict wheat yield across various locations. The suggested yield algorithm based on different temperature functions could predict wheat yield with high accuracy across various locations around the world.</p> <p>We analyse how different temperature functions and VPD thresholds affects non-water stress wheat yield across the International Wheat Improvement Network (IWIN) sites and the other locations across the globe. The code generated using python and R programming languages during the project is published in this repository.</p> <p>Authors: </p> <ul> <li>Azam Lashkari (azam.lashkari@jic.ac.uk)</li> <li>Urs Christoph Schulthess (U.Schulthess@cgiar.org)</li> <li>Carlo Montes (c.montes@cgiar.org)</li> <li>Ernesto Giron E. - (e.giron.e@gmail.com)</li> </ul> <p>Reference:</p> <ul> <li>Lashkari et al., 2023. Searching for optimal temperature response function for grain filling period to simulate wheat yield across the globe. In Press.</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<p>The package for estimating yield using temperature response functions can be installed with <code>pip</code>:</p> <pre><code>pip install tfunct\n</code></pre> <p>For detailed installation instructions visit installation</p> <p>For detailed instructions of how-to get started, configuration options, and a demo, visit Getting Started</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p> <ul> <li>Nieves Aparicio: Cereals Group, Section of Herbaceous, Agro-Technological Institute of Castile and Le\u00f3n, Junta de Castile and Le\u00f3n, Valladolid, Spain</li> <li>Jos\u00e9 Luis Araus: Integrative Crop Ecophysiology Group, Section of Plant Physiology, Faculty of Biology, University of Barcelona, Barcelona, and AGROTECNIO-CERCA Center, Lleida, Spain</li> <li>Mariano Cossani: South Australian Research and Development Institute</li> <li>Francisco Pinto Espinosa: International Maize and Wheat Improvement Center (CIMMYT), Texcoco, M\u00e9xico 56237</li> <li>Muhammad Adeel Hassan: Institute of Crop Sciences, National Wheat Improvement Centre, Chinese Academy of Agricultural Sciences (CAAS), Beijing, China</li> <li>Margaret Kerause: Utah State University</li> <li>Uttam Kumar: Borlaug Institute for South Asia, New Delhi, Delhi, India | International Maize and Wheat Improvement Centre, New Delhi, Delhi, India</li> <li>Jesse Poland: Department of Plant Pathology, Kansas State University, Manhattan Kansas, USA | Center for Desert Agriculture, King Abdullah University of Science and Technology, Thuwal, Saudi Arabia</li> <li>Matthew Reynolds: International Maize and Wheat Improvement Center (CIMMYT), Texcoco, M\u00e9xico 56237</li> <li>Sara Sanjani: Seed and Plant Improvement Institute, Karaj, Iran</li> <li>Kelly Robert Thorp: USDA Agricultural Research Service, U.S. Arid-Land Agricultural Research Center, Maricopa, Arizona</li> <li>Haiyan Zhang: College of Agronomy, Henan Agricultural University, Zhengzhou, China</li> </ul> </p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you have any feedback, please reach out to us at Feedback</p>"},{"location":"#faq","title":"FAQ","text":"<p>Please read out frequently asked questions before you send an email.</p>"},{"location":"#license","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2021-2023 </p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>Additional License please check out License</p> <p>Sponsors</p> <p> </p> <p> </p> <p>Copyright \u00a9 2023 CIMMYT-Henan Collaborative Innovation Center</p>"},{"location":"combinations/","title":"Runing models","text":""},{"location":"combinations/#estimating-grain-yield-using-several-combinations-in-models","title":"Estimating grain yield using several combinations in models","text":"<p>To establish the optimum temperature response for grain-filling period, you can run several models using a wide range of cardinal temperatures. </p> <p>Optimum temperature</p> <p>The optimum temperature for photosynthesis depends on the choosen temperature function.</p>"},{"location":"combinations/#prft-combinations-for-none-stress-conditions","title":"PRFT combinations for none stress conditions","text":"<pre><code>functype='PRFT'\nisVPDStress=False\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# Combinations\nRUE = [3.0] #[2.8, 2.9, 3.0, 3.1, 3.2]\nTopt = [x for x in range(15, 26)]\nTminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5]\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt, \n                                                     TminFactor=TminFactor, isVPDStress=isVPDStress)\n\ncmb_PRFT_noStress = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                           isVPDStress, array_results, saveFile=True)\n</code></pre>"},{"location":"combinations/#metrics-for-evaluation","title":"Metrics for evaluation","text":"<p><pre><code>m_PRFT_noStress = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                                 array_params_to_run, array_results, saveFile=True) #, fmt='parquet')\nm_PRFT_noStress\n</code></pre> </p>"},{"location":"combinations/#prft-combinations-for-stressed-vapor-pressure-deficit-vpd-condition","title":"PRFT combinations for stressed Vapor pressure deficit (VPD) condition","text":"<pre><code>functype='PRFT'\nisVPDStress=True\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# Combinations\nRUE = [3.0]\nTopt = [x for x in range(15, 26)]\nTminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5]\nLvpd = [0.5, 1, 1.5, 2, 2.5, 3, 3.5]\nUvpd = [1, 1.5, 2, 2.5, 3, 3.5, 4]\nSFvpd_Lthres = [0.2, 0.4, 0.6, 0.8] \nSFvpd_Uthres = [1]\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt, TminFactor=TminFactor,  \n                                                           Lvpd=Lvpd, Uvpd=Uvpd, SFvpd_Lthres=SFvpd_Lthres, SFvpd_Uthres=SFvpd_Uthres,\n                                                           isVPDStress=isVPDStress)\n\ncmb_PRFT_SFvpd = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                           isVPDStress, array_results, saveFile=True)\n</code></pre>"},{"location":"combinations/#metrics-for-vpd-stress-condition","title":"Metrics for VPD stress condition","text":"<p><pre><code>m_PRFT_SFvpd = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                                 array_params_to_run, array_results, saveFile=True)\nm_PRFT_SFvpd\n</code></pre> </p>"},{"location":"combinations/#display-grain-yield-comparison-with-and-without-vpd-stress","title":"Display grain yield comparison with and without VPD stress","text":"<p><pre><code>figures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress, \n                   cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=20, alpha=0.65, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters', fmt='jpg')\n</code></pre> </p> <p><pre><code>figures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress, \n                   cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters_errorbar', fmt='jpg')\n</code></pre> </p>"},{"location":"combinations/#conclusion","title":"Conclusion","text":"<p>Congratulations</p> <p>You have run a simulation using a prebuilt dataset and the Temperature Functions API.</p> <p>Next: Validating models</p>"},{"location":"data/","title":"Data","text":""},{"location":"data/#data","title":"DATA","text":"<p>We analyse how different temperature functions and VPD thresholds affects non-water stress wheat yield across the International Wheat Improvement Network (IWIN) sites and the other locations across the globe.</p> <p></p> <p>The data from 50 site-year experiments was assembled for this analysis. The phenology, vegetation indexes and daily weather data is used as input for the yield algorithms.</p>"},{"location":"data/#phenology-data","title":"Phenology data","text":"<p>Crop data for Nepal (Kathmandu and Bhairahawa), Bangladesh (Jamalpur), India (Pusa and Ludhiana) and Pakistan (Faisalabd) collected from advanced spring wheat breeding lines from CIMMYT\u2019s South Asia Bread Wheat Genomic Prediction Yield Trials planted between 2013 to 2021 (Phenotyping and meta-GWAS for grain yield, heat tolerance, resistance to yellow rust and spot blotch, relevant to smallholder farmers growing wheat on 40 million ha in South Asian countries Project). Data for China (Zhengzhou and Shunyi), Australia (Minnipa, Riverton, Roseworthy), Iran (Karaj), Arizona, Colorado, Spain and Mexico (Obregon) were collected from different experiments.  In addition, late sowing trials (high temperature experiments) from Ludhiana, Pusa and Obregon were added to the analysis to investigate the role of high temperatures and high VPD.</p>"},{"location":"data/#ndvi-data","title":"NDVI data","text":"<p>NDVI data (measured by GreenSeeker) from heading to maturity and their corresponding yield data were collected from different experiments across the world.</p>"},{"location":"data/#wheat-canopy-temperature-data","title":"Wheat canopy temperature data","text":"<p>Dataset of daily canopy temperature and meteorological data from the ECMWF\u2019s AgERA5 product for the period 1979 though 2020, and for ~785 points belonging to the International Wheat Improvement Network (IWIN). Data available at  CIMMYT dataverse.</p>"},{"location":"data/#weather-data","title":"Weather Data","text":"<p>The last generation of ERA5 global atmospheric reanalysis weather data is used. This product is generated by the European Centre for Medium-Range Weather Forecasts (ECMWF) and is provided both at an hourly and monthly time scale, with a horizontal resolution of 0.1\u00b0 x 0.1\u00b0 (~10 km), covering the period 1979 to present (Hersbach et al., 2020).</p>"},{"location":"data/#loading-data-using-the-api","title":"Loading data using the API","text":"<p>All of the above data can be loaded and displayed using the library API.</p> <p><pre><code>from tfunct.data import load_dataset #\u00a0Function to load existing dataset\n#\u00a0Load example dataset (Phenology, NDVI and Weather data for each site)\ndata = load_dataset()\n#\u00a0Display available datasets\nprint(data.keys()) # ['Pheno', 'NDVI', 'Weather']\n#\u00a0Display Phenology\ndata['Pheno'].head()\n</code></pre> </p> <p><pre><code># Display NDVI\ndata['NDVI'].head()\n</code></pre> </p> <p><pre><code>#\u00a0Display Weather\ndata['Weather'].head()\n</code></pre> </p> <p>References:</p> <ul> <li> <p>Montes, Carlo; Schulthess, Urs; Lashkari, Azam, 2021, \"Daily wheat canopy temperature and meteorological data for IWIN locations\", https://hdl.handle.net/11529/10548626, CIMMYT Research Data &amp; Software Repository Network, V1</p> </li> <li> <p>Boogaard, H., Schubert, J., De Wit, A., Lazebnik, J., Hutjes, R., Van der Grijn, G., (2020): Agrometeorological indicators from 1979 to present derived from reanalysis. Copernicus Climate Change Service (C3S) Climate Data Store (CDS). DOI: 10.24381/cds.6c68c9bb (Accessed on 23-Sep-2023)</p> </li> </ul>"},{"location":"evaluating/","title":"Validating models","text":""},{"location":"evaluating/#select-the-best-results-using-filters","title":"Select the best results using filters","text":"<p>After running several models you can filter results to see which one look better. </p> <p>Example of filter</p> <p>The following table is an example of one filter used to evaluate the best models, it only uses three (3) evaluation metrics (Cb, CCC, and RMSRE) to select the top ones. </p> Temperature Function Cb CCC RMSRE PRFT 0.98 &gt; 0.8 PRFT vpd stress 0.98 &gt; 0.8 &lt; 22 <p>When the combinations file is small you can filter directly in your session. For example: <pre><code>m_PRFT_noStress[(m_PRFT_noStress['Cb']&gt;0.98) &amp; (m_PRFT_noStress['CCC']&gt;0.80) ]\n</code></pre> </p> <p><pre><code>m_PRFT_SFvpd[(m_PRFT_SFvpd['Cb']&gt;0.98) &amp; (m_PRFT_SFvpd['CCC']&gt;0.80) &amp; (m_PRFT_SFvpd['RMSRE']&lt;22)]\n</code></pre> </p> <p>But when the combinations dataset is huge, you will have memory issues. Then the best way to filter the combinations in an easy way, is using the <code>util.filterSimulations</code> function, as follows: <pre><code># Load filter function to accelerate the responses\nfrom tfunct.util import filterSimulations\n</code></pre></p>"},{"location":"evaluating/#no-stress-conditions","title":"No stress conditions","text":"<p><pre><code>%%time\n# path of the combinations and metrics files in parquet format\nc_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"combinations_Yield_PRFT_noStress.parquet\")\nm_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"metrics_Yield_PRFT_noStress.parquet\")\n#\u00a0Filters\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;', 0.98),\n        CCC = ('&gt;', 0.80)\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\")\n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_PRFT = filterSimulations(functype='PRFT', VPDstress=False, cmb=c_PRFT, met=m_PRFT, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_PRFT\n</code></pre> </p>"},{"location":"evaluating/#vpd-stress-conditions","title":"VPD stress conditions","text":"<p><pre><code># Path of the combinations and metrics files\nc_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"combinations_Yield_PRFT_SFvpd.parquet\")\nm_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"metrics_Yield_PRFT_SFvpd.parquet\")\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;', 0.98),\n        CCC = ('&gt;', 0.80)\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\") \n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_PRFT_SFvpd = filterSimulations(functype='PRFT', VPDstress=True, cmb=c_PRFT_SFvpd, met=m_PRFT_SFvpd, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_PRFT_SFvpd\n</code></pre> </p>"},{"location":"evaluating/#checking-selected-combinations-side-by-side","title":"Checking selected combinations side-by-side","text":"<p>Displaying grain yield comparison with and without VPD stress for the best combinations.</p> <p><pre><code>figures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT, \n                           cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=40, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered', fmt='jpg')\n</code></pre> </p> <p><pre><code>figures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT, \n                           cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered_errorbar', fmt='jpg')\n</code></pre> </p>"},{"location":"evaluating/#conclusion","title":"Conclusion","text":"<p>Congratulations</p> <p>You have run a simulation using a prebuilt dataset and the Temperature Functions API.</p>"},{"location":"faq/","title":"Faq","text":""},{"location":"faq/#faq","title":"FAQ","text":""},{"location":"faq/#question-1","title":"Question 1","text":"<p>Answer 1</p>"},{"location":"faq/#question-2","title":"Question 2","text":"<p>Answer 2</p>"},{"location":"getting_started/","title":"Loading dataset and creating a model","text":""},{"location":"getting_started/#getting-started","title":"Getting started","text":"<p>Here we compare three different temperature functions with different cardinal temperature combinations with and without VPD stress function for the period from heading to maturity (grain filling period). </p>"},{"location":"getting_started/#creating-application-directory-and-installing-dependencies","title":"Creating application directory and installing dependencies","text":"<p>Launch your terminal and navigate to your desired location to create the project directory. Run the following commands to create a directory for your project and initialize a grain yield model inside it:</p> <pre><code>mkdir &lt;`subfolder`&gt;\ncd &lt;`subfolder`&gt;\n</code></pre> <p>Create a virtual environment with:</p> <pre><code>python3 -m venv venv\n</code></pre> <p>Note</p> <p>Please follow the installation instructions to complete the steps above according to your local system.</p>"},{"location":"getting_started/#setup-a-folder","title":"Setup a folder","text":"<p>Enter a folder or subfolder of your project root where you created the python environment and activate it. <pre><code>#\u00a0cd &lt;`subfolder`&gt;\nsource ./venv/bin/activate\n</code></pre> If you didn't install the <code>venv</code> yet, please review the detailed installation instructions</p>"},{"location":"getting_started/#install-library","title":"Install library","text":"<p>Setting up temperature response functions is as simple as using the familiar <code>pip install</code> command. By executing the following line, you will have the library installed and ready to use:</p> <pre><code>pip install tfunct\n</code></pre>"},{"location":"getting_started/#verify-install","title":"Verify install","text":"<pre><code>python3 -c \"import tfunct; print(tfunct.__version__)\"\n</code></pre> <p>If a version similar to <code>tfunct version 1.0.0</code> is returned, you've installed the package successfully.</p> <p>Success: Temperature Response Functions package is now installed.</p> View Sample quickstart for beginners <p>To get started with temperature response functions, we need to create a project folder and install a python virtual environment for our packages and further analysis as follows:</p> macOS/Linux/Unix <pre><code>mkdir TFUNCT_Project_2023;cd TFUNCT_Project_2023;\npython3 -m venv venv\n. venv/bin/activate\npip install tfunct\npython3 -c \"import tfunct; print(tfunct.__version__)\"\n</code></pre> Google Colab <p>Note: this tutorial is also available as a single python notebook. You can download it on Github below:</p> <p>Download Python Notebook</p> <p>Once tfunct library is successfully installed, you can import the essential modules for dataset creation and data pre-processing.</p>"},{"location":"getting_started/#an-easy-way-to-learn-and-use-temperature-response-functions-package","title":"An easy way to learn and use temperature response functions package","text":"<p>No install necessary, run the temperature response functions tutorials directly in the browser with Colaboratory, a Google research project created to help disseminate machine learning education and research. It's a Jupyter notebook environment that requires no setup to use and runs entirely in the cloud.</p> <p></p>"},{"location":"getting_started/#Load-a-dataset","title":"Load a dataset recommended for beginners","text":"<p>Load and prepare the trial dataset. </p>"},{"location":"getting_started/#loading-the-data","title":"Loading the data","text":"<p>Example dataset can be loaded directly from the library, as follows:</p> <pre><code>import tfunct\nfrom tfunct.data import load_dataset #\u00a0Function to load existing dataset\n#\u00a0Load example dataset (Phenology, NDVI and Weather data for each site)\ndata = load_dataset()\n#\u00a0Display available datasets\nprint(data.keys()) # ['Pheno', 'NDVI', 'Weather']\n#\u00a0Display Phenology\ndata['Pheno'].head()\n</code></pre> <p></p> <p><pre><code># Display NDVI\ndata['NDVI'].head()\n</code></pre> </p> <p><pre><code>#\u00a0Display Weather\ndata['Weather'].head()\n</code></pre> </p>"},{"location":"getting_started/#creating-a-model","title":"Creating a model","text":"<p>The model contains all of the required functions to analyse the data</p> <pre><code># Load module to create a model\nfrom tfunct.model import Model\n\n# ------------------------\n#\u00a0MODEL CONFIGURATION\n# ------------------------\n# Define the Path where the output data will be stored\nPATH_PRJ = '/Users/ernestogiron/Desktop/TemperatureFunctions/'\nRESULTS_PATH = PATH_PRJ + 'results/'\n\nconfig = {\n    \"PROJECT_PATH\": PATH_PRJ,\n    \"RESULTS_PATH\": RESULTS_PATH, #'./', # Results will be put in the same folder where the model is running\n}\n\n#\u00a0Parameters used by default\nparameters = dict(\n                RUE = 3,\n                DRYMATTER = 0.8,\n                FACTOR_TON_HA = 0.01,\n                YIELD_FACTOR = 0.8 * 0.01,\n                TMIN_PERC_FACTOR = 0.25,\n                NDVI_lowerThreshold = 0.16,\n                Toptmin = 15,\n                Topt = 18,\n                Toptmax = 25,\n                Tmin = 9,\n                Tmax = 34,\n                Lvpd = 1,\n                Uvpd = 4,\n                SFvpd_Lthres = 0.2,\n                SFvpd_Uthres = 1,\n            )\n\n#\u00a0create model to estimate grain yield\n# model = Model(config, parameters) # Use this if you change any parameter above\nmodel = Model(config)\n#\u00a0Preprocess datasets\nmodel.preprocess_raw_datasets(data)\n</code></pre>"},{"location":"getting_started/#preparing-locations","title":"Preparing locations","text":"<p>Prepare dataset to run all process in parallel using NDVIA GPU if available <pre><code>sites = model.prepareData()\n# Check for parameters of the first site\nsites[0].attributes\n</code></pre> <pre><code>{'country': 'Nepal',\n 'location': 'Bhairahawa',\n 'loc_code': 'BHR',\n 'lat': 27.5,\n 'lon': 83.45,\n 'cycle': 2019,\n 'Days_To_Heading': 89,\n 'Days_To_Maturity': 122,\n 'ObsYield': 2.96685,\n 'Sowing_date': '2018-11-26',\n 'Heading_date': '2019-02-23',\n 'Maturity_date': '2019-03-28',\n 'UID': 1,\n 'ndays_tmn_lt9': 1,\n 'ndays_tmx_gt34': 0,\n 'avg_Tdaymax': 24.578,\n 'avg_NDVI': 0.447,\n 'avg_iPAR': 0.369}\n</code></pre></p>"},{"location":"getting_started/#using-one-of-the-temperature-functions","title":"Using one of the Temperature functions","text":"<p>Calculating grain yield using Ritchie's Temperature-based function affecting Photosynthetic Reduction Factor (PRFT).</p>"},{"location":"getting_started/#no-stress-conditions","title":"No stress conditions","text":"<p><pre><code>PRFT_noStress = model.getYield(sites=sites)\nPRFT_noStress.head()\n</code></pre> </p>"},{"location":"getting_started/#stressed-vpd","title":"Stressed VPD","text":"<p><pre><code>PRFT_SFvpd = model.getYield(sites=sites, is_VPDStress=True)\nPRFT_SFvpd.head()\n</code></pre> </p> <p>For further information about <code>model.getYield</code> visit the API reference.</p>"},{"location":"getting_started/#displaying-grain-yield","title":"Displaying Grain Yield","text":"<p>Create a figure to compare simulated grain yield against observed.  <pre><code>from tfunct.util import figures\n\ndirname=os.path.join(config['RESULTS_PATH'], 'PRFT', 'Figures')\nfigures.chart_compareResults(df_result=PRFT_noStress, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, \n                             hue='loc_code', loc_leg=2, ncol=2, ha='left', va='top',\n                             title='PRFT\\nNo streess condition', dirname=dirname, fname='PRFT_noStress', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</code></pre> </p> <p>Changing the parameter <code>df_result</code> to <code>PRFT_SFvpd</code>, you can see the results for VPD stress conditions <pre><code>figures.chart_compareResults(df_result=PRFT_SFvpd, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2,       \n                             hue='loc_code', loc_leg=2, ncol=2, ha='left', va='top',\n                             title='PRFT\\nVPD streess condition', dirname=dirname, fname='PRFT_SFvpd', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</code></pre> </p> <p>If you prefer see both figures sid-by-side in a single one to compare results, you can use the <code>plot_corrTempFunct</code> function as follows:</p> <p><pre><code>figures.plot_corrTempFunct(cmb_noStress=PRFT_noStress, cmb_noStress_filtered=None, \n                           cmb_SFvpd=PRFT_SFvpd, cmb_SFvpd_filtered=None,\n                           functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', \n                           ncol=6, s=80, alpha=0.95, xy_lim=1, fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True, path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_1_errorbar', fmt='jpg')\n</code></pre> </p>"},{"location":"getting_started/#conclusion","title":"Conclusion","text":"<p>Congratulations</p> <p>You have run a simulation using a prebuilt dataset and the Temperature Functions API.</p> <p>Next: Running models</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>Temperature Response Functions package is published as a Python package and can be installed with <code>pip</code> (the Python package manager), ideally by using a virtual environment. </p>"},{"location":"installation/#supported-python-versions","title":"Supported Python versions","text":"<ul> <li>Python 3.7 - 3.11</li> <li>pip version 19.0 or higher for Linux (requires manylinux2014 support) and Windows. pip version 20.3 or higher for macOS.</li> </ul>"},{"location":"installation/#system-requirements","title":"System requirements","text":"<ul> <li>Ubuntu 16.04 or higher (64-bit)</li> <li>macOS 10.12.6 (Sierra) or higher (64-bit)</li> <li>Windows Native - Windows 7 or higher (64-bit)</li> <li>Windows WSL2 - Windows 10 19044 or higher (64-bit)</li> </ul>"},{"location":"installation/#environment","title":"Environment optional","text":"<p>We recommend using a virtual environment, which is an isolated Python runtime. If you are in a virtual environment, any packages that you install or upgrade will be local to the environment. If you run into problems, you can just delete and recreate the environment. It's trivial to set up:</p> <ul> <li> <p>Create a new virtual environment with:</p> <pre><code>python3 -m venv venv\n</code></pre> </li> <li> <p>Activate the environment with:</p>  macOS Windows Linux <pre><code>. venv/bin/activate\n</code></pre> <pre><code>. venv/Scripts/activate\n</code></pre> <pre><code>. venv/bin/activate\n</code></pre> <p>Your terminal should now print <code>(venv)</code> before the prompt, which is how you know that you are inside the virtual environment that you just created.</p> </li> <li> <p>Exit the environment with:</p> <pre><code>deactivate\n</code></pre> </li> </ul>"},{"location":"installation/#with-pip","title":"with pip recommended","text":"<p>Open up a terminal and install Temperature response functions with:</p> Stable1.xLatest <pre><code>pip install tfunct\n</code></pre> <p>This is the preferred method to install <code>tfunct</code>, as it will always install the most recent stable release.</p> <pre><code>pip install tfunct==\"1.*\"\n</code></pre> <p>or from sources:</p> <pre><code>pip install \"git+https://github.com/egiron/TemperatureFunct@v1.0.0\"\n</code></pre> <pre><code>pip install git+https://github.com/egiron/TemperatureFunct\n</code></pre> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p> <p>This will automatically install compatible versions of all dependencies: Numpy, Numba, Pandas, Scikit-learn, Scipy, Matplotlib, Seaborn, IPython, Shapely and Arrow. Temperature response functions library always strives to support the latest versions, so there's no need to install those packages separately.</p>"},{"location":"installation/#optional-dependencies","title":"Optional dependencies","text":"<ul> <li>vaex, is a high performance Python library for lazy Out-of-Core DataFrames (similar to Pandas), to visualize and explore big tabular datasets. Vaex uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted). Used to explore big combinations datasets saved in Parquet or HDF5 format.</li> <li>duckdb, is an in-process SQL OLAP database management system. It provides support for both reading and writing Parquet files in an efficient manner, as well as support for pushing filters and projections into the Parquet file scans.</li> <li>rpy2, provides an interface that allows you to run R in Python processes</li> <li>R Project, R is a free software environment for statistical computing and graphics</li> </ul>"},{"location":"installation/#with-git","title":"with git","text":"<p>Temperature response functions package can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version.</p> <p>Use Git to clone the TemperatureFunct repository: <pre><code>git clone https://github.com/egiron/TemperatureFunct.git\ncd TemperatureFunct\n</code></pre></p> <p>After cloning from <code>git</code>, you must install all required dependencies with:</p> <pre><code>pip install -e TemperatureFunct\n# or\npip install -e .\n</code></pre>"},{"location":"installation/#verify-install","title":"Verify install","text":"<pre><code>python3 -c \"import tfunct; print(tfunct.__version__)\"\n</code></pre> <p>If a TemperatureFunct version similar to <code>tfunct version 1.0.0</code> is returned, you've installed Temperature response functions package successfully.</p> <p>Success: Temperature response functions is now installed.</p> <p>Support</p> <p>If you're using Temperature Response Functions library in your organization and need assistance, e.g., to reduce processing times, improve performance or ensure compliance, get in touch to discuss our support offerings. We're happy to help!</p> <p>Bugs may be reported at Issues.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2021-2023 </p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"license/#data-disclaimer","title":"Data Disclaimer","text":"<p>The data included herein are provided \"as is.\" CIMMYT makes no representation regarding the authenticity, suitability, accuracy, or completeness of any data contained herein. CIMMYT EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY IMPLIED WARRANTIES OR MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. In no event shall CIMMYT be liable for any actual, indirect, incidental, consequential, special, or exemplary damages arising from the use and/or reliance on such data.</p> <p>AGREEMENT FOR ACCESS AND USE OF DATA</p>"},{"location":"prft/","title":"Photosynthesis Reduction Factor (PRFT)","text":"<p>Photosynthesis Reduction Factor (PRFT) is a quadratic equation<sup>1</sup> is used to calculate the temperature reduction factor that affects photosynthesis (Ritchie et al., 1998):</p> <p>\\(\\ PRFT = 1 - 0.0025 * (T_{day} - T_{opt})^2\\)</p> <p>Code for PRFT:</p> PythonR <pre><code>def calcPRFT(TDay, TOpt=18):\n    ''' Estimate Photosynthesis reduction factor (PRFT)\n\n        Parameters:\n            TDay (float): Number or array of Day Temperatures\n            TOpt (float): Optimum Temperature. Default value 18\n\n        Returns: \n            (float): A number or array of PRFT\n\n    '''\n    PRFT = 0\n    if (TDay &gt; 0):\n        PRFT = 1 - 0.0025 * (TDay - TOpt) ** 2\n    return PRFT\n\n#\u00a0-----------------------------------------------------------------\n#\u00a0The code below, allows run calculations faster using a NDVIA GPU \n# or available CPU cores to run in parallel.\n#\u00a0-----------------------------------------------------------------\n\n@guvectorize([(float64[:], float64[:], float64[:])], '(n), ()-&gt;(n)')\ndef PRFT_gu(Tday, Topt, res):\n    for i in range(Tday.shape[0]):\n        res[i] = 1 - 0.0025*(Tday[i]-Topt[0])**2 if Tday[i] &gt; 0.0 else 0.0\n\n@numba.vectorize([float64(float64, float64)])\ndef getPRFT(Tday, Topt): \n    prft = 1 - 0.0025*(Tday-Topt)**2 if Tday &gt; 0.0 else 0.0\n    return prft\n\n@numba.jit(parallel=True)\ndef apply_PRFT(Tday, Topt=18):\n    n = len(Tday)\n    result = np.zeros(n, dtype=\"float64\")\n    for i in range(n):\n        result[i] = getPRFT(Tday[i], Topt)\n    return result\n\ndef calculatePRFT(Tday, Topt=18):\n    ''' Estimate Photosynthesis reduction factor (PRFT) in parallel.\n\n        Parameters:\n            Tday (float): Number or array of Day Temperatures\n            Topt (float): Optimum Temperature. Default value 18\n\n        Returns: \n            (float): A number or array of PRFT\n\n    '''\n    if (Tday is None):\n        print(\"Day Temperature parameter is not valid\")\n        return\n    result = []\n    try:\n        result = apply_PRFT(Tday, Topt)\n    except:\n        print(\"Error calculating photosynthesis reduction factor (PRFT)\")\n\n    return result #pd.Series(result, index=w.index, name=\"PRFT\") int(GDD)\n</code></pre> <p>Check the API reference to know how to use it.</p> <pre><code># Function to calculate the Photosynthetic Reduction Factor (PRFT)\ncalculatePRFT &lt;- function(Tday, Topt){\n    prft &lt;- 0\n    if (Tday &gt; 0){\n        prft &lt;- 1.0 - 0.0025*(Tday-Topt)^2\n    }\n    return(prft)\n}\n\ncalculatePRFT_wrap &lt;- function(Tday, Topt){\n    prft &lt;- vector(\"numeric\", length (Tday)) \n    for (i in 1:length(Tday)) {\n        prft[[i]] &lt;- calculatePRFT(Tday=Tday[[i]], Topt)\n    }\n    return(prft)\n}\n</code></pre> <p>The whole R code can be found in the Github repository at <code>Rcode</code> folder.</p> <ol> <li> <p>hyperbola with two parameters\u00a0\u21a9</p> </li> </ol>"},{"location":"querying/","title":"Querying Temperature response functions combinations with precision using DuckDB","text":""},{"location":"querying/#querying-temperature-response-functions-combinations-with-precision-using-duckdb","title":"Querying Temperature response functions combinations with precision using DuckDB","text":""},{"location":"querying/#duckdb","title":"DuckDB","text":"<p>DuckDB, a free and open source analytical data management system, can run SQL queries directly on Parquet files and automatically take advantage of the advanced features of the Parquet format. Apache Parquet is the most common \u201cBig Data\u201d storage format for analytics.</p> <p>The Parquet format has a number of properties that make it suitable for analytical use cases<sup>1</sup>:</p> <ul> <li>The columnar representation means that individual columns can be (efficiently) read. No need to always read the entire file!</li> <li>The file contains per-column statistics in every row group (min/max value, and the number of <code>NULL</code> values). These statistics allow the reader to skip row groups if they are not required.</li> <li> <p>The columnar compression significantly reduces the file size of the format, which in turn reduces the storage requirement of data sets. This can often turn Big Data into Medium Data.</p> </li> </ul> <p>DuckDB\u2019s zero-dependency Parquet reader is able to directly execute SQL queries on Parquet files without any import or analysis step. Because of the natural columnar format of Parquet, this is very fast!</p> <p>DuckDB will read the Parquet files in a streaming fashion, which means you can perform queries on large Parquet files that do not fit in your main memory.</p> <p>DuckDB is able to automatically detect which columns and rows are required for any given query. This allows users to analyze much larger and more complex Parquet files without needing to perform manual optimizations or investing in more hardware.</p> <p>The most of the Temperature function results are saved in parquet format, so we can take advantage of this powerful library in our pipeline as follows:</p>"},{"location":"querying/#load-and-configure-library","title":"Load and configure library","text":"<pre><code># to install: pip install duckdb\nimport duckdb\n\n# some DuckDB setup \ncon = duckdb.connect()\n# enable automatic query parallelization\ncon.execute(\"PRAGMA threads=2\")\n# enable caching of parquet metadata\ncon.execute(\"PRAGMA enable_object_cache\")\n</code></pre>"},{"location":"querying/#first-query","title":"First query","text":"<p>Now suppose we want to figure out how many rows are in our data set. We can do that using the following code snippets.</p>"},{"location":"querying/#display-the-number-of-combinations-in-wetf-simulations","title":"Display the number of combinations in WETF simulations","text":"<pre><code>print(duckdb.query('''\nSELECT COUNT(*)\nFROM 'results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet'\n''').fetchall())\n</code></pre>"},{"location":"querying/#filter-dataset","title":"Filter dataset","text":"<p>We can filter the big files easily as follows:</p> <pre><code>print(duckdb.query('''\nSELECT COUNT(*)\nFROM 'results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet' \nWHERE RUE = 3.0 AND TminFactor= 0.25 AND Topt BETWEEN 16.0 AND 18\n''').fetchall())\n</code></pre>"},{"location":"querying/#display-result-in-a-table-or-pandas-dataframe","title":"Display result in a table or pandas dataframe","text":"<p><pre><code>%%time\ncon.execute(\"SELECT * FROM FROM 'results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet' LIMIT 5\").df()\n</code></pre> </p> <p>DuckDB completes the query very quickly, as it automatically recognizes what needs to be read from the Parquet file and minimizes the required reads.</p>"},{"location":"querying/#join-combinations-and-metrics-results-in-one-table","title":"Join combinations and metrics results in one table","text":"<p><pre><code>%%time\ncon.execute(\"SELECT * \\\nFROM 'results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet', \\\n'results/WETF/WETF_SFvpd/metrics_Yield_WETF_SFvpd.parquet' \\\nWHERE UID = UID LIMIT 5\").df()\n</code></pre> </p>"},{"location":"querying/#conclusion","title":"Conclusion","text":"<p>DuckDB can efficiently run queries directly on top of Parquet files without requiring an initial loading phase. The system will automatically take advantage of all of Parquet\u2019s advanced features to speed up query execution.</p> <ol> <li> <p>Taken from DuckDB (https://duckdb.org/2021/06/25/querying-parquet.html). (Accessed on 01-Oct-2023)\u00a0\u21a9</p> </li> </ol>"},{"location":"tfunct/","title":"Temperature Functions","text":"<p>We analyse how different temperature functions and VPD thresholds affects non-water stress wheat yield across the International Wheat Improvement Network (IWIN) sites and the other locations across the globe.</p> <p>Different temperature response functions could predict wheat yield across various locations.  The suggested yield algorithm based on different temperature functions could predict wheat yield with high accuracy across various locations around the world.</p>"},{"location":"tfunct/#photosynthetic-reduction-factor-prft","title":"Photosynthetic Reduction Factor (PRFT)","text":"<p>Calculating grain yield using Ritchie's Temperature-based function affecting Photosynthetic Reduction Factor (PRFT)<sup>1</sup></p> <p></p>"},{"location":"tfunct/#the-wangengel-temperature-function-wetf","title":"The Wang\u2013Engel temperature function (WETF)","text":"<p>Calculating grain yield using The Wang\u2013Engel's Temperature-based function (WETF)<sup>2</sup></p> <p></p>"},{"location":"tfunct/#the-trapezoidal-temperature-function-tpf","title":"The Trapezoidal Temperature Function (TPF)","text":"<p>Calculating grain yield using The Trapezoidal Temperature-based function (TPF)<sup>3</sup></p> <p></p>"},{"location":"tfunct/#vapor-pressure-deficit-vpd-stress-factor","title":"Vapor Pressure Deficit (VPD) stress factor","text":"<p>To find the right combinations of VPD stress factor, based on the literature we assume that. </p> S F v p d U f o r 0 &lt; V P D m a x \u2264 V P D L 1 - V P D m a x - V P D L V P D U \u00b1 0.6 - V P D L f o r V P D L &lt; V P D m a x \u2264 V P D U S F v p d L f o r V P D m a x &gt; V P D U <p>Where:</p> <ul> <li>SFvpdU = 1 means no VPD stress </li> <li>SFvpdL =  (0.2, 0.4, 0.6, 0.8)</li> </ul> <ol> <li> <p>Type 1 - One cardinal temperature. Topt  (15:25 \u00b0C).\u00a0\u21a9</p> </li> <li> <p>Type 2 - Three cardinal temperatures. Tmin (0:9\u00b0C); Topt (15:25\u00b0C); and Tmax (30:50\u00b0C).\u00a0\u21a9</p> </li> <li> <p>Type 3 - Four cardinal temperatures. Tmin (0:5\u00b0C); Topt_min (5:25\u00b0C); Topt_max (15:45\u00b0C); and Tmax (35:50\u00b0C).\u00a0\u21a9</p> </li> </ol>"},{"location":"tpf/","title":"Trapezoid temperature function (TPF)","text":"<p>Trapezoid temperature function with four cardinal temperatures reflecting a range of optimum temperatures for photosynthesis<sup>1</sup>.</p> <p>\\(\\ f(T_{ab}) = ( T_{day} - T_{min}) / ( T_{optmin} - T_{min})\\)</p> <p>$ f(T_{cd}) = ( T_{max} - T_{day}) / ( T_{max} - T_{optmax}) $ </p> <p>Where:</p> <p>\\(\\ f(T) = 0;  T_{day} &lt;= T_{min}\\)  or  $ T_{day} &gt;= T_{max} $</p> <p>$ f(T) = 1;  T_{optmin} &lt;= T_{day} &lt;= T_{optmax} $</p> <p>Code for TPF:</p> PythonR <pre><code># ----------------------------------------------\n# Trapezoidal Temperature Function (TPF) \n# ----------------------------------------------\ndef calculate_TPF(Tday, Tmin, Toptmin, Toptmax, Tmax):\n    tpf = 0\n    if (Toptmin &gt; Toptmax):\n        print(\"Min Optimum Temperature greater than Max Opt. Temperature\")\n        tpf = np.nan\n    elif (Toptmax &gt; Tmax):\n        print(\"Max Optimum Temperature greater than Maximum Temperature\")\n        tpf = np.nan\n    else:\n        if ((Tday &lt; Tmin) or (Tday &gt; Tmax)):\n            tpf = 0\n        elif ((Tday &gt;= Toptmin) and (Tday &lt;= Toptmax)):\n            tpf = 1\n        elif (Tday &lt; Toptmin):\n            gradient, intercept, r_value, p_value, std_err = stats.linregress([Tmin,Toptmin],[0,1])\n            tpf = Tday * gradient\n        elif (Tday &gt; Toptmax):\n            gradient, intercept, r_value, p_value, std_err = stats.linregress([Toptmax, Tmax],[1,0])\n            tpf = 1-((Tday-Toptmax)*abs(gradient))\n    #\n    return tpf\n</code></pre> <p><pre><code># Trapezoidal Temperature Function\ncalculateTPF &lt;- function(Tday, Tmin, Toptmin, Toptmax, Tmax){\n    tpf &lt;- 0\n    if (Toptmin &gt; Toptmax){\n        warning(\"Min Optimum Temperature greater than Maximum Opt. Temperature\")\n        tpf &lt;- NA\n    } else if (Toptmax &gt; Tmax){\n        warning(\"Max Optimum Temperature greater than Maximum Temperature\")\n        tpf &lt;- NA\n    } else {\n        if ((Tday &lt;= Tmin) | (Tday &gt;= Tmax)){\n        tpf &lt;- 0\n        } else if ((Tday &gt;= Tmin) &amp; (Tday &lt; Toptmin)){\n        interceptLeft &lt;- lsfit(x=c(Tmin,Toptmin), y=c(0,1))$coefficients[1]\n        slopeLeft &lt;- lsfit(x=c(Tmin,Toptmin), y=c(0,1))$coefficients[2]\n        tpf &lt;- Tday * slopeLeft + interceptLeft\n        } else if ((Tday &gt; Toptmax) &amp; (Tday &lt;= Tmax)){\n        interceptRight &lt;- lsfit(x=c(Toptmax, Tmax), y=c(1,0))$coefficients[1]\n        slopeRight &lt;- lsfit(x=c(Toptmax, Tmax), y=c(1,0))$coefficients[2]\n        tpf &lt;- Tday * slopeRight + interceptRight\n        } else if ((Tday &gt;= Toptmin) &amp; (Tday &lt;= Toptmax)) { \n        tpf &lt;- 1\n        }\n    }\n    return(tpf)\n}\ncalculateTPF_wrap &lt;- function( Tday, Tmin, Toptmin, Toptmax, Tmax) {\n    y &lt;- vector(\"numeric\", length (Tday)) \n    for (i in 1:length(Tday)) {\n        y[[i]] &lt;- calculateTPF( Tday=Tday[[i]], Tmin, Toptmin, Toptmax, Tmax) \n    }\n    return(y)\n}\n</code></pre> The whole R code can be found in the Github repository at <code>Rcode</code> folder.</p> <ol> <li> <p>four parameters\u00a0\u21a9</p> </li> </ol>"},{"location":"weft/","title":"Wang-Engel temperature function (WEFT)","text":"<p>Wang-Engel temperature function<sup>1</sup>: A simplified Arrhenius-type function, developed for responses to temperature and depending on minimum, optimum, and maximum temperatures (Wang et al., 2017)</p> F T = 2 T d a y - T m i n a T o p t - T m i n a - T d a y - T m i n 2 a T o p t - T m i n 2 \u03b1 \u03b2 ; a = l n 2 l n T m a x - T m i n T o p t - T m i n , \u03b2 = 0 ~ 1 <p>Code for WETF:</p> PythonR <pre><code># -----------------------------------------------\n# The Wang-Engel temperature function (WETF)\n# -----------------------------------------------\n@numba.jit(nopython=True)\ndef calculate_wang_engel_temperature( Tday, Tmin, Topt, Tmax):\n    if (Topt &lt;= Tmin):\n        y = 0\n    else:\n        alpha = math.log(2) / math.log((Tmax - Tmin)/(Topt - Tmin))\n        beta = 1 \n        y = ( (2 * (Tday - Tmin)**alpha * (Topt - Tmin)**alpha - (Tday - Tmin)**(2*alpha)) / (Topt - Tmin)**(2*alpha) )**beta\n        #y = 0 if (Tday &lt; Tmin) else y\n        #y = 0 if (Tday &gt; Tmax) else y\n        y = np.where(((Tday &lt; Tmin) | (Tday &gt; Tmax) ), 0, y)\n    return y\n\n@numba.jit(parallel=True) \ndef apply_WETF(col_Tday, Tmin, Topt, Tmax):\n    n = len(col_Tday)\n    result = np.empty(n, dtype=\"float64\")\n    assert len(col_Tday) == n\n    for i in prange(n):\n        result[i] = calculate_wang_engel_temperature(col_Tday[i], Tmin, Topt, Tmax)\n    return result\n\ndef compute_WETF(df, Tmin, Topt, Tmax):\n    df[\"WETFTMAX\"] = apply_WETF( df[\"Tdaymax\"].to_numpy(), Tmin, Topt, Tmax )\n    return df\n</code></pre> <p><pre><code># The Wang\u2013Engel temperature function\ncalculate_wang_engel_temperature &lt;- function( Tday, Tmin, Topt, Tmax) {\n  if (Topt &lt;= Tmin){\n    y &lt;- 0\n  } else {\n    alpha &lt;- log(2) / log((Tmax - Tmin)/(Topt - Tmin))\n    beta &lt;- 1 \n    y &lt;- ( (2 * (Tday - Tmin)^alpha * (Topt - Tmin)^alpha - (Tday - Tmin)^(2*alpha)) / (Topt - Tmin)^(2*alpha) )^beta\n    y &lt;- if_else(Tday &lt; Tmin, 0, y)\n    y &lt;- if_else(Tday &gt; Tmax, 0, y)\n  }\n  return(y)\n}\ncalculate_WETF_wrap &lt;- function( Tday, Tmin, Topt, Tmax) {\n  y &lt;- vector(\"numeric\", length (Tday)) \n  for (i in 1:length(Tday)) {\n    y[[i]] &lt;- calculate_wang_engel_temperature( Tday=Tday[[i]], Tmin, \n                                                Topt=Topt, Tmax) \n  }\n  return(y)\n}\n</code></pre> The whole R code can be found in the Github repository at <code>Rcode</code> folder.</p> <ol> <li> <p>Three cardinal temperatures\u00a0\u21a9</p> </li> </ol>"},{"location":"notebooks/Getting_Started/","title":"Getting Started","text":"In\u00a0[1]: Copied! <pre>import os, sys, gc\nimport pandas as pd\n#import datetime as dt\npd.set_option('display.max_columns', None)\n\n#\u00a0Import Temperature Response Functions package\nimport tfunct\nfrom tfunct.data import load_dataset #\u00a0Function to load existing dataset\n\nprint(tfunct.__version__)\n</pre> import os, sys, gc import pandas as pd #import datetime as dt pd.set_option('display.max_columns', None)  #\u00a0Import Temperature Response Functions package import tfunct from tfunct.data import load_dataset #\u00a0Function to load existing dataset  print(tfunct.__version__) <pre>tfunct version 1.0.0\n</pre> In\u00a0[2]: Copied! <pre>#\u00a0Load example dataset (Phenology, NDVI and Weather data for each site)\ndata = load_dataset()\n#\u00a0Display available datasets\nprint(data.keys()) # ['Pheno', 'NDVI', 'Weather']\n\nprint(data['Pheno'].shape, data['NDVI'].shape, data['Weather'].shape)\n</pre> #\u00a0Load example dataset (Phenology, NDVI and Weather data for each site) data = load_dataset() #\u00a0Display available datasets print(data.keys()) # ['Pheno', 'NDVI', 'Weather']  print(data['Pheno'].shape, data['NDVI'].shape, data['Weather'].shape) <pre>dict_keys(['Pheno', 'NDVI', 'Weather'])\n(50, 10) (436, 11) (246702, 14)\n</pre> In\u00a0[3]: Copied! <pre>data['Pheno'].head()\n</pre> data['Pheno'].head() Out[3]: country location loc_code lat lon cycle SowingDateQC Days_To_Heading Days_To_Maturity ObsYield 0 Nepal Bhairahawa BHR 27.500 83.450 2019 2018-11-26 89 122 2.96685 1 Pakistan Faisalabad FAS 31.398 73.054 2014 2013-11-23 95 139 4.88205 2 Pakistan Faisalabad FAS 31.398 73.054 2015 2014-12-03 77 121 3.59100 3 Pakistan Faisalabad FAS 31.398 73.054 2016 2015-12-07 89 133 2.86425 4 Pakistan Faisalabad FAS 31.398 73.054 2017 2016-11-21 94 138 3.93300 In\u00a0[4]: Copied! <pre>data['NDVI'].head()\n</pre> data['NDVI'].head() Out[4]: country location loc_code lat lon cycle phenotype_date Year Month Day NDVI 0 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-01-28 2019 1 28 0.73 1 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-02-03 2019 2 3 0.73 2 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-02-11 2019 2 11 0.75 3 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-03-01 2019 3 1 0.62 4 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-03-06 2019 3 6 0.57 In\u00a0[5]: Copied! <pre>data['Weather'].head()\n</pre> data['Weather'].head() Out[5]: location Year Month Day lat lon Precipitation [mm/d] Relative Humidity max [%] Relative Humidity min [%] Shortwave Radiation [MJ/m2/d] TemperatureMax [C] TemperatureMin [C] Wind Speed 2m [m/s] Vapor Pressure Deficit max [kPa] 0 Arizona 1979 1 1 33.06 -111.98 0.00 83.59 36.51 12.98 11.46 0.99 2.09 0.86 1 Arizona 1979 1 2 33.06 -111.98 0.00 47.63 32.73 11.17 10.74 -1.33 2.04 0.87 2 Arizona 1979 1 3 33.06 -111.98 0.00 77.74 38.90 10.13 14.33 1.55 1.16 1.00 3 Arizona 1979 1 4 33.06 -111.98 0.00 87.12 46.08 12.77 16.59 0.88 1.14 1.02 4 Arizona 1979 1 5 33.06 -111.98 3.72 86.54 64.45 9.07 17.12 4.10 1.40 0.69 In\u00a0[6]: Copied! <pre>%%time \n\n# Load module to create a model\nfrom tfunct.model import Model\n\n# ------------------------\n#\u00a0MODEL CONFIGURATION\n# ------------------------\n# Define the Path where the output data will be stored\nPATH_PRJ = '/Users/ernestogiron/Desktop/TemperatureFunctions/'\nRESULTS_PATH = PATH_PRJ + 'results/'\n\nconfig = {\n    \"PROJECT_PATH\": PATH_PRJ,\n    \"RESULTS_PATH\": RESULTS_PATH, #'./', # Results will be put in the same folder where the model is running\n}\n\n# Parameters used by default\nparameters = dict(\n                RUE = 3,\n                DRYMATTER = 0.8,\n                FACTOR_TON_HA = 0.01,\n                YIELD_FACTOR = 0.8 * 0.01,\n                TMIN_PERC_FACTOR = 0.25,\n                NDVI_lowerThreshold = 0.16,\n                Toptmin = 15,\n                Topt = 18,\n                Toptmax = 25,\n                Tmin = 9,\n                Tmax = 34,\n                Lvpd = 1,\n                Uvpd = 4,\n                SFvpd_Lthres = 0.2,\n                SFvpd_Uthres = 1,\n            )\n\n#\u00a0create model to estimate grain yield\n#model = Model(config, parameters) # Use this if you change any parameter above\nmodel = Model(config)\n#\u00a0Preprocess datasets\nmodel.preprocess_raw_datasets(data)\n</pre> %%time   # Load module to create a model from tfunct.model import Model  # ------------------------ #\u00a0MODEL CONFIGURATION # ------------------------ # Define the Path where the output data will be stored PATH_PRJ = '/Users/ernestogiron/Desktop/TemperatureFunctions/' RESULTS_PATH = PATH_PRJ + 'results/'  config = {     \"PROJECT_PATH\": PATH_PRJ,     \"RESULTS_PATH\": RESULTS_PATH, #'./', # Results will be put in the same folder where the model is running }  # Parameters used by default parameters = dict(                 RUE = 3,                 DRYMATTER = 0.8,                 FACTOR_TON_HA = 0.01,                 YIELD_FACTOR = 0.8 * 0.01,                 TMIN_PERC_FACTOR = 0.25,                 NDVI_lowerThreshold = 0.16,                 Toptmin = 15,                 Topt = 18,                 Toptmax = 25,                 Tmin = 9,                 Tmax = 34,                 Lvpd = 1,                 Uvpd = 4,                 SFvpd_Lthres = 0.2,                 SFvpd_Uthres = 1,             )  #\u00a0create model to estimate grain yield #model = Model(config, parameters) # Use this if you change any parameter above model = Model(config) #\u00a0Preprocess datasets model.preprocess_raw_datasets(data) <pre>CPU times: user 356 ms, sys: 30.8 ms, total: 387 ms\nWall time: 391 ms\n</pre> In\u00a0[7]: Copied! <pre>%%time\n# Prepare dataset to run all process in parallel using NDVIA GPU if available\nsites = model.prepareData()\n</pre> %%time # Prepare dataset to run all process in parallel using NDVIA GPU if available sites = model.prepareData() <pre>50it [00:01, 36.35it/s]</pre> <pre>CPU times: user 1.33 s, sys: 66 ms, total: 1.4 s\nWall time: 1.4 s\n</pre> <pre>\n</pre> In\u00a0[8]: Copied! <pre>#sites[0].inputWPN\nsites[0].attributes\n</pre> #sites[0].inputWPN sites[0].attributes Out[8]: <pre>{'country': 'Nepal',\n 'location': 'Bhairahawa',\n 'loc_code': 'BHR',\n 'lat': 27.5,\n 'lon': 83.45,\n 'cycle': 2019,\n 'Days_To_Heading': 89,\n 'Days_To_Maturity': 122,\n 'ObsYield': 2.96685,\n 'Sowing_date': '2018-11-26',\n 'Heading_date': '2019-02-23',\n 'Maturity_date': '2019-03-28',\n 'UID': 1,\n 'ndays_tmn_lt9': 1,\n 'ndays_tmx_gt34': 0,\n 'avg_Tdaymax': 24.578,\n 'avg_NDVI': 0.447,\n 'avg_iPAR': 0.369}</pre> In\u00a0[9]: Copied! <pre>%%time\n\nPRFT_noStress = model.getYield(sites=sites) #Defaults: tfun='PRFT', sites=None, is_VPDStress=False, expCSV=True\nPRFT_noStress.head()\n</pre> %%time  PRFT_noStress = model.getYield(sites=sites) #Defaults: tfun='PRFT', sites=None, is_VPDStress=False, expCSV=True PRFT_noStress.head() <pre>CPU times: user 746 ms, sys: 35.3 ms, total: 781 ms\nWall time: 790 ms\n</pre> Out[9]: UID country location loc_code cycle ObsYield RUE TminFactor Topt SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 18.0 2.67 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 18.0 4.54 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 18.0 3.22 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 18.0 3.95 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 18.0 4.45 In\u00a0[10]: Copied! <pre>%%time\n\nPRFT_SFvpd = model.getYield(sites=sites, is_VPDStress=True)\nPRFT_SFvpd.head()\n</pre> %%time  PRFT_SFvpd = model.getYield(sites=sites, is_VPDStress=True) PRFT_SFvpd.head() <pre>CPU times: user 135 ms, sys: 4.17 ms, total: 139 ms\nWall time: 139 ms\n</pre> Out[10]: UID country location loc_code cycle ObsYield RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 18.0 1.0 4.0 0.2 1.0 1.71 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 18.0 1.0 4.0 0.2 1.0 3.34 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 18.0 1.0 4.0 0.2 1.0 2.69 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 18.0 1.0 4.0 0.2 1.0 2.44 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 18.0 1.0 4.0 0.2 1.0 2.50 In\u00a0[11]: Copied! <pre>from tfunct.util import figures\n\ndirname=os.path.join(config['RESULTS_PATH'], 'PRFT', 'Figures')\nfigures.chart_compareResults(df_result=PRFT_noStress, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code', \n                             loc_leg=2, ncol=2, ha='left', va='top',\n                             title='PRFT\\nNo streess condition', #xlabel='', ylabel='', \n                             dirname=dirname, fname='PRFT_noStress', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</pre> from tfunct.util import figures  dirname=os.path.join(config['RESULTS_PATH'], 'PRFT', 'Figures') figures.chart_compareResults(df_result=PRFT_noStress, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code',                               loc_leg=2, ncol=2, ha='left', va='top',                              title='PRFT\\nNo streess condition', #xlabel='', ylabel='',                               dirname=dirname, fname='PRFT_noStress',                               dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')  In\u00a0[12]: Copied! <pre>dirname=os.path.join(config['RESULTS_PATH'], 'PRFT', 'Figures')\nfigures.chart_compareResults(df_result=PRFT_SFvpd, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code', \n                             loc_leg=2, ncol=2, ha='left', va='top',\n                             title='PRFT\\nVPD streess condition', #xlabel='', ylabel='', \n                             dirname=dirname, fname='PRFT_SFvpd', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</pre> dirname=os.path.join(config['RESULTS_PATH'], 'PRFT', 'Figures') figures.chart_compareResults(df_result=PRFT_SFvpd, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code',                               loc_leg=2, ncol=2, ha='left', va='top',                              title='PRFT\\nVPD streess condition', #xlabel='', ylabel='',                               dirname=dirname, fname='PRFT_SFvpd',                               dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')  In\u00a0[13]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT')\nfigures.plot_corrTempFunct(cmb_noStress=PRFT_noStress, cmb_noStress_filtered=None, \n                           cmb_SFvpd=PRFT_SFvpd, cmb_SFvpd_filtered=None,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_1_errorbar', fmt='pdf')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT') figures.plot_corrTempFunct(cmb_noStress=PRFT_noStress, cmb_noStress_filtered=None,                             cmb_SFvpd=PRFT_SFvpd, cmb_SFvpd_filtered=None,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_1_errorbar', fmt='pdf') In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[14]: Copied! <pre>%%time\n\nfunctype='PRFT'\nisVPDStress=False\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# Combinations\nRUE = [3.0] #[2.8, 2.9, 3.0, 3.1, 3.2]\nTopt = [x for x in range(15, 26)]\nTminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5]\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt, \n                                                     TminFactor=TminFactor, isVPDStress=isVPDStress)\n\ncmb_PRFT_noStress = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                           isVPDStress, array_results, saveFile=True)\ncmb_PRFT_noStress\n</pre> %%time  functype='PRFT' isVPDStress=False df_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data # Combinations RUE = [3.0] #[2.8, 2.9, 3.0, 3.1, 3.2] Topt = [x for x in range(15, 26)] TminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5] #\u00a0No stress conditions array_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt,                                                       TminFactor=TminFactor, isVPDStress=isVPDStress)  cmb_PRFT_noStress = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,                                             isVPDStress, array_results, saveFile=True) cmb_PRFT_noStress  <pre>CPU times: user 274 ms, sys: 13.9 ms, total: 288 ms\nWall time: 290 ms\n</pre> Out[14]: UID country location loc_code cycle ObsYield RUE TminFactor Topt SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 15.0 2.36 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 15.0 4.16 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 15.0 3.02 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 15.0 3.34 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 15.0 3.89 ... ... ... ... ... ... ... ... ... ... ... 545 46 India Pusa PUS-LS 2018 1.44 3.0 0.25 25.0 2.28 546 47 India Pusa PUS-LS 2019 3.10 3.0 0.25 25.0 4.75 547 48 India Ludhiana LDH-NS 2022 6.09 3.0 0.25 25.0 5.07 548 49 India Ludhiana LDH-LS 2022 4.77 3.0 0.25 25.0 3.99 549 50 Spain Spain SPN 2018 8.35 3.0 0.25 25.0 7.08 <p>550 rows \u00d7 10 columns</p> In\u00a0[15]: Copied! <pre>%%time\n\nm_PRFT_noStress = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                                 array_params_to_run, array_results, saveFile=True) #, fmt='parquet')\nm_PRFT_noStress\n</pre> %%time  m_PRFT_noStress = model.getCombinations_Metrics(functype, isVPDStress, df_GYield,                                                   array_params_to_run, array_results, saveFile=True) #, fmt='parquet') m_PRFT_noStress <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:30&lt;00:00,  2.79s/it]</pre> <pre>CPU times: user 28.3 s, sys: 2.11 s, total: 30.4 s\nWall time: 30.7 s\n</pre> <pre>\n</pre> Out[15]: RUE TminFactor Topt MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 3.0 0.25 15.0 0.752 0.923 0.961 20.672 17.186 4.414394e-15 0.726 0.641 0.4338 0.8093 0.96 0.84 82.81 1 3.0 0.25 16.0 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 2 3.0 0.25 17.0 0.685 0.728 0.853 21.322 16.539 1.660386e-15 0.737 0.717 0.6656 0.8561 1.00 0.88 83.46 3 3.0 0.25 18.0 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 4 3.0 0.25 19.0 0.788 0.905 0.951 26.438 19.954 3.803797e-15 0.727 0.648 0.8701 0.8844 0.98 0.85 80.05 5 3.0 0.25 20.0 0.853 1.056 1.028 29.297 21.957 9.429942e-15 0.717 0.590 0.9627 0.8917 0.96 0.83 78.04 6 3.0 0.25 21.0 0.912 1.213 1.101 31.889 23.732 2.729854e-14 0.704 0.529 1.0464 0.8948 0.94 0.81 76.27 7 3.0 0.25 22.0 0.958 1.358 1.165 34.180 25.195 8.858484e-14 0.689 0.472 1.1232 0.8934 0.93 0.79 74.81 8 3.0 0.25 23.0 0.995 1.481 1.217 36.113 26.381 3.282640e-13 0.672 0.424 1.1967 0.8870 0.92 0.77 73.62 9 3.0 0.25 24.0 1.018 1.575 1.255 37.669 27.214 1.359359e-12 0.652 0.388 1.2627 0.8761 0.92 0.76 72.79 10 3.0 0.25 25.0 1.032 1.632 1.277 38.734 27.753 5.840609e-12 0.631 0.366 1.3177 0.8613 0.92 0.75 72.25 In\u00a0[16]: Copied! <pre>%%time\n\nfunctype='PRFT'\nisVPDStress=True\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# Combinations\nRUE = [3.0]\nTopt = [x for x in range(15, 26)]\nTminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5]\nLvpd = [0.5, 1, 1.5, 2, 2.5, 3, 3.5]\nUvpd = [1, 1.5, 2, 2.5, 3, 3.5, 4]\nSFvpd_Lthres = [0.2, 0.4, 0.6, 0.8] \nSFvpd_Uthres = [1]\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt, TminFactor=TminFactor,  \n                                                           Lvpd=Lvpd, Uvpd=Uvpd, SFvpd_Lthres=SFvpd_Lthres, SFvpd_Uthres=SFvpd_Uthres,\n                                                           isVPDStress=isVPDStress)\n\ncmb_PRFT_SFvpd = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                           isVPDStress, array_results, saveFile=True)\ncmb_PRFT_SFvpd\n</pre> %%time  functype='PRFT' isVPDStress=True df_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data # Combinations RUE = [3.0] Topt = [x for x in range(15, 26)] TminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5] Lvpd = [0.5, 1, 1.5, 2, 2.5, 3, 3.5] Uvpd = [1, 1.5, 2, 2.5, 3, 3.5, 4] SFvpd_Lthres = [0.2, 0.4, 0.6, 0.8]  SFvpd_Uthres = [1] #\u00a0No stress conditions array_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt, TminFactor=TminFactor,                                                              Lvpd=Lvpd, Uvpd=Uvpd, SFvpd_Lthres=SFvpd_Lthres, SFvpd_Uthres=SFvpd_Uthres,                                                            isVPDStress=isVPDStress)  cmb_PRFT_SFvpd = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,                                             isVPDStress, array_results, saveFile=True) cmb_PRFT_SFvpd  <pre>CPU times: user 952 ms, sys: 33.9 ms, total: 986 ms\nWall time: 995 ms\n</pre> Out[16]: UID country location loc_code cycle ObsYield RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 15.0 0.5 1.0 0.2 1.0 0.54 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 15.0 0.5 1.0 0.2 1.0 0.95 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 15.0 0.5 1.0 0.2 1.0 1.19 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 15.0 0.5 1.0 0.2 1.0 0.94 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 15.0 0.5 1.0 0.2 1.0 0.78 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 61595 46 India Pusa PUS-LS 2018 1.44 3.0 0.25 25.0 3.5 4.0 0.8 1.0 1.26 61596 47 India Pusa PUS-LS 2019 3.10 3.0 0.25 25.0 3.5 4.0 0.8 1.0 3.44 61597 48 India Ludhiana LDH-NS 2022 6.09 3.0 0.25 25.0 3.5 4.0 0.8 1.0 4.76 61598 49 India Ludhiana LDH-LS 2022 4.77 3.0 0.25 25.0 3.5 4.0 0.8 1.0 3.31 61599 50 Spain Spain SPN 2018 8.35 3.0 0.25 25.0 3.5 4.0 0.8 1.0 6.90 <p>61600 rows \u00d7 14 columns</p> In\u00a0[17]: Copied! <pre>%%time\n\nm_PRFT_SFvpd = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                                 array_params_to_run, array_results, saveFile=True)\nm_PRFT_SFvpd\n</pre> %%time  m_PRFT_SFvpd = model.getCombinations_Metrics(functype, isVPDStress, df_GYield,                                                   array_params_to_run, array_results, saveFile=True) m_PRFT_SFvpd <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1232/1232 [00:00&lt;00:00, 1372.88it/s]</pre> <pre>CPU times: user 744 ms, sys: 1.02 s, total: 1.76 s\nWall time: 910 ms\n</pre> <pre>\n</pre> Out[17]: RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 3.0 0.25 15.0 0.5 1.0 0.2 1.0 3.522 14.317 3.784 77.338 76.465 5.004774e-05 0.293 -4.566 0.1838 0.1904 0.12 0.07 23.53 1 3.0 0.25 15.0 0.5 1.0 0.4 1.0 2.748 8.912 2.985 60.492 59.236 9.871293e-10 0.544 -2.464 0.2445 0.3462 0.22 0.17 40.76 2 3.0 0.25 15.0 0.5 1.0 0.6 1.0 1.976 4.875 2.208 44.225 42.019 1.148104e-12 0.655 -0.895 0.3118 0.5008 0.42 0.35 57.98 3 3.0 0.25 15.0 0.5 1.0 0.8 1.0 1.237 2.213 1.488 29.692 25.959 3.544116e-14 0.701 0.140 0.3757 0.6561 0.72 0.62 74.04 4 3.0 0.25 15.0 0.5 1.5 0.2 1.0 3.142 11.904 3.450 71.356 68.675 4.596118e-04 0.228 -3.627 0.0768 0.2972 0.24 0.12 31.33 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 1227 3.0 0.25 25.0 3.0 4.0 0.8 1.0 0.756 0.927 0.963 26.268 19.119 5.743903e-13 0.665 0.640 0.9409 0.7550 0.99 0.82 80.88 1228 3.0 0.25 25.0 3.5 4.0 0.2 1.0 0.822 1.185 1.088 27.784 20.216 1.095611e-10 0.584 0.539 1.0992 0.7310 1.00 0.78 79.78 1229 3.0 0.25 25.0 3.5 4.0 0.4 1.0 0.759 0.959 0.979 26.979 19.394 2.090076e-12 0.646 0.627 1.0919 0.7566 1.00 0.82 80.61 1230 3.0 0.25 25.0 3.5 4.0 0.6 1.0 0.710 0.863 0.929 27.223 18.864 1.524712e-13 0.682 0.665 1.0818 0.7830 1.00 0.84 81.14 1231 3.0 0.25 25.0 3.5 4.0 0.8 1.0 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 <p>1232 rows \u00d7 20 columns</p> In\u00a0[18]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT')\nfigures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress, \n                   cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=20, alpha=0.65, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT') figures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress,                     cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=20, alpha=0.65, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters', fmt='jpg') In\u00a0[19]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT')\nfigures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress, \n                   cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters_errorbar', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT') figures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress,                     cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters_errorbar', fmt='jpg') In\u00a0[20]: Copied! <pre>#\u00a0Load module to filter combinations in an easy way\nfrom tfunct.util import filterSimulations\n</pre> #\u00a0Load module to filter combinations in an easy way from tfunct.util import filterSimulations  In\u00a0[21]: Copied! <pre>m_PRFT_noStress[(m_PRFT_noStress['Cb']&gt;0.98) &amp; (m_PRFT_noStress['CCC']&gt;0.80) ]\n</pre> m_PRFT_noStress[(m_PRFT_noStress['Cb']&gt;0.98) &amp; (m_PRFT_noStress['CCC']&gt;0.80) ] Out[21]: RUE TminFactor Topt MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 1 3.0 0.25 16.0 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 2 3.0 0.25 17.0 0.685 0.728 0.853 21.322 16.539 1.660386e-15 0.737 0.717 0.6656 0.8561 1.00 0.88 83.46 3 3.0 0.25 18.0 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 In\u00a0[22]: Copied! <pre>m_PRFT_SFvpd[(m_PRFT_SFvpd['Cb']&gt;0.98) &amp; (m_PRFT_SFvpd['CCC']&gt;0.80) &amp; (m_PRFT_SFvpd['RMSRE']&lt;22)]\n</pre> m_PRFT_SFvpd[(m_PRFT_SFvpd['Cb']&gt;0.98) &amp; (m_PRFT_SFvpd['CCC']&gt;0.80) &amp; (m_PRFT_SFvpd['RMSRE']&lt;22)] Out[22]: RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 551 3.0 0.25 19.0 3.0 3.5 0.8 1.0 0.689 0.755 0.869 21.910 16.914 5.709861e-15 0.723 0.706 0.7573 0.8061 1.00 0.86 83.09 651 3.0 0.25 20.0 2.5 3.0 0.8 1.0 0.674 0.758 0.871 21.581 16.520 3.880880e-15 0.727 0.705 0.7142 0.8024 0.99 0.86 83.48 859 3.0 0.25 22.0 2.0 2.5 0.8 1.0 0.646 0.732 0.856 20.753 15.672 1.853433e-15 0.735 0.715 0.7631 0.7889 0.99 0.86 84.33 971 3.0 0.25 23.0 2.0 2.5 0.8 1.0 0.661 0.740 0.860 21.571 16.249 3.514474e-15 0.728 0.712 0.8163 0.7835 0.99 0.86 83.75 In\u00a0[23]: Copied! <pre>%%time\n# path of the combinations and metrics files\nc_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"combinations_Yield_PRFT_noStress.parquet\")\nm_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"metrics_Yield_PRFT_noStress.parquet\")\n#\u00a0Filters\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;', 0.98),\n        CCC = ('&gt;', 0.80)\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\")\n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_PRFT = filterSimulations(functype='PRFT', VPDstress=False, cmb=c_PRFT, met=m_PRFT, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_PRFT\n</pre> %%time # path of the combinations and metrics files c_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"combinations_Yield_PRFT_noStress.parquet\") m_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"metrics_Yield_PRFT_noStress.parquet\") #\u00a0Filters cmb_filters = dict(                 RUE = ('RUE', '=', 3.0 ),                 TminFactor = ('TminFactor', '=', 0.25 )             ) met_filters = dict(         Cb = ('&gt;', 0.98),         CCC = ('&gt;', 0.80)     ) outputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\")  #\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session #\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large. #\u00a0Use dispFig=True if the filtered table is small. filtered_c_PRFT = filterSimulations(functype='PRFT', VPDstress=False, cmb=c_PRFT, met=m_PRFT,                                   cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True,                                   dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',                                  saveResults=True, outputPath=outputPath, fmt='parquet')  filtered_c_PRFT <pre>Loading combinations...\nLoading metrics...\n11 combinations found\n3 combinations found after applied filter\nFiltered data set saved at /Users/ernestogiron/Desktop/TemperatureFunctions/results/PRFT/PRFT_filtered/filtered_metrics_combinations_Yield_PRFT_noStress_20231001.parquet\nCPU times: user 1.17 s, sys: 130 ms, total: 1.3 s\nWall time: 677 ms\n</pre> Out[23]: UID country location loc_code cycle ObsYield RUE TminFactor Topt SimYield MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 16.0 2.48 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 16.0 4.31 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 16.0 3.10 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 16.0 3.57 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 16.0 4.10 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 145 46 India Pusa PUS-LS 2018 1.44 3.0 0.25 18.0 1.64 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 146 47 India Pusa PUS-LS 2019 3.10 3.0 0.25 18.0 3.45 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 147 48 India Ludhiana LDH-NS 2022 6.09 3.0 0.25 18.0 4.48 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 148 49 India Ludhiana LDH-LS 2022 4.77 3.0 0.25 18.0 2.90 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 149 50 Spain Spain SPN 2018 8.35 3.0 0.25 18.0 7.32 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 <p>150 rows \u00d7 23 columns</p> In\u00a0[24]: Copied! <pre>%%time\n\n# Path of the combinations and metrics files\nc_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"combinations_Yield_PRFT_SFvpd.parquet\")\nm_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"metrics_Yield_PRFT_SFvpd.parquet\")\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;', 0.98),\n        CCC = ('&gt;', 0.80)\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\") \n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_PRFT_SFvpd = filterSimulations(functype='PRFT', VPDstress=True, cmb=c_PRFT_SFvpd, met=m_PRFT_SFvpd, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_PRFT_SFvpd\n</pre> %%time  # Path of the combinations and metrics files c_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"combinations_Yield_PRFT_SFvpd.parquet\") m_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"metrics_Yield_PRFT_SFvpd.parquet\") cmb_filters = dict(                 RUE = ('RUE', '=', 3.0 ),                 TminFactor = ('TminFactor', '=', 0.25 )             ) met_filters = dict(         Cb = ('&gt;', 0.98),         CCC = ('&gt;', 0.80)     ) outputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\")   #\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session #\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large. #\u00a0Use dispFig=True if the filtered table is small. filtered_c_PRFT_SFvpd = filterSimulations(functype='PRFT', VPDstress=True, cmb=c_PRFT_SFvpd, met=m_PRFT_SFvpd,                                   cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True,                                   dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',                                  saveResults=True, outputPath=outputPath, fmt='parquet')  filtered_c_PRFT_SFvpd <pre>Loading combinations...\nLoading metrics...\n1232 combinations found\n51 combinations found after applied filter\nFiltered data set saved at /Users/ernestogiron/Desktop/TemperatureFunctions/results/PRFT/PRFT_filtered/filtered_metrics_combinations_Yield_PRFT_SFvpd_20231001.parquet\nCPU times: user 1.25 s, sys: 151 ms, total: 1.4 s\nWall time: 784 ms\n</pre> Out[24]: UID country location loc_code cycle ObsYield RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 18.0 3.5 4.0 0.6 1.0 2.47 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 18.0 3.5 4.0 0.6 1.0 4.48 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 18.0 3.5 4.0 0.6 1.0 3.22 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 18.0 3.5 4.0 0.6 1.0 3.58 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 18.0 3.5 4.0 0.6 1.0 4.01 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 2545 46 India Pusa PUS-LS 2018 1.44 3.0 0.25 25.0 3.5 4.0 0.8 1.0 1.26 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 2546 47 India Pusa PUS-LS 2019 3.10 3.0 0.25 25.0 3.5 4.0 0.8 1.0 3.44 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 2547 48 India Ludhiana LDH-NS 2022 6.09 3.0 0.25 25.0 3.5 4.0 0.8 1.0 4.76 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 2548 49 India Ludhiana LDH-LS 2022 4.77 3.0 0.25 25.0 3.5 4.0 0.8 1.0 3.31 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 2549 50 Spain Spain SPN 2018 8.35 3.0 0.25 25.0 3.5 4.0 0.8 1.0 6.90 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 <p>2550 rows \u00d7 27 columns</p> In\u00a0[25]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'],'PRFT', 'PRFT_filtered')\nfigures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT, \n                           cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=40, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'],'PRFT', 'PRFT_filtered') figures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT,                             cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=40, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered', fmt='jpg') In\u00a0[26]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT', 'PRFT_filtered')\nfigures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT, \n                           cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered_errorbar', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT', 'PRFT_filtered') figures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT,                             cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered_errorbar', fmt='jpg') In\u00a0[27]: Copied! <pre>#\u00a0Prepare data as a input for create comparison figures by site and/or best combinations\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT', 'PRFT_filtered')\ndf_TDays_vs_TempResponse, df_TDays_vs_TempResponse_mean_allSites = \\\nfigures.createFigure_Type_I_PRFT(sites, cmb=filtered_c_PRFT, roundVal=3, maxTDay=40, saveTable=True,\n                        path_to_save_results=path_to_save_results, fmt='parquet')\ndf_TDays_vs_TempResponse.head()\n</pre> #\u00a0Prepare data as a input for create comparison figures by site and/or best combinations path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT', 'PRFT_filtered') df_TDays_vs_TempResponse, df_TDays_vs_TempResponse_mean_allSites = \\ figures.createFigure_Type_I_PRFT(sites, cmb=filtered_c_PRFT, roundVal=3, maxTDay=40, saveTable=True,                         path_to_save_results=path_to_save_results, fmt='parquet') df_TDays_vs_TempResponse.head() <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 50/50 [00:01&lt;00:00, 40.26it/s]\n</pre> <pre>Calculating average value for all simulations...\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:01&lt;00:00,  2.88it/s]\n</pre> Out[27]: TDay TempResponse UID country location loc_code cycle RUE TminFactor Topt ObsYield SimYield 0 0.0 0.360 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 1 0.1 0.368 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 2 0.2 0.376 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 3 0.3 0.384 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 4 0.4 0.392 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 In\u00a0[28]: Copied! <pre>#cmb = [cmb_PRFT_noStress['UID']==uid].reset_index(drop=True)\nfigures.diplay_Figure_Type_I_PRFT_InOneFig(cmb=filtered_c_PRFT, fnct='PRFT', \n                                           df_tdays=df_TDays_vs_TempResponse, \n                                           df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,\n                                           saveFig=True,showFig=True, fmt='jpg', \n                                           path_to_save_results=path_to_save_results)\n</pre> #cmb = [cmb_PRFT_noStress['UID']==uid].reset_index(drop=True) figures.diplay_Figure_Type_I_PRFT_InOneFig(cmb=filtered_c_PRFT, fnct='PRFT',                                             df_tdays=df_TDays_vs_TempResponse,                                             df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,                                            saveFig=True,showFig=True, fmt='jpg',                                             path_to_save_results=path_to_save_results) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 50/50 [00:24&lt;00:00,  2.01it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:00&lt;00:00,  6.12it/s]\n</pre> In\u00a0[29]: Copied! <pre>%%time\n#cmb = [cmb_PRFT_noStress['UID']==uid].reset_index(drop=True)\nfigures.display_FigTDay_vs_TempResponseBySiteYrs(cmb=filtered_c_PRFT, df_tdays=df_TDays_vs_TempResponse, \n                                         roundVal=2, maxTDay=40, fnct='PRFT', \n                                         saveFig=True, showFig=True, fmt='jpg', cols=5, \n                                         path_to_save_results=path_to_save_results)\n</pre> %%time #cmb = [cmb_PRFT_noStress['UID']==uid].reset_index(drop=True) figures.display_FigTDay_vs_TempResponseBySiteYrs(cmb=filtered_c_PRFT, df_tdays=df_TDays_vs_TempResponse,                                           roundVal=2, maxTDay=40, fnct='PRFT',                                           saveFig=True, showFig=True, fmt='jpg', cols=5,                                           path_to_save_results=path_to_save_results) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:43&lt;00:00,  4.38s/it]\n</pre> <pre>CPU times: user 51.3 s, sys: 1.25 s, total: 52.5 s\nWall time: 52.8 s\n</pre> In\u00a0[30]: Copied! <pre>uid = 1\ndf0 = filtered_c_PRFT[filtered_c_PRFT['UID']==uid].reset_index(drop=True)\nfigures.diplay_Figure_Type_I_PRFT_InOneFig(cmb=df0, fnct='PRFT', \n                                           df_tdays=df_TDays_vs_TempResponse, \n                                           df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,\n                                           saveFig=True,showFig=True, fmt='jpg', \n                                           path_to_save_results=path_to_save_results) #fname = \"Figure_PRFT_SiteYrs_Comparison\"\n</pre> uid = 1 df0 = filtered_c_PRFT[filtered_c_PRFT['UID']==uid].reset_index(drop=True) figures.diplay_Figure_Type_I_PRFT_InOneFig(cmb=df0, fnct='PRFT',                                             df_tdays=df_TDays_vs_TempResponse,                                             df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,                                            saveFig=True,showFig=True, fmt='jpg',                                             path_to_save_results=path_to_save_results) #fname = \"Figure_PRFT_SiteYrs_Comparison\"  <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:00&lt;00:00,  4.62it/s]\n</pre> In\u00a0[31]: Copied! <pre>print(filtered_c_PRFT['Topt'].unique())\nprint(filtered_c_PRFT_SFvpd['Topt'].sort_values().unique())\nprint(filtered_c_PRFT_SFvpd['Lvpd'].sort_values().unique())\nprint(filtered_c_PRFT_SFvpd['Uvpd'].sort_values().unique())\nprint(filtered_c_PRFT_SFvpd['SFvpd_Lthres'].sort_values().unique())\nprint(filtered_c_PRFT_SFvpd['SFvpd_Uthres'].sort_values().unique())\n</pre> print(filtered_c_PRFT['Topt'].unique()) print(filtered_c_PRFT_SFvpd['Topt'].sort_values().unique()) print(filtered_c_PRFT_SFvpd['Lvpd'].sort_values().unique()) print(filtered_c_PRFT_SFvpd['Uvpd'].sort_values().unique()) print(filtered_c_PRFT_SFvpd['SFvpd_Lthres'].sort_values().unique()) print(filtered_c_PRFT_SFvpd['SFvpd_Uthres'].sort_values().unique()) <pre>[16. 17. 18.]\n[18. 19. 20. 21. 22. 23. 24. 25.]\n[2.  2.5 3.  3.5]\n[2.5 3.  3.5 4. ]\n[0.4 0.6 0.8]\n[1.]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/Getting_Started/#temperature-response-functions","title":"Temperature Response Functions\u00b6","text":"<p>Here we use three different temperature functions with different cardinal temperature combinations with and without VPD stress function for the period from heading to maturity (grain filling period).</p> <p>Authors:</p> <ul> <li>Azam Lashkari (CIMMYT-China, azam.lashkari@jic.ac.uk)</li> <li>Urs Christoph Schulthess (CIMMYT-China, U.Schulthess@cgiar.org)</li> <li>Ernesto Giron Echeverry (Independent Researcher, e.giron.e@gmail.com)</li> </ul> <p>Last updated: September 28, 2023</p>"},{"location":"notebooks/Getting_Started/#load-libraries","title":"Load libraries\u00b6","text":""},{"location":"notebooks/Getting_Started/#load-phenology-ndvi-and-weather-example-datasets","title":"Load Phenology, NDVI and Weather example datasets\u00b6","text":""},{"location":"notebooks/Getting_Started/#display-phenology","title":"Display phenology\u00b6","text":""},{"location":"notebooks/Getting_Started/#display-ndvi","title":"Display NDVI\u00b6","text":""},{"location":"notebooks/Getting_Started/#display-weather","title":"Display Weather\u00b6","text":"<p>AgERA5 weather dataset</p>"},{"location":"notebooks/Getting_Started/#create-a-model","title":"Create a model\u00b6","text":"<p>The model contains all of the required functions to analyse the data</p>"},{"location":"notebooks/Getting_Started/#prepare-locations","title":"Prepare locations\u00b6","text":""},{"location":"notebooks/Getting_Started/#photosynthetic-reduction-factor-prft","title":"Photosynthetic Reduction Factor (PRFT)\u00b6","text":"<p>Calculating grain yield using Ritchie's Temperature-based function affecting Photosynthetic Reduction Factor (PRFT)</p>"},{"location":"notebooks/Getting_Started/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Getting_Started/#stressed-vpd","title":"Stressed VPD\u00b6","text":""},{"location":"notebooks/Getting_Started/#display-grain-yield","title":"Display Grain Yield\u00b6","text":"<p>Create a figure to compare simulated grain yield against observed.</p>"},{"location":"notebooks/Getting_Started/#combinations","title":"Combinations\u00b6","text":"<p>To establish the optimum temperature response for grain-filling period, you can run several models using a wide range of cardinal temperatures.</p> <p>The optimum temperature for photosynthesis depends on the choosen temperature function.</p>"},{"location":"notebooks/Getting_Started/#prft-combinations","title":"PRFT combinations\u00b6","text":""},{"location":"notebooks/Getting_Started/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Getting_Started/#no-stress-metrics","title":"No stress Metrics\u00b6","text":""},{"location":"notebooks/Getting_Started/#stressed-vapor-pressure-deficit-vpd","title":"stressed Vapor pressure deficit (VPD)\u00b6","text":""},{"location":"notebooks/Getting_Started/#display-grain-yield-comparison-with-and-without-vpd-stress","title":"Display grain yield comparison with and without VPD stress\u00b6","text":""},{"location":"notebooks/Getting_Started/#select-the-best-results-using-filters","title":"Select the best results using filters\u00b6","text":"<p>After running several models you can filter results to see which one look better.</p> <p>The following table is an example of one filter used to evaluate the best models, it only use three (3) evaluation metrics (Cb, CCC, and RMSRE) to select the top ones.</p> Temperature Function Cb CCC RMSRE PRFT 0.98 &gt; 0.8 PRFT vpd stress 0.98 &gt; 0.8 &lt; 22"},{"location":"notebooks/Getting_Started/#filter-prft-manually","title":"filter PRFT manually\u00b6","text":""},{"location":"notebooks/Getting_Started/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Getting_Started/#vpd-stress-conditions","title":"VPD stress conditions\u00b6","text":""},{"location":"notebooks/Getting_Started/#comparison-of-the-best-combinations","title":"Comparison of the best combinations\u00b6","text":""},{"location":"notebooks/Getting_Started/#no-stress-condition","title":"No Stress condition\u00b6","text":""},{"location":"notebooks/Getting_Started/#conclusion","title":"Conclusion\u00b6","text":"<p>Congratulations! You have run a simulation using a prebuilt dataset and the Temperature Functions API.</p>"},{"location":"notebooks/Getting_Started/#type-1-one-cardinal-temperature","title":"Type 1- one cardinal temperature\u00b6","text":"Model Parameters No stress VPD stress RUE 3.0 3.0 TminFactor 0.25 0.25 Topt 16-18 \u00b0C 18-25 \u00b0C VPDL 2-3.5 kPa VPDU 2.5-4.0 kPa SFvpdL 0.4-08 SFvpdU 1"},{"location":"notebooks/Querying%20combinations%20DuckDB/","title":"Querying combinations DuckDB","text":"In\u00a0[13]: Copied! <pre># to install: pip install duckdb\nimport duckdb\n\n# some DuckDB setup \ncon = duckdb.connect()\n# enable automatic query parallelization\ncon.execute(\"PRAGMA threads=2\")\n# enable caching of parquet metadata\ncon.execute(\"PRAGMA enable_object_cache\")\n</pre> # to install: pip install duckdb import duckdb  # some DuckDB setup  con = duckdb.connect() # enable automatic query parallelization con.execute(\"PRAGMA threads=2\") # enable caching of parquet metadata con.execute(\"PRAGMA enable_object_cache\") In\u00a0[13]: Copied! <pre># Display the number of combinations in TPF simulations\nprint(duckdb.query('''\nSELECT COUNT(*)\nFROM '/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet' \n''').fetchall())\n</pre> # Display the number of combinations in TPF simulations print(duckdb.query(''' SELECT COUNT(*) FROM '/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet'  ''').fetchall()) <pre>[(15680000,)]\n</pre> In\u00a0[17]: Copied! <pre>%%time\nprint(duckdb.query('''\nSELECT COUNT(*)\nFROM '/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet' \nWHERE RUE = 3.0 AND TminFactor= 0.25 AND Topt BETWEEN 16.0 AND 18\n''').fetchall())\n</pre> %%time print(duckdb.query(''' SELECT COUNT(*) FROM '/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet'  WHERE RUE = 3.0 AND TminFactor= 0.25 AND Topt BETWEEN 16.0 AND 18 ''').fetchall()) <pre>[(2956800,)]\nCPU times: user 349 ms, sys: 7.35 ms, total: 356 ms\nWall time: 59 ms\n</pre> In\u00a0[16]: Copied! <pre>%%time\ncon.execute(\"SELECT * FROM '/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet' \\\nWHERE RUE = 3.0 AND TminFactor= 0.25 AND Topt BETWEEN 16.0 AND 18 LIMIT 5\").df()\n</pre> %%time con.execute(\"SELECT * FROM '/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet' \\ WHERE RUE = 3.0 AND TminFactor= 0.25 AND Topt BETWEEN 16.0 AND 18 LIMIT 5\").df()  <pre>CPU times: user 35.6 ms, sys: 7.11 ms, total: 42.7 ms\nWall time: 22.1 ms\n</pre> Out[16]: UID country location loc_code cycle ObsYield RUE Tmin Topt Tmax TminFactor Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 5.0 17.0 38.0 0.25 0.5 1.0 0.2 1.0 0.58 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 5.0 17.0 38.0 0.25 0.5 1.0 0.2 1.0 1.00 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 5.0 17.0 38.0 0.25 0.5 1.0 0.2 1.0 1.22 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 5.0 17.0 38.0 0.25 0.5 1.0 0.2 1.0 1.03 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 5.0 17.0 38.0 0.25 0.5 1.0 0.2 1.0 0.85 In\u00a0[18]: Copied! <pre>%%time\ncon.execute(\"SELECT * \\\nFROM '/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet', \\\n'/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/metrics_Yield_WETF_SFvpd.parquet' \\\nWHERE UID = UID LIMIT 5\").df()\n</pre> %%time con.execute(\"SELECT * \\ FROM '/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/combinations_Yield_WETF_SFvpd.parquet', \\ '/Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_SFvpd/metrics_Yield_WETF_SFvpd.parquet' \\ WHERE UID = UID LIMIT 5\").df()  <pre>CPU times: user 82 ms, sys: 41.4 ms, total: 123 ms\nWall time: 123 ms\n</pre> Out[18]: UID country location loc_code cycle ObsYield RUE Tmin Topt Tmax ... RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 5.0 17.0 38.0 ... 86.331 85.462 0.003508 0.164 -5.772 0.0504 0.1357 0.09 0.04 14.54 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 5.0 17.0 38.0 ... 86.331 85.462 0.003508 0.164 -5.772 0.0504 0.1357 0.09 0.04 14.54 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 5.0 17.0 38.0 ... 86.331 85.462 0.003508 0.164 -5.772 0.0504 0.1357 0.09 0.04 14.54 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 5.0 17.0 38.0 ... 86.331 85.462 0.003508 0.164 -5.772 0.0504 0.1357 0.09 0.04 14.54 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 5.0 17.0 38.0 ... 86.331 85.462 0.003508 0.164 -5.772 0.0504 0.1357 0.09 0.04 14.54 <p>5 rows \u00d7 38 columns</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/Querying%20combinations%20DuckDB/#temperature-response-functions","title":"Temperature Response Functions\u00b6","text":"<p>Here we use the temperature Trapezoid temperature function with different cardinal temperature combinations with and without VPD stress function for the period from heading to maturity (grain filling period).</p> <p>Authors:</p> <ul> <li>Azam Lashkari (CIMMYT-China, azam.lashkari@jic.ac.uk)</li> <li>Urs Christoph Schulthess (CIMMYT-China, U.Schulthess@cgiar.org)</li> <li>Ernesto Giron Echeverry (Independent Researcher, e.giron.e@gmail.com)</li> </ul> <p>Last updated: October 01, 2023</p>"},{"location":"notebooks/Querying%20combinations%20DuckDB/#querying-combinations-with-precision-using-duckdb","title":"Querying combinations with precision using DuckDB\u00b6","text":""},{"location":"notebooks/Querying%20combinations%20DuckDB/#first-query","title":"First query\u00b6","text":"<p>Now suppose we want to figure out how many rows are in our data set. We can do that using the following code snippets.</p>"},{"location":"notebooks/Querying%20combinations%20DuckDB/#display-the-number-of-combinations-in-tpf-simulations","title":"Display the number of combinations in TPF simulations\u00b6","text":""},{"location":"notebooks/Querying%20combinations%20DuckDB/#filter-dataset","title":"Filter dataset\u00b6","text":"<p>We can filter the big files easily as follows:</p>"},{"location":"notebooks/Querying%20combinations%20DuckDB/#display-result-in-a-table-or-pandas-dataframe","title":"Display result in a table or pandas dataframe\u00b6","text":""},{"location":"notebooks/Querying%20combinations%20DuckDB/#join-combinations-and-metrics-results-in-one-table","title":"Join combinations and metrics results in one table\u00b6","text":""},{"location":"notebooks/Using%20PRFT/","title":"Estimating Yield using PRFT","text":"In\u00a0[1]: Copied! <pre>import os, sys, gc\nimport pandas as pd\n#import datetime as dt\npd.set_option('display.max_columns', None)\n\n#\u00a0Import Temperature Response Functions package\nimport tfunct\nfrom tfunct.data import load_dataset #\u00a0Function to load existing dataset\n\nprint(tfunct.__version__)\n</pre> import os, sys, gc import pandas as pd #import datetime as dt pd.set_option('display.max_columns', None)  #\u00a0Import Temperature Response Functions package import tfunct from tfunct.data import load_dataset #\u00a0Function to load existing dataset  print(tfunct.__version__) <pre>tfunct version 1.0.0\n</pre> In\u00a0[2]: Copied! <pre>#\u00a0Load example dataset (Phenology, NDVI and Weather data for each site)\ndata = load_dataset()\n#\u00a0Display available datasets\nprint(data.keys()) # ['Pheno', 'NDVI', 'Weather']\n\nprint(data['Pheno'].shape, data['NDVI'].shape, data['Weather'].shape)\n</pre> #\u00a0Load example dataset (Phenology, NDVI and Weather data for each site) data = load_dataset() #\u00a0Display available datasets print(data.keys()) # ['Pheno', 'NDVI', 'Weather']  print(data['Pheno'].shape, data['NDVI'].shape, data['Weather'].shape) <pre>dict_keys(['Pheno', 'NDVI', 'Weather'])\n(50, 10) (436, 11) (246702, 14)\n</pre> In\u00a0[3]: Copied! <pre>data['Pheno'].head()\n</pre> data['Pheno'].head() Out[3]: country location loc_code lat lon cycle SowingDateQC Days_To_Heading Days_To_Maturity ObsYield 0 Nepal Bhairahawa BHR 27.500 83.450 2019 2018-11-26 89 122 2.96685 1 Pakistan Faisalabad FAS 31.398 73.054 2014 2013-11-23 95 139 4.88205 2 Pakistan Faisalabad FAS 31.398 73.054 2015 2014-12-03 77 121 3.59100 3 Pakistan Faisalabad FAS 31.398 73.054 2016 2015-12-07 89 133 2.86425 4 Pakistan Faisalabad FAS 31.398 73.054 2017 2016-11-21 94 138 3.93300 In\u00a0[4]: Copied! <pre>data['NDVI'].head()\n</pre> data['NDVI'].head() Out[4]: country location loc_code lat lon cycle phenotype_date Year Month Day NDVI 0 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-01-28 2019 1 28 0.73 1 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-02-03 2019 2 3 0.73 2 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-02-11 2019 2 11 0.75 3 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-03-01 2019 3 1 0.62 4 Nepal Bhairahawa BHR 27.5 83.45 2019 2019-03-06 2019 3 6 0.57 In\u00a0[5]: Copied! <pre>data['Weather'].head()\n</pre> data['Weather'].head() Out[5]: location Year Month Day lat lon Precipitation [mm/d] Relative Humidity max [%] Relative Humidity min [%] Shortwave Radiation [MJ/m2/d] TemperatureMax [C] TemperatureMin [C] Wind Speed 2m [m/s] Vapor Pressure Deficit max [kPa] 0 Arizona 1979 1 1 33.06 -111.98 0.00 83.59 36.51 12.98 11.46 0.99 2.09 0.86 1 Arizona 1979 1 2 33.06 -111.98 0.00 47.63 32.73 11.17 10.74 -1.33 2.04 0.87 2 Arizona 1979 1 3 33.06 -111.98 0.00 77.74 38.90 10.13 14.33 1.55 1.16 1.00 3 Arizona 1979 1 4 33.06 -111.98 0.00 87.12 46.08 12.77 16.59 0.88 1.14 1.02 4 Arizona 1979 1 5 33.06 -111.98 3.72 86.54 64.45 9.07 17.12 4.10 1.40 0.69 In\u00a0[6]: Copied! <pre>%%time \n\n# Load module to create a model\nfrom tfunct.model import Model\n\n# ------------------------\n#\u00a0MODEL CONFIGURATION\n# ------------------------\n# Define the Path where the output data will be stored\nPATH_PRJ = '/Users/ernestogiron/Desktop/TemperatureFunctions/'\nRESULTS_PATH = PATH_PRJ + 'results/'\n\nconfig = {\n    \"PROJECT_PATH\": PATH_PRJ,\n    \"RESULTS_PATH\": RESULTS_PATH, #'./', # Results will be put in the same folder where the model is running\n}\n\n# Parameters used by default\nparameters = dict(\n                RUE = 3,\n                DRYMATTER = 0.8,\n                FACTOR_TON_HA = 0.01,\n                YIELD_FACTOR = 0.8 * 0.01,\n                TMIN_PERC_FACTOR = 0.25,\n                NDVI_lowerThreshold = 0.16,\n                Toptmin = 15,\n                Topt = 18,\n                Toptmax = 25,\n                Tmin = 9,\n                Tmax = 34,\n                Lvpd = 1,\n                Uvpd = 4,\n                SFvpd_Lthres = 0.2,\n                SFvpd_Uthres = 1,\n            )\n\n#\u00a0create model to estimate grain yield\n#model = Model(config, parameters) # Use this if you change any parameter above\nmodel = Model(config)\n#\u00a0Preprocess datasets\nmodel.preprocess_raw_datasets(data)\n</pre> %%time   # Load module to create a model from tfunct.model import Model  # ------------------------ #\u00a0MODEL CONFIGURATION # ------------------------ # Define the Path where the output data will be stored PATH_PRJ = '/Users/ernestogiron/Desktop/TemperatureFunctions/' RESULTS_PATH = PATH_PRJ + 'results/'  config = {     \"PROJECT_PATH\": PATH_PRJ,     \"RESULTS_PATH\": RESULTS_PATH, #'./', # Results will be put in the same folder where the model is running }  # Parameters used by default parameters = dict(                 RUE = 3,                 DRYMATTER = 0.8,                 FACTOR_TON_HA = 0.01,                 YIELD_FACTOR = 0.8 * 0.01,                 TMIN_PERC_FACTOR = 0.25,                 NDVI_lowerThreshold = 0.16,                 Toptmin = 15,                 Topt = 18,                 Toptmax = 25,                 Tmin = 9,                 Tmax = 34,                 Lvpd = 1,                 Uvpd = 4,                 SFvpd_Lthres = 0.2,                 SFvpd_Uthres = 1,             )  #\u00a0create model to estimate grain yield #model = Model(config, parameters) # Use this if you change any parameter above model = Model(config) #\u00a0Preprocess datasets model.preprocess_raw_datasets(data) <pre>CPU times: user 356 ms, sys: 30.8 ms, total: 387 ms\nWall time: 391 ms\n</pre> In\u00a0[7]: Copied! <pre>%%time\n# Prepare dataset to run all process in parallel using NDVIA GPU if available\nsites = model.prepareData()\n</pre> %%time # Prepare dataset to run all process in parallel using NDVIA GPU if available sites = model.prepareData() <pre>50it [00:01, 36.35it/s]</pre> <pre>CPU times: user 1.33 s, sys: 66 ms, total: 1.4 s\nWall time: 1.4 s\n</pre> <pre>\n</pre> In\u00a0[8]: Copied! <pre>#sites[0].inputWPN\nsites[0].attributes\n</pre> #sites[0].inputWPN sites[0].attributes Out[8]: <pre>{'country': 'Nepal',\n 'location': 'Bhairahawa',\n 'loc_code': 'BHR',\n 'lat': 27.5,\n 'lon': 83.45,\n 'cycle': 2019,\n 'Days_To_Heading': 89,\n 'Days_To_Maturity': 122,\n 'ObsYield': 2.96685,\n 'Sowing_date': '2018-11-26',\n 'Heading_date': '2019-02-23',\n 'Maturity_date': '2019-03-28',\n 'UID': 1,\n 'ndays_tmn_lt9': 1,\n 'ndays_tmx_gt34': 0,\n 'avg_Tdaymax': 24.578,\n 'avg_NDVI': 0.447,\n 'avg_iPAR': 0.369}</pre> In\u00a0[9]: Copied! <pre>%%time\n\nPRFT_noStress = model.getYield(sites=sites) #Defaults: tfun='PRFT', sites=None, is_VPDStress=False, expCSV=True\nPRFT_noStress.head()\n</pre> %%time  PRFT_noStress = model.getYield(sites=sites) #Defaults: tfun='PRFT', sites=None, is_VPDStress=False, expCSV=True PRFT_noStress.head() <pre>CPU times: user 746 ms, sys: 35.3 ms, total: 781 ms\nWall time: 790 ms\n</pre> Out[9]: UID country location loc_code cycle ObsYield RUE TminFactor Topt SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 18.0 2.67 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 18.0 4.54 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 18.0 3.22 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 18.0 3.95 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 18.0 4.45 In\u00a0[10]: Copied! <pre>%%time\n\nPRFT_SFvpd = model.getYield(sites=sites, is_VPDStress=True)\nPRFT_SFvpd.head()\n</pre> %%time  PRFT_SFvpd = model.getYield(sites=sites, is_VPDStress=True) PRFT_SFvpd.head() <pre>CPU times: user 135 ms, sys: 4.17 ms, total: 139 ms\nWall time: 139 ms\n</pre> Out[10]: UID country location loc_code cycle ObsYield RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 18.0 1.0 4.0 0.2 1.0 1.71 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 18.0 1.0 4.0 0.2 1.0 3.34 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 18.0 1.0 4.0 0.2 1.0 2.69 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 18.0 1.0 4.0 0.2 1.0 2.44 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 18.0 1.0 4.0 0.2 1.0 2.50 In\u00a0[11]: Copied! <pre>from tfunct.util import figures\n\ndirname=os.path.join(config['RESULTS_PATH'], 'PRFT', 'Figures')\nfigures.chart_compareResults(df_result=PRFT_noStress, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code', \n                             loc_leg=2, ncol=2, ha='left', va='top',\n                             title='PRFT\\nNo streess condition', #xlabel='', ylabel='', \n                             dirname=dirname, fname='PRFT_noStress', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</pre> from tfunct.util import figures  dirname=os.path.join(config['RESULTS_PATH'], 'PRFT', 'Figures') figures.chart_compareResults(df_result=PRFT_noStress, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code',                               loc_leg=2, ncol=2, ha='left', va='top',                              title='PRFT\\nNo streess condition', #xlabel='', ylabel='',                               dirname=dirname, fname='PRFT_noStress',                               dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')  In\u00a0[12]: Copied! <pre>dirname=os.path.join(config['RESULTS_PATH'], 'PRFT', 'Figures')\nfigures.chart_compareResults(df_result=PRFT_SFvpd, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code', \n                             loc_leg=2, ncol=2, ha='left', va='top',\n                             title='PRFT\\nVPD streess condition', #xlabel='', ylabel='', \n                             dirname=dirname, fname='PRFT_SFvpd', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</pre> dirname=os.path.join(config['RESULTS_PATH'], 'PRFT', 'Figures') figures.chart_compareResults(df_result=PRFT_SFvpd, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code',                               loc_leg=2, ncol=2, ha='left', va='top',                              title='PRFT\\nVPD streess condition', #xlabel='', ylabel='',                               dirname=dirname, fname='PRFT_SFvpd',                               dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')  In\u00a0[13]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT')\nfigures.plot_corrTempFunct(cmb_noStress=PRFT_noStress, cmb_noStress_filtered=None, \n                           cmb_SFvpd=PRFT_SFvpd, cmb_SFvpd_filtered=None,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_1_errorbar', fmt='pdf')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT') figures.plot_corrTempFunct(cmb_noStress=PRFT_noStress, cmb_noStress_filtered=None,                             cmb_SFvpd=PRFT_SFvpd, cmb_SFvpd_filtered=None,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_1_errorbar', fmt='pdf') In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[14]: Copied! <pre>%%time\n\nfunctype='PRFT'\nisVPDStress=False\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# Combinations\nRUE = [3.0] #[2.8, 2.9, 3.0, 3.1, 3.2]\nTopt = [x for x in range(15, 26)]\nTminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5]\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt, \n                                                     TminFactor=TminFactor, isVPDStress=isVPDStress)\n\ncmb_PRFT_noStress = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                           isVPDStress, array_results, saveFile=True)\ncmb_PRFT_noStress\n</pre> %%time  functype='PRFT' isVPDStress=False df_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data # Combinations RUE = [3.0] #[2.8, 2.9, 3.0, 3.1, 3.2] Topt = [x for x in range(15, 26)] TminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5] #\u00a0No stress conditions array_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt,                                                       TminFactor=TminFactor, isVPDStress=isVPDStress)  cmb_PRFT_noStress = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,                                             isVPDStress, array_results, saveFile=True) cmb_PRFT_noStress  <pre>CPU times: user 274 ms, sys: 13.9 ms, total: 288 ms\nWall time: 290 ms\n</pre> Out[14]: UID country location loc_code cycle ObsYield RUE TminFactor Topt SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 15.0 2.36 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 15.0 4.16 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 15.0 3.02 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 15.0 3.34 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 15.0 3.89 ... ... ... ... ... ... ... ... ... ... ... 545 46 India Pusa PUS-LS 2018 1.44 3.0 0.25 25.0 2.28 546 47 India Pusa PUS-LS 2019 3.10 3.0 0.25 25.0 4.75 547 48 India Ludhiana LDH-NS 2022 6.09 3.0 0.25 25.0 5.07 548 49 India Ludhiana LDH-LS 2022 4.77 3.0 0.25 25.0 3.99 549 50 Spain Spain SPN 2018 8.35 3.0 0.25 25.0 7.08 <p>550 rows \u00d7 10 columns</p> In\u00a0[15]: Copied! <pre>%%time\n\nm_PRFT_noStress = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                                 array_params_to_run, array_results, saveFile=True) #, fmt='parquet')\nm_PRFT_noStress\n</pre> %%time  m_PRFT_noStress = model.getCombinations_Metrics(functype, isVPDStress, df_GYield,                                                   array_params_to_run, array_results, saveFile=True) #, fmt='parquet') m_PRFT_noStress <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:30&lt;00:00,  2.79s/it]</pre> <pre>CPU times: user 28.3 s, sys: 2.11 s, total: 30.4 s\nWall time: 30.7 s\n</pre> <pre>\n</pre> Out[15]: RUE TminFactor Topt MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 3.0 0.25 15.0 0.752 0.923 0.961 20.672 17.186 4.414394e-15 0.726 0.641 0.4338 0.8093 0.96 0.84 82.81 1 3.0 0.25 16.0 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 2 3.0 0.25 17.0 0.685 0.728 0.853 21.322 16.539 1.660386e-15 0.737 0.717 0.6656 0.8561 1.00 0.88 83.46 3 3.0 0.25 18.0 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 4 3.0 0.25 19.0 0.788 0.905 0.951 26.438 19.954 3.803797e-15 0.727 0.648 0.8701 0.8844 0.98 0.85 80.05 5 3.0 0.25 20.0 0.853 1.056 1.028 29.297 21.957 9.429942e-15 0.717 0.590 0.9627 0.8917 0.96 0.83 78.04 6 3.0 0.25 21.0 0.912 1.213 1.101 31.889 23.732 2.729854e-14 0.704 0.529 1.0464 0.8948 0.94 0.81 76.27 7 3.0 0.25 22.0 0.958 1.358 1.165 34.180 25.195 8.858484e-14 0.689 0.472 1.1232 0.8934 0.93 0.79 74.81 8 3.0 0.25 23.0 0.995 1.481 1.217 36.113 26.381 3.282640e-13 0.672 0.424 1.1967 0.8870 0.92 0.77 73.62 9 3.0 0.25 24.0 1.018 1.575 1.255 37.669 27.214 1.359359e-12 0.652 0.388 1.2627 0.8761 0.92 0.76 72.79 10 3.0 0.25 25.0 1.032 1.632 1.277 38.734 27.753 5.840609e-12 0.631 0.366 1.3177 0.8613 0.92 0.75 72.25 In\u00a0[16]: Copied! <pre>%%time\n\nfunctype='PRFT'\nisVPDStress=True\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# Combinations\nRUE = [3.0]\nTopt = [x for x in range(15, 26)]\nTminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5]\nLvpd = [0.5, 1, 1.5, 2, 2.5, 3, 3.5]\nUvpd = [1, 1.5, 2, 2.5, 3, 3.5, 4]\nSFvpd_Lthres = [0.2, 0.4, 0.6, 0.8] \nSFvpd_Uthres = [1]\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt, TminFactor=TminFactor,  \n                                                           Lvpd=Lvpd, Uvpd=Uvpd, SFvpd_Lthres=SFvpd_Lthres, SFvpd_Uthres=SFvpd_Uthres,\n                                                           isVPDStress=isVPDStress)\n\ncmb_PRFT_SFvpd = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                           isVPDStress, array_results, saveFile=True)\ncmb_PRFT_SFvpd\n</pre> %%time  functype='PRFT' isVPDStress=True df_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data # Combinations RUE = [3.0] Topt = [x for x in range(15, 26)] TminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5] Lvpd = [0.5, 1, 1.5, 2, 2.5, 3, 3.5] Uvpd = [1, 1.5, 2, 2.5, 3, 3.5, 4] SFvpd_Lthres = [0.2, 0.4, 0.6, 0.8]  SFvpd_Uthres = [1] #\u00a0No stress conditions array_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Topt=Topt, TminFactor=TminFactor,                                                              Lvpd=Lvpd, Uvpd=Uvpd, SFvpd_Lthres=SFvpd_Lthres, SFvpd_Uthres=SFvpd_Uthres,                                                            isVPDStress=isVPDStress)  cmb_PRFT_SFvpd = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,                                             isVPDStress, array_results, saveFile=True) cmb_PRFT_SFvpd  <pre>CPU times: user 952 ms, sys: 33.9 ms, total: 986 ms\nWall time: 995 ms\n</pre> Out[16]: UID country location loc_code cycle ObsYield RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 15.0 0.5 1.0 0.2 1.0 0.54 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 15.0 0.5 1.0 0.2 1.0 0.95 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 15.0 0.5 1.0 0.2 1.0 1.19 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 15.0 0.5 1.0 0.2 1.0 0.94 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 15.0 0.5 1.0 0.2 1.0 0.78 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 61595 46 India Pusa PUS-LS 2018 1.44 3.0 0.25 25.0 3.5 4.0 0.8 1.0 1.26 61596 47 India Pusa PUS-LS 2019 3.10 3.0 0.25 25.0 3.5 4.0 0.8 1.0 3.44 61597 48 India Ludhiana LDH-NS 2022 6.09 3.0 0.25 25.0 3.5 4.0 0.8 1.0 4.76 61598 49 India Ludhiana LDH-LS 2022 4.77 3.0 0.25 25.0 3.5 4.0 0.8 1.0 3.31 61599 50 Spain Spain SPN 2018 8.35 3.0 0.25 25.0 3.5 4.0 0.8 1.0 6.90 <p>61600 rows \u00d7 14 columns</p> In\u00a0[17]: Copied! <pre>%%time\n\nm_PRFT_SFvpd = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                                 array_params_to_run, array_results, saveFile=True)\nm_PRFT_SFvpd\n</pre> %%time  m_PRFT_SFvpd = model.getCombinations_Metrics(functype, isVPDStress, df_GYield,                                                   array_params_to_run, array_results, saveFile=True) m_PRFT_SFvpd <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1232/1232 [00:00&lt;00:00, 1372.88it/s]</pre> <pre>CPU times: user 744 ms, sys: 1.02 s, total: 1.76 s\nWall time: 910 ms\n</pre> <pre>\n</pre> Out[17]: RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 3.0 0.25 15.0 0.5 1.0 0.2 1.0 3.522 14.317 3.784 77.338 76.465 5.004774e-05 0.293 -4.566 0.1838 0.1904 0.12 0.07 23.53 1 3.0 0.25 15.0 0.5 1.0 0.4 1.0 2.748 8.912 2.985 60.492 59.236 9.871293e-10 0.544 -2.464 0.2445 0.3462 0.22 0.17 40.76 2 3.0 0.25 15.0 0.5 1.0 0.6 1.0 1.976 4.875 2.208 44.225 42.019 1.148104e-12 0.655 -0.895 0.3118 0.5008 0.42 0.35 57.98 3 3.0 0.25 15.0 0.5 1.0 0.8 1.0 1.237 2.213 1.488 29.692 25.959 3.544116e-14 0.701 0.140 0.3757 0.6561 0.72 0.62 74.04 4 3.0 0.25 15.0 0.5 1.5 0.2 1.0 3.142 11.904 3.450 71.356 68.675 4.596118e-04 0.228 -3.627 0.0768 0.2972 0.24 0.12 31.33 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 1227 3.0 0.25 25.0 3.0 4.0 0.8 1.0 0.756 0.927 0.963 26.268 19.119 5.743903e-13 0.665 0.640 0.9409 0.7550 0.99 0.82 80.88 1228 3.0 0.25 25.0 3.5 4.0 0.2 1.0 0.822 1.185 1.088 27.784 20.216 1.095611e-10 0.584 0.539 1.0992 0.7310 1.00 0.78 79.78 1229 3.0 0.25 25.0 3.5 4.0 0.4 1.0 0.759 0.959 0.979 26.979 19.394 2.090076e-12 0.646 0.627 1.0919 0.7566 1.00 0.82 80.61 1230 3.0 0.25 25.0 3.5 4.0 0.6 1.0 0.710 0.863 0.929 27.223 18.864 1.524712e-13 0.682 0.665 1.0818 0.7830 1.00 0.84 81.14 1231 3.0 0.25 25.0 3.5 4.0 0.8 1.0 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 <p>1232 rows \u00d7 20 columns</p> In\u00a0[18]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT')\nfigures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress, \n                   cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=20, alpha=0.65, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT') figures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress,                     cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=20, alpha=0.65, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters', fmt='jpg') In\u00a0[19]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT')\nfigures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress, \n                   cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters_errorbar', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT') figures.plot_corrTempFunct(cmb_noStress=cmb_PRFT_noStress, cmb_noStress_filtered=cmb_PRFT_noStress,                     cmb_SFvpd=cmb_PRFT_SFvpd, cmb_SFvpd_filtered=cmb_PRFT_SFvpd,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters_errorbar', fmt='jpg') In\u00a0[20]: Copied! <pre>#\u00a0Load module to filter combinations in an easy way\nfrom tfunct.util import filterSimulations\n</pre> #\u00a0Load module to filter combinations in an easy way from tfunct.util import filterSimulations  In\u00a0[21]: Copied! <pre>m_PRFT_noStress[(m_PRFT_noStress['Cb']&gt;0.98) &amp; (m_PRFT_noStress['CCC']&gt;0.80) ]\n</pre> m_PRFT_noStress[(m_PRFT_noStress['Cb']&gt;0.98) &amp; (m_PRFT_noStress['CCC']&gt;0.80) ] Out[21]: RUE TminFactor Topt MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 1 3.0 0.25 16.0 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 2 3.0 0.25 17.0 0.685 0.728 0.853 21.322 16.539 1.660386e-15 0.737 0.717 0.6656 0.8561 1.00 0.88 83.46 3 3.0 0.25 18.0 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 In\u00a0[22]: Copied! <pre>m_PRFT_SFvpd[(m_PRFT_SFvpd['Cb']&gt;0.98) &amp; (m_PRFT_SFvpd['CCC']&gt;0.80) &amp; (m_PRFT_SFvpd['RMSRE']&lt;22)]\n</pre> m_PRFT_SFvpd[(m_PRFT_SFvpd['Cb']&gt;0.98) &amp; (m_PRFT_SFvpd['CCC']&gt;0.80) &amp; (m_PRFT_SFvpd['RMSRE']&lt;22)] Out[22]: RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 551 3.0 0.25 19.0 3.0 3.5 0.8 1.0 0.689 0.755 0.869 21.910 16.914 5.709861e-15 0.723 0.706 0.7573 0.8061 1.00 0.86 83.09 651 3.0 0.25 20.0 2.5 3.0 0.8 1.0 0.674 0.758 0.871 21.581 16.520 3.880880e-15 0.727 0.705 0.7142 0.8024 0.99 0.86 83.48 859 3.0 0.25 22.0 2.0 2.5 0.8 1.0 0.646 0.732 0.856 20.753 15.672 1.853433e-15 0.735 0.715 0.7631 0.7889 0.99 0.86 84.33 971 3.0 0.25 23.0 2.0 2.5 0.8 1.0 0.661 0.740 0.860 21.571 16.249 3.514474e-15 0.728 0.712 0.8163 0.7835 0.99 0.86 83.75 In\u00a0[23]: Copied! <pre>%%time\n# path of the combinations and metrics files\nc_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"combinations_Yield_PRFT_noStress.parquet\")\nm_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"metrics_Yield_PRFT_noStress.parquet\")\n#\u00a0Filters\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;', 0.98),\n        CCC = ('&gt;', 0.80)\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\")\n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_PRFT = filterSimulations(functype='PRFT', VPDstress=False, cmb=c_PRFT, met=m_PRFT, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_PRFT\n</pre> %%time # path of the combinations and metrics files c_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"combinations_Yield_PRFT_noStress.parquet\") m_PRFT = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_noStress\", \"metrics_Yield_PRFT_noStress.parquet\") #\u00a0Filters cmb_filters = dict(                 RUE = ('RUE', '=', 3.0 ),                 TminFactor = ('TminFactor', '=', 0.25 )             ) met_filters = dict(         Cb = ('&gt;', 0.98),         CCC = ('&gt;', 0.80)     ) outputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\")  #\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session #\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large. #\u00a0Use dispFig=True if the filtered table is small. filtered_c_PRFT = filterSimulations(functype='PRFT', VPDstress=False, cmb=c_PRFT, met=m_PRFT,                                   cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True,                                   dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',                                  saveResults=True, outputPath=outputPath, fmt='parquet')  filtered_c_PRFT <pre>Loading combinations...\nLoading metrics...\n11 combinations found\n3 combinations found after applied filter\nFiltered data set saved at /Users/ernestogiron/Desktop/TemperatureFunctions/results/PRFT/PRFT_filtered/filtered_metrics_combinations_Yield_PRFT_noStress_20231001.parquet\nCPU times: user 1.17 s, sys: 130 ms, total: 1.3 s\nWall time: 677 ms\n</pre> Out[23]: UID country location loc_code cycle ObsYield RUE TminFactor Topt SimYield MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 16.0 2.48 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 16.0 4.31 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 16.0 3.10 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 16.0 3.57 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 16.0 4.10 0.692 0.759 0.871 20.055 16.308 1.964853e-15 0.735 0.705 0.5507 0.8355 0.99 0.87 83.69 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 145 46 India Pusa PUS-LS 2018 1.44 3.0 0.25 18.0 1.64 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 146 47 India Pusa PUS-LS 2019 3.10 3.0 0.25 18.0 3.45 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 147 48 India Ludhiana LDH-NS 2022 6.09 3.0 0.25 18.0 4.48 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 148 49 India Ludhiana LDH-LS 2022 4.77 3.0 0.25 18.0 2.90 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 149 50 Spain Spain SPN 2018 8.35 3.0 0.25 18.0 7.32 0.736 0.787 0.887 23.654 18.217 2.118803e-15 0.734 0.694 0.7716 0.8723 0.99 0.87 81.78 <p>150 rows \u00d7 23 columns</p> In\u00a0[24]: Copied! <pre>%%time\n\n# Path of the combinations and metrics files\nc_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"combinations_Yield_PRFT_SFvpd.parquet\")\nm_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"metrics_Yield_PRFT_SFvpd.parquet\")\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;', 0.98),\n        CCC = ('&gt;', 0.80)\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\") \n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_PRFT_SFvpd = filterSimulations(functype='PRFT', VPDstress=True, cmb=c_PRFT_SFvpd, met=m_PRFT_SFvpd, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_PRFT_SFvpd\n</pre> %%time  # Path of the combinations and metrics files c_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"combinations_Yield_PRFT_SFvpd.parquet\") m_PRFT_SFvpd = os.path.join(config['RESULTS_PATH'], \"PRFT\", \"PRFT_SFvpd\", \"metrics_Yield_PRFT_SFvpd.parquet\") cmb_filters = dict(                 RUE = ('RUE', '=', 3.0 ),                 TminFactor = ('TminFactor', '=', 0.25 )             ) met_filters = dict(         Cb = ('&gt;', 0.98),         CCC = ('&gt;', 0.80)     ) outputPath = os.path.join(config['RESULTS_PATH'], \"PRFT\")   #\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session #\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large. #\u00a0Use dispFig=True if the filtered table is small. filtered_c_PRFT_SFvpd = filterSimulations(functype='PRFT', VPDstress=True, cmb=c_PRFT_SFvpd, met=m_PRFT_SFvpd,                                   cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True,                                   dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',                                  saveResults=True, outputPath=outputPath, fmt='parquet')  filtered_c_PRFT_SFvpd <pre>Loading combinations...\nLoading metrics...\n1232 combinations found\n51 combinations found after applied filter\nFiltered data set saved at /Users/ernestogiron/Desktop/TemperatureFunctions/results/PRFT/PRFT_filtered/filtered_metrics_combinations_Yield_PRFT_SFvpd_20231001.parquet\nCPU times: user 1.25 s, sys: 151 ms, total: 1.4 s\nWall time: 784 ms\n</pre> Out[24]: UID country location loc_code cycle ObsYield RUE TminFactor Topt Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.25 18.0 3.5 4.0 0.6 1.0 2.47 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.25 18.0 3.5 4.0 0.6 1.0 4.48 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.25 18.0 3.5 4.0 0.6 1.0 3.22 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.25 18.0 3.5 4.0 0.6 1.0 3.58 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.25 18.0 3.5 4.0 0.6 1.0 4.01 0.778 0.954 0.977 23.351 18.737 2.337009e-13 0.677 0.629 0.6547 0.8021 0.99 0.83 81.26 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 2545 46 India Pusa PUS-LS 2018 1.44 3.0 0.25 25.0 3.5 4.0 0.8 1.0 1.26 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 2546 47 India Pusa PUS-LS 2019 3.10 3.0 0.25 25.0 3.5 4.0 0.8 1.0 3.44 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 2547 48 India Ludhiana LDH-NS 2022 6.09 3.0 0.25 25.0 3.5 4.0 0.8 1.0 4.76 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 2548 49 India Ludhiana LDH-LS 2022 4.77 3.0 0.25 25.0 3.5 4.0 0.8 1.0 3.31 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 2549 50 Spain Spain SPN 2018 8.35 3.0 0.25 25.0 3.5 4.0 0.8 1.0 6.90 0.747 0.895 0.946 28.420 19.816 9.480468e-14 0.689 0.652 1.0718 0.8093 0.99 0.84 80.18 <p>2550 rows \u00d7 27 columns</p> In\u00a0[25]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'],'PRFT', 'PRFT_filtered')\nfigures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT, \n                           cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=40, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'],'PRFT', 'PRFT_filtered') figures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT,                             cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=40, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered', fmt='jpg') In\u00a0[26]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT', 'PRFT_filtered')\nfigures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT, \n                           cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,\n                   functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered_errorbar', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT', 'PRFT_filtered') figures.plot_corrTempFunct(cmb_noStress=filtered_c_PRFT, cmb_noStress_filtered=filtered_c_PRFT,                             cmb_SFvpd=filtered_c_PRFT_SFvpd, cmb_SFvpd_filtered=filtered_c_PRFT_SFvpd,                    functype='PRFT',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered_errorbar', fmt='jpg') In\u00a0[27]: Copied! <pre>#\u00a0Prepare data as a input for create comparison figures by site and/or best combinations\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT', 'PRFT_filtered')\ndf_TDays_vs_TempResponse, df_TDays_vs_TempResponse_mean_allSites = \\\nfigures.createFigure_Type_I_PRFT(sites, cmb=filtered_c_PRFT, roundVal=3, maxTDay=40, saveTable=True,\n                        path_to_save_results=path_to_save_results, fmt='parquet')\ndf_TDays_vs_TempResponse.head()\n</pre> #\u00a0Prepare data as a input for create comparison figures by site and/or best combinations path_to_save_results=os.path.join(config['RESULTS_PATH'], 'PRFT', 'PRFT_filtered') df_TDays_vs_TempResponse, df_TDays_vs_TempResponse_mean_allSites = \\ figures.createFigure_Type_I_PRFT(sites, cmb=filtered_c_PRFT, roundVal=3, maxTDay=40, saveTable=True,                         path_to_save_results=path_to_save_results, fmt='parquet') df_TDays_vs_TempResponse.head() <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 50/50 [00:01&lt;00:00, 40.26it/s]\n</pre> <pre>Calculating average value for all simulations...\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:01&lt;00:00,  2.88it/s]\n</pre> Out[27]: TDay TempResponse UID country location loc_code cycle RUE TminFactor Topt ObsYield SimYield 0 0.0 0.360 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 1 0.1 0.368 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 2 0.2 0.376 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 3 0.3 0.384 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 4 0.4 0.392 1 Nepal Bhairahawa BHR 2019 3.0 0.25 16.0 2.97 2.576667 In\u00a0[28]: Copied! <pre>#cmb = [cmb_PRFT_noStress['UID']==uid].reset_index(drop=True)\nfigures.diplay_Figure_Type_I_PRFT_InOneFig(cmb=filtered_c_PRFT, fnct='PRFT', \n                                           df_tdays=df_TDays_vs_TempResponse, \n                                           df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,\n                                           saveFig=True,showFig=True, fmt='jpg', \n                                           path_to_save_results=path_to_save_results)\n</pre> #cmb = [cmb_PRFT_noStress['UID']==uid].reset_index(drop=True) figures.diplay_Figure_Type_I_PRFT_InOneFig(cmb=filtered_c_PRFT, fnct='PRFT',                                             df_tdays=df_TDays_vs_TempResponse,                                             df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,                                            saveFig=True,showFig=True, fmt='jpg',                                             path_to_save_results=path_to_save_results) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 50/50 [00:24&lt;00:00,  2.01it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:00&lt;00:00,  6.12it/s]\n</pre> In\u00a0[29]: Copied! <pre>%%time\n#cmb = [cmb_PRFT_noStress['UID']==uid].reset_index(drop=True)\nfigures.display_FigTDay_vs_TempResponseBySiteYrs(cmb=filtered_c_PRFT, df_tdays=df_TDays_vs_TempResponse, \n                                         roundVal=2, maxTDay=40, fnct='PRFT', \n                                         saveFig=True, showFig=True, fmt='jpg', cols=5, \n                                         path_to_save_results=path_to_save_results)\n</pre> %%time #cmb = [cmb_PRFT_noStress['UID']==uid].reset_index(drop=True) figures.display_FigTDay_vs_TempResponseBySiteYrs(cmb=filtered_c_PRFT, df_tdays=df_TDays_vs_TempResponse,                                           roundVal=2, maxTDay=40, fnct='PRFT',                                           saveFig=True, showFig=True, fmt='jpg', cols=5,                                           path_to_save_results=path_to_save_results) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:43&lt;00:00,  4.38s/it]\n</pre> <pre>CPU times: user 51.3 s, sys: 1.25 s, total: 52.5 s\nWall time: 52.8 s\n</pre> In\u00a0[30]: Copied! <pre>uid = 1\ndf0 = filtered_c_PRFT[filtered_c_PRFT['UID']==uid].reset_index(drop=True)\nfigures.diplay_Figure_Type_I_PRFT_InOneFig(cmb=df0, fnct='PRFT', \n                                           df_tdays=df_TDays_vs_TempResponse, \n                                           df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,\n                                           saveFig=True,showFig=True, fmt='jpg', \n                                           path_to_save_results=path_to_save_results) #fname = \"Figure_PRFT_SiteYrs_Comparison\"\n</pre> uid = 1 df0 = filtered_c_PRFT[filtered_c_PRFT['UID']==uid].reset_index(drop=True) figures.diplay_Figure_Type_I_PRFT_InOneFig(cmb=df0, fnct='PRFT',                                             df_tdays=df_TDays_vs_TempResponse,                                             df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,                                            saveFig=True,showFig=True, fmt='jpg',                                             path_to_save_results=path_to_save_results) #fname = \"Figure_PRFT_SiteYrs_Comparison\"  <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:00&lt;00:00,  4.62it/s]\n</pre> In\u00a0[31]: Copied! <pre>print(filtered_c_PRFT['Topt'].unique())\nprint(filtered_c_PRFT_SFvpd['Topt'].sort_values().unique())\nprint(filtered_c_PRFT_SFvpd['Lvpd'].sort_values().unique())\nprint(filtered_c_PRFT_SFvpd['Uvpd'].sort_values().unique())\nprint(filtered_c_PRFT_SFvpd['SFvpd_Lthres'].sort_values().unique())\nprint(filtered_c_PRFT_SFvpd['SFvpd_Uthres'].sort_values().unique())\n</pre> print(filtered_c_PRFT['Topt'].unique()) print(filtered_c_PRFT_SFvpd['Topt'].sort_values().unique()) print(filtered_c_PRFT_SFvpd['Lvpd'].sort_values().unique()) print(filtered_c_PRFT_SFvpd['Uvpd'].sort_values().unique()) print(filtered_c_PRFT_SFvpd['SFvpd_Lthres'].sort_values().unique()) print(filtered_c_PRFT_SFvpd['SFvpd_Uthres'].sort_values().unique()) <pre>[16. 17. 18.]\n[18. 19. 20. 21. 22. 23. 24. 25.]\n[2.  2.5 3.  3.5]\n[2.5 3.  3.5 4. ]\n[0.4 0.6 0.8]\n[1.]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/Using%20PRFT/#estimating-grain-yield-using-prft","title":"Estimating grain yield using PRFT\u00b6","text":"<p>Here we use Photosynthesis Reduction Factor function with different cardinal temperature combinations with and without VPD stress function for the period from heading to maturity (grain filling period).</p> <p>Authors:</p> <ul> <li>Azam Lashkari (CIMMYT-China, azam.lashkari@jic.ac.uk)</li> <li>Urs Christoph Schulthess (CIMMYT-China, U.Schulthess@cgiar.org)</li> <li>Ernesto Giron Echeverry (Independent Researcher, e.giron.e@gmail.com)</li> </ul> <p>Last updated: September 28, 2023</p>"},{"location":"notebooks/Using%20PRFT/#load-libraries","title":"Load libraries\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#load-phenology-ndvi-and-weather-example-datasets","title":"Load Phenology, NDVI and Weather example datasets\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#display-phenology","title":"Display phenology\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#display-ndvi","title":"Display NDVI\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#display-weather","title":"Display Weather\u00b6","text":"<p>AgERA5 weather dataset</p>"},{"location":"notebooks/Using%20PRFT/#create-a-model","title":"Create a model\u00b6","text":"<p>The model contains all of the required functions to analyse the data</p>"},{"location":"notebooks/Using%20PRFT/#prepare-locations","title":"Prepare locations\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#photosynthetic-reduction-factor-prft","title":"Photosynthetic Reduction Factor (PRFT)\u00b6","text":"<p>Calculating grain yield using Ritchie's Temperature-based function affecting Photosynthetic Reduction Factor (PRFT)</p>"},{"location":"notebooks/Using%20PRFT/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#stressed-vpd","title":"Stressed VPD\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#display-grain-yield","title":"Display Grain Yield\u00b6","text":"<p>Create a figure to compare simulated grain yield against observed.</p>"},{"location":"notebooks/Using%20PRFT/#combinations","title":"Combinations\u00b6","text":"<p>To establish the optimum temperature response for grain-filling period, you can run several models using a wide range of cardinal temperatures.</p> <p>The optimum temperature for photosynthesis depends on the choosen temperature function.</p>"},{"location":"notebooks/Using%20PRFT/#prft-combinations","title":"PRFT combinations\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#no-stress-metrics","title":"No stress Metrics\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#stressed-vapor-pressure-deficit-vpd","title":"stressed Vapor pressure deficit (VPD)\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#display-grain-yield-comparison-with-and-without-vpd-stress","title":"Display grain yield comparison with and without VPD stress\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#select-the-best-results-using-filters","title":"Select the best results using filters\u00b6","text":"<p>After running several models you can filter results to see which one look better.</p> <p>The following table is an example of one filter used to evaluate the best models, it only use three (3) evaluation metrics (Cb, CCC, and RMSRE) to select the top ones.</p> Temperature Function Cb CCC RMSRE PRFT 0.98 &gt; 0.8 PRFT vpd stress 0.98 &gt; 0.8 &lt; 22"},{"location":"notebooks/Using%20PRFT/#filter-prft-manually","title":"filter PRFT manually\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#vpd-stress-conditions","title":"VPD stress conditions\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#comparison-of-the-best-combinations","title":"Comparison of the best combinations\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#no-stress-condition","title":"No Stress condition\u00b6","text":""},{"location":"notebooks/Using%20PRFT/#conclusion","title":"Conclusion\u00b6","text":"<p>Congratulations! You have run a simulation using a prebuilt dataset and the Temperature Functions API.</p>"},{"location":"notebooks/Using%20PRFT/#type-1-one-cardinal-temperature","title":"Type 1- one cardinal temperature\u00b6","text":"Model Parameters No stress VPD stress RUE 3.0 3.0 TminFactor 0.25 0.25 Topt 16-18 \u00b0C 18-25 \u00b0C VPDL 2-3.5 kPa VPDU 2.5-4.0 kPa SFvpdL 0.4-08 SFvpdU 1"},{"location":"notebooks/Using%20TPF/","title":"Estimating Yield using TPF","text":"In\u00a0[1]: Copied! <pre>import os, sys, gc\nimport pandas as pd\n#import datetime as dt\npd.set_option('display.max_columns', None)\n\n#\u00a0Import Temperature Response Functions package\nimport tfunct\nfrom tfunct.data import load_dataset #\u00a0Function to load existing dataset\nfrom tfunct.model import Model # Load module to create a model\nfrom tfunct.model import tday, gpp  # Module to calculate GPP and estimated yield\nfrom tfunct.util import figures #\u00a0module to create figures\n\nprint(tfunct.__version__)\n</pre> import os, sys, gc import pandas as pd #import datetime as dt pd.set_option('display.max_columns', None)  #\u00a0Import Temperature Response Functions package import tfunct from tfunct.data import load_dataset #\u00a0Function to load existing dataset from tfunct.model import Model # Load module to create a model from tfunct.model import tday, gpp  # Module to calculate GPP and estimated yield from tfunct.util import figures #\u00a0module to create figures  print(tfunct.__version__) <pre>tfunct version 1.0.0\n</pre> In\u00a0[2]: Copied! <pre>%%time\n#\u00a0Load example dataset (Phenology, NDVI and Weather data for each site)\ndata = load_dataset()\n</pre> %%time #\u00a0Load example dataset (Phenology, NDVI and Weather data for each site) data = load_dataset() <pre>CPU times: user 71 ms, sys: 48.3 ms, total: 119 ms\nWall time: 57.2 ms\n</pre> <p>Note: For details how to display phenology, ndvi and weather tables, please see Getting Started</p> In\u00a0[3]: Copied! <pre>%%time \n\n# Define the Path where the output data will be stored\nPATH_PRJ = '/Users/ernestogiron/Desktop/TemperatureFunctions/'\nRESULTS_PATH = PATH_PRJ + 'results/'\n\nconfig = {\n    \"PROJECT_PATH\": PATH_PRJ,\n    \"RESULTS_PATH\": RESULTS_PATH, #'./', # Results will be put in the same folder where the model is running\n}\n\n#\u00a0create model to estimate grain yield\nmodel = Model(config)\nmodel.preprocess_raw_datasets(data) #\u00a0Preprocess datasets\n# Prepare dataset to run all process in parallel using NDVIA GPU if available\nsites = model.prepareData()\n</pre> %%time   # Define the Path where the output data will be stored PATH_PRJ = '/Users/ernestogiron/Desktop/TemperatureFunctions/' RESULTS_PATH = PATH_PRJ + 'results/'  config = {     \"PROJECT_PATH\": PATH_PRJ,     \"RESULTS_PATH\": RESULTS_PATH, #'./', # Results will be put in the same folder where the model is running }  #\u00a0create model to estimate grain yield model = Model(config) model.preprocess_raw_datasets(data) #\u00a0Preprocess datasets # Prepare dataset to run all process in parallel using NDVIA GPU if available sites = model.prepareData() <pre>50it [00:01, 38.20it/s]</pre> <pre>CPU times: user 1.62 s, sys: 78.4 ms, total: 1.69 s\nWall time: 1.69 s\n</pre> <pre>\n</pre> In\u00a0[4]: Copied! <pre>%%time\nTPF_noStress = model.getYield(tfun='TPF', sites=sites, is_VPDStress=False, expCSV=True)\nTPF_noStress.head()\n</pre> %%time TPF_noStress = model.getYield(tfun='TPF', sites=sites, is_VPDStress=False, expCSV=True) TPF_noStress.head() <pre>CPU times: user 704 ms, sys: 31.4 ms, total: 736 ms\nWall time: 742 ms\n</pre> Out[4]: UID country location loc_code cycle ObsYield RUE Tmin Toptmin Toptmax Tmax TminFactor SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 9.0 15.0 25.0 34.0 0.25 2.73 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 9.0 15.0 25.0 34.0 0.25 4.74 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 9.0 15.0 25.0 34.0 0.25 3.27 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 9.0 15.0 25.0 34.0 0.25 3.94 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 9.0 15.0 25.0 34.0 0.25 4.34 In\u00a0[5]: Copied! <pre>%%time\nTPF_SFvpd = model.getYield(tfun='TPF', sites=sites, is_VPDStress=True, expCSV=True)\nTPF_SFvpd.head()\n</pre> %%time TPF_SFvpd = model.getYield(tfun='TPF', sites=sites, is_VPDStress=True, expCSV=True) TPF_SFvpd.head() <pre>CPU times: user 129 ms, sys: 3.43 ms, total: 132 ms\nWall time: 133 ms\n</pre> Out[5]: UID country location loc_code cycle ObsYield RUE TminFactor Tmin Toptmin Toptmax Tmax Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 9.0 15.0 25.0 34.0 0.25 1.0 4.0 0.2 1.0 1.77 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 9.0 15.0 25.0 34.0 0.25 1.0 4.0 0.2 1.0 3.48 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 9.0 15.0 25.0 34.0 0.25 1.0 4.0 0.2 1.0 2.73 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 9.0 15.0 25.0 34.0 0.25 1.0 4.0 0.2 1.0 2.50 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 9.0 15.0 25.0 34.0 0.25 1.0 4.0 0.2 1.0 2.52 In\u00a0[6]: Copied! <pre>%%time\ndirname=os.path.join(config['RESULTS_PATH'], 'TPF', 'Figures')\nfigures.chart_compareResults(df_result=TPF_noStress, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code', \n                             loc_leg=2, ncol=2, ha='left', va='top',\n                             title='TPF\\nNo streess condition', #xlabel='', ylabel='', \n                             dirname=dirname, fname='TPF_noStress', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</pre> %%time dirname=os.path.join(config['RESULTS_PATH'], 'TPF', 'Figures') figures.chart_compareResults(df_result=TPF_noStress, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code',                               loc_leg=2, ncol=2, ha='left', va='top',                              title='TPF\\nNo streess condition', #xlabel='', ylabel='',                               dirname=dirname, fname='TPF_noStress',                               dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')  <pre>CPU times: user 1.09 s, sys: 116 ms, total: 1.2 s\nWall time: 695 ms\n</pre> In\u00a0[7]: Copied! <pre>%%time\ndirname=os.path.join(config['RESULTS_PATH'], 'TPF', 'Figures')\nfigures.chart_compareResults(df_result=TPF_SFvpd, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code', \n                             loc_leg=2, ncol=2, ha='left', va='top',\n                             title='TPF\\nVPD streess condition', #xlabel='', ylabel='', \n                             dirname=dirname, fname='TPF_SFvpd', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</pre> %%time dirname=os.path.join(config['RESULTS_PATH'], 'TPF', 'Figures') figures.chart_compareResults(df_result=TPF_SFvpd, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code',                               loc_leg=2, ncol=2, ha='left', va='top',                              title='TPF\\nVPD streess condition', #xlabel='', ylabel='',                               dirname=dirname, fname='TPF_SFvpd',                               dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')  <pre>CPU times: user 860 ms, sys: 79.5 ms, total: 939 ms\nWall time: 547 ms\n</pre> In\u00a0[8]: Copied! <pre>%%time\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF')\nfigures.plot_corrTempFunct(cmb_noStress=TPF_noStress, cmb_noStress_filtered=None, \n                           cmb_SFvpd=TPF_SFvpd, cmb_SFvpd_filtered=None,\n                   functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_1_errorbar', fmt='pdf')\n</pre> %%time path_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF') figures.plot_corrTempFunct(cmb_noStress=TPF_noStress, cmb_noStress_filtered=None,                             cmb_SFvpd=TPF_SFvpd, cmb_SFvpd_filtered=None,                    functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_1_errorbar', fmt='pdf') <pre>CPU times: user 1.66 s, sys: 222 ms, total: 1.88 s\nWall time: 894 ms\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[9]: Copied! <pre>%%time\n\nfunctype='TPF'\nisVPDStress=False\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# 1) Combinations for TPF (no stress)\nRUE = [3.0]\nTmin = [x for x in range(0, 5)]\nToptmin = [x for x in range(14, 20)]\nToptmax = [x for x in range(15, 20)]\nTmax = [x for x in range(30, 40)]\nTminFactor = [0.25]\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, \n                                                           Tmin=Tmin, Toptmin=Toptmin, Toptmax=Toptmax, Tmax=Tmax, \n                                                           TminFactor=TminFactor, isVPDStress=isVPDStress)\ncmb_TPF_noStress = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                                    isVPDStress, array_results, saveFile=True)\ncmb_TPF_noStress\n</pre> %%time  functype='TPF' isVPDStress=False df_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data # 1) Combinations for TPF (no stress) RUE = [3.0] Tmin = [x for x in range(0, 5)] Toptmin = [x for x in range(14, 20)] Toptmax = [x for x in range(15, 20)] Tmax = [x for x in range(30, 40)] TminFactor = [0.25] #\u00a0No stress conditions array_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE,                                                             Tmin=Tmin, Toptmin=Toptmin, Toptmax=Toptmax, Tmax=Tmax,                                                             TminFactor=TminFactor, isVPDStress=isVPDStress) cmb_TPF_noStress = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,                                                      isVPDStress, array_results, saveFile=True) cmb_TPF_noStress  <pre>CPU times: user 1.86 s, sys: 33.6 ms, total: 1.89 s\nWall time: 1.9 s\n</pre> Out[9]: UID country location loc_code cycle ObsYield RUE Tmin Toptmin Toptmax Tmax TminFactor SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.0 14.0 15.0 30.0 0.25 1.29 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.0 14.0 15.0 30.0 0.25 2.65 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.0 14.0 15.0 30.0 0.25 2.15 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.0 14.0 15.0 30.0 0.25 1.54 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.0 14.0 15.0 30.0 0.25 2.15 ... ... ... ... ... ... ... ... ... ... ... ... ... ... 37495 46 India Pusa PUS-LS 2018 1.44 3.0 4.0 18.0 19.0 39.0 0.25 1.17 37496 47 India Pusa PUS-LS 2019 3.10 3.0 4.0 18.0 19.0 39.0 0.25 2.50 37497 48 India Ludhiana LDH-NS 2022 6.09 3.0 4.0 18.0 19.0 39.0 0.25 3.84 37498 49 India Ludhiana LDH-LS 2022 4.77 3.0 4.0 18.0 19.0 39.0 0.25 2.09 37499 50 Spain Spain SPN 2018 8.35 3.0 4.0 18.0 19.0 39.0 0.25 7.17 <p>37500 rows \u00d7 13 columns</p> In\u00a0[10]: Copied! <pre>%%time\n\nm_TPF_noStress = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                                 array_params_to_run, array_results, saveFile=True) #, fmt='parquet')\nm_TPF_noStress\n</pre> %%time  m_TPF_noStress = model.getCombinations_Metrics(functype, isVPDStress, df_GYield,                                                   array_params_to_run, array_results, saveFile=True) #, fmt='parquet') m_TPF_noStress <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 750/750 [00:30&lt;00:00, 24.77it/s]</pre> <pre>CPU times: user 28 s, sys: 2.56 s, total: 30.6 s\nWall time: 30.3 s\n</pre> <pre>\n</pre> Out[10]: RUE Tmin Toptmin Toptmax Tmax TminFactor MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 3.0 0.0 14.0 15.0 30.0 0.25 2.386 6.935 2.633 57.047 53.493 5.649380e-09 0.510 -1.696 -0.2431 0.5328 0.39 0.29 46.51 1 3.0 0.0 14.0 15.0 31.0 0.25 2.198 5.954 2.440 52.386 49.026 7.032547e-10 0.551 -1.315 -0.1588 0.5562 0.43 0.33 50.97 2 3.0 0.0 14.0 15.0 32.0 0.25 2.025 5.118 2.262 48.047 44.864 8.950862e-11 0.587 -0.990 -0.0748 0.5764 0.47 0.37 55.14 3 3.0 0.0 14.0 15.0 33.0 0.25 1.868 4.419 2.102 44.164 41.087 1.341391e-11 0.618 -0.718 0.0015 0.5948 0.52 0.42 58.91 4 3.0 0.0 14.0 15.0 34.0 0.25 1.726 3.839 1.959 40.700 37.646 2.653647e-12 0.643 -0.492 0.0767 0.6102 0.56 0.46 62.35 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 745 3.0 4.0 18.0 19.0 35.0 0.25 0.986 1.555 1.247 26.291 21.532 1.849601e-13 0.680 0.396 0.1290 0.7911 0.88 0.74 78.47 746 3.0 4.0 18.0 19.0 36.0 0.25 0.909 1.347 1.161 24.309 19.924 6.301395e-14 0.694 0.476 0.1983 0.7994 0.90 0.77 80.08 747 3.0 4.0 18.0 19.0 37.0 0.25 0.844 1.186 1.089 22.720 18.560 2.559257e-14 0.705 0.539 0.2643 0.8059 0.92 0.79 81.44 748 3.0 4.0 18.0 19.0 38.0 0.25 0.797 1.062 1.031 21.552 17.671 1.294678e-14 0.713 0.587 0.3239 0.8117 0.94 0.81 82.33 749 3.0 4.0 18.0 19.0 39.0 0.25 0.759 0.968 0.984 20.738 17.005 7.516897e-15 0.720 0.624 0.3755 0.8174 0.96 0.83 83.00 <p>750 rows \u00d7 19 columns</p> In\u00a0[11]: Copied! <pre>%%time\n\nfunctype='TPF'\nisVPDStress=True\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# Combinations\nRUE = [3.0]\nTmin = [x for x in range(0, 5)]\nToptmin = [x for x in range(14, 20)]\nToptmax = [x for x in range(15, 20)]\nTmax = [x for x in range(30, 40)]\nTminFactor = [0.25]\nLvpd = [1.5, 2, 2.5, 3]\nUvpd = [2, 2.5, 3, 3.5]\nSFvpd_Lthres = [0.6, 0.8] \nSFvpd_Uthres = [1]\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Tmin=Tmin, \n                                                           Toptmin=Toptmin, Toptmax=Toptmax,\n                                                           Tmax=Tmax, TminFactor=TminFactor,  \n                                                           Lvpd=Lvpd, Uvpd=Uvpd, SFvpd_Lthres=SFvpd_Lthres, SFvpd_Uthres=SFvpd_Uthres,\n                                                           isVPDStress=isVPDStress)\n\n# If combinations are not large\n#cmb_TPF_SFvpd = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n#                                           isVPDStress, array_results, saveFile=True) # fmt='parquet' #csv\n# cmb_TPF_SFvpd\n\n# Use returnDF=False when the number of combinations is too large. \n#\u00a0This avoid memory issues and save the file in parquet format by default\nmodel.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                           isVPDStress, array_results, saveFile=True, returnDF=False)\n</pre> %%time  functype='TPF' isVPDStress=True df_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data # Combinations RUE = [3.0] Tmin = [x for x in range(0, 5)] Toptmin = [x for x in range(14, 20)] Toptmax = [x for x in range(15, 20)] Tmax = [x for x in range(30, 40)] TminFactor = [0.25] Lvpd = [1.5, 2, 2.5, 3] Uvpd = [2, 2.5, 3, 3.5] SFvpd_Lthres = [0.6, 0.8]  SFvpd_Uthres = [1] #\u00a0No stress conditions array_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Tmin=Tmin,                                                             Toptmin=Toptmin, Toptmax=Toptmax,                                                            Tmax=Tmax, TminFactor=TminFactor,                                                              Lvpd=Lvpd, Uvpd=Uvpd, SFvpd_Lthres=SFvpd_Lthres, SFvpd_Uthres=SFvpd_Uthres,                                                            isVPDStress=isVPDStress)  # If combinations are not large #cmb_TPF_SFvpd = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,  #                                           isVPDStress, array_results, saveFile=True) # fmt='parquet' #csv # cmb_TPF_SFvpd  # Use returnDF=False when the number of combinations is too large.  #\u00a0This avoid memory issues and save the file in parquet format by default model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,                                             isVPDStress, array_results, saveFile=True, returnDF=False) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:14&lt;00:00,  1.08it/s]\n</pre> <pre>&lt;pyarrow._parquet.FileMetaData object at 0x13bec8c70&gt;\n  created_by: parquet-cpp-arrow version 13.0.0\n  num_columns: 17\n  num_rows: 749600\n  num_row_groups: 1\n  format_version: 2.6\n  serialized_size: 3350\n&lt;pyarrow._parquet.FileMetaData object at 0x13bec8a40&gt;\n  created_by: parquet-cpp-arrow version 13.0.0\n  num_columns: 23\n  num_rows: 14992\n  num_row_groups: 1\n  format_version: 2.6\n  serialized_size: 4382\nCPU times: user 31.4 s, sys: 12.4 s, total: 43.8 s\nWall time: 33.5 s\n</pre> In\u00a0[12]: Copied! <pre>%%time\n\n# The above command export metrics automatically, if not used the following command to get evaluations\nm_TPF_SFvpd = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                             array_params_to_run, array_results, saveFile=True)\nm_TPF_SFvpd\n</pre> %%time  # The above command export metrics automatically, if not used the following command to get evaluations m_TPF_SFvpd = model.getCombinations_Metrics(functype, isVPDStress, df_GYield,                                               array_params_to_run, array_results, saveFile=True) m_TPF_SFvpd <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15000/15000 [00:10&lt;00:00, 1427.37it/s]\n</pre> <pre>CPU times: user 8.64 s, sys: 12 s, total: 20.7 s\nWall time: 10.6 s\n</pre> Out[12]: RUE Tmin Toptmin Toptmax Tmax TminFactor Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 3.0 0.0 14.0 15.0 30.0 0.25 1.5 2.0 0.6 1.0 2.890 9.955 3.155 67.285 64.302 1.891892e-06 0.380 -2.870 -0.1922 0.4106 0.28 0.18 35.70 1 3.0 0.0 14.0 15.0 30.0 0.25 1.5 2.0 0.8 1.0 2.688 8.644 2.940 62.968 59.915 1.045183e-07 0.449 -2.360 -0.2051 0.4576 0.32 0.22 40.09 2 3.0 0.0 14.0 15.0 30.0 0.25 1.5 2.5 0.6 1.0 2.859 9.759 3.124 66.654 63.624 1.467053e-06 0.386 -2.794 -0.1917 0.4173 0.29 0.18 36.38 3 3.0 0.0 14.0 15.0 30.0 0.25 1.5 2.5 0.8 1.0 2.753 9.031 3.005 64.317 61.360 1.814225e-07 0.436 -2.511 -0.2123 0.4449 0.30 0.21 38.64 4 3.0 0.0 14.0 15.0 30.0 0.25 1.5 3.0 0.6 1.0 2.881 9.904 3.147 67.132 64.099 1.961385e-06 0.379 -2.850 -0.1945 0.4132 0.28 0.18 35.90 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 14995 3.0 4.0 18.0 19.0 39.0 0.25 2.5 3.0 0.8 1.0 1.061 1.777 1.333 27.686 22.973 1.163686e-12 0.655 0.309 0.2340 0.7468 0.84 0.70 77.03 14996 3.0 4.0 18.0 19.0 39.0 0.25 2.5 3.5 0.6 1.0 1.321 2.652 1.629 34.206 28.945 3.840658e-10 0.562 -0.031 0.2013 0.6935 0.76 0.59 71.06 14997 3.0 4.0 18.0 19.0 39.0 0.25 2.5 3.5 0.8 1.0 1.208 2.227 1.492 31.131 26.252 2.021537e-11 0.612 0.134 0.2130 0.7160 0.79 0.64 73.75 14998 3.0 4.0 18.0 19.0 39.0 0.25 3.0 3.5 0.6 1.0 1.088 1.900 1.378 29.054 23.862 2.278331e-11 0.610 0.262 0.3101 0.7331 0.85 0.68 76.14 14999 3.0 4.0 18.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 0.976 1.545 1.243 26.043 21.209 8.038264e-13 0.660 0.400 0.3231 0.7555 0.88 0.73 78.79 <p>15000 rows \u00d7 23 columns</p> In\u00a0[13]: Copied! <pre>%%time\n# If the process above used \"returnDF=False\", it's necessary to load the data to create figures\n\n# Defined path of the combinations and metrics files\nc_TPF = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_noStress\", \"combinations_Yield_TPF_noStress.parquet\")\nc_TPF_SFvpd = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_SFvpd\", \"combinations_Yield_TPF_SFvpd.parquet\")\n\ncmb_TPF_noStress = pd.read_parquet(c_TPF)\ncmb_TPF_SFvpd = pd.read_parquet(c_TPF_SFvpd)\n</pre> %%time # If the process above used \"returnDF=False\", it's necessary to load the data to create figures  # Defined path of the combinations and metrics files c_TPF = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_noStress\", \"combinations_Yield_TPF_noStress.parquet\") c_TPF_SFvpd = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_SFvpd\", \"combinations_Yield_TPF_SFvpd.parquet\")  cmb_TPF_noStress = pd.read_parquet(c_TPF) cmb_TPF_SFvpd = pd.read_parquet(c_TPF_SFvpd)  <pre>CPU times: user 195 ms, sys: 95.1 ms, total: 290 ms\nWall time: 85.3 ms\n</pre> In\u00a0[14]: Copied! <pre>%%time\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF')\nfigures.plot_corrTempFunct(cmb_noStress=cmb_TPF_noStress, cmb_noStress_filtered=cmb_TPF_noStress, \n                   cmb_SFvpd=cmb_TPF_SFvpd, cmb_SFvpd_filtered=cmb_TPF_SFvpd,\n                   functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=20, alpha=0.65, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters', fmt='jpg')\n</pre> %%time path_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF') figures.plot_corrTempFunct(cmb_noStress=cmb_TPF_noStress, cmb_noStress_filtered=cmb_TPF_noStress,                     cmb_SFvpd=cmb_TPF_SFvpd, cmb_SFvpd_filtered=cmb_TPF_SFvpd,                    functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=20, alpha=0.65, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters', fmt='jpg') <pre>CPU times: user 22.3 s, sys: 729 ms, total: 23 s\nWall time: 22.6 s\n</pre> In\u00a0[15]: Copied! <pre>%%time\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF')\nfigures.plot_corrTempFunct(cmb_noStress=cmb_TPF_noStress, cmb_noStress_filtered=cmb_TPF_noStress, \n                   cmb_SFvpd=cmb_TPF_SFvpd, cmb_SFvpd_filtered=cmb_TPF_SFvpd,\n                   functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters_errorbar', fmt='jpg')\n</pre> %%time path_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF') figures.plot_corrTempFunct(cmb_noStress=cmb_TPF_noStress, cmb_noStress_filtered=cmb_TPF_noStress,                     cmb_SFvpd=cmb_TPF_SFvpd, cmb_SFvpd_filtered=cmb_TPF_SFvpd,                    functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters_errorbar', fmt='jpg') <pre>CPU times: user 1.29 s, sys: 153 ms, total: 1.44 s\nWall time: 888 ms\n</pre> In\u00a0[16]: Copied! <pre>#\u00a0Load module to filter combinations in an easy way\nfrom tfunct.util import filterSimulations\n</pre> #\u00a0Load module to filter combinations in an easy way from tfunct.util import filterSimulations  In\u00a0[17]: Copied! <pre>m_TPF_noStress[\n    (m_TPF_noStress['Cb']&gt;0.94) &amp; (m_TPF_noStress['CCC']&gt;0.8) &amp; (m_TPF_noStress['RMSRE']&lt;20.9)\n]\n</pre> m_TPF_noStress[     (m_TPF_noStress['Cb']&gt;0.94) &amp; (m_TPF_noStress['CCC']&gt;0.8) &amp; (m_TPF_noStress['RMSRE']&lt;20.9) ] Out[17]: RUE Tmin Toptmin Toptmax Tmax TminFactor MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 589 3.0 3.0 17.0 19.0 39.0 0.25 0.769 0.989 0.995 20.786 17.151 4.626587e-15 0.725 0.615 0.3798 0.8058 0.95 0.82 82.85 599 3.0 3.0 18.0 19.0 39.0 0.25 0.760 0.971 0.985 20.632 16.959 3.673087e-15 0.728 0.622 0.3699 0.8108 0.95 0.83 83.04 749 3.0 4.0 18.0 19.0 39.0 0.25 0.759 0.968 0.984 20.738 17.005 7.516897e-15 0.720 0.624 0.3755 0.8174 0.96 0.83 83.00 In\u00a0[18]: Copied! <pre>m_TPF_SFvpd[(m_TPF_SFvpd['Cb']&gt;0.86) &amp; (m_TPF_SFvpd['CCC']&gt;0.7) &amp; (m_TPF_SFvpd['RMSRE']&lt;28.0)]\n</pre> m_TPF_SFvpd[(m_TPF_SFvpd['Cb']&gt;0.86) &amp; (m_TPF_SFvpd['CCC']&gt;0.7) &amp; (m_TPF_SFvpd['RMSRE']&lt;28.0)] Out[18]: RUE Tmin Toptmin Toptmax Tmax TminFactor Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 11999 3.0 3.0 18.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 0.986 1.566 1.251 26.065 21.338 3.842510e-13 0.670 0.391 0.3172 0.7489 0.87 0.73 78.66 14799 3.0 4.0 17.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 0.995 1.574 1.255 26.244 21.588 7.230819e-13 0.661 0.388 0.3345 0.7475 0.87 0.72 78.41 14999 3.0 4.0 18.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 0.976 1.545 1.243 26.043 21.209 8.038264e-13 0.660 0.400 0.3231 0.7555 0.88 0.73 78.79 In\u00a0[19]: Copied! <pre>%%time\n# path of the combinations and metrics files\nc_TPF = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_noStress\", \"combinations_Yield_TPF_noStress.parquet\")\nm_TPF = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_noStress\", \"metrics_Yield_TPF_noStress.parquet\")\n\n#\u00a0Filters\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;=', 0.94),\n        CCC = ('&gt;=', 0.8),\n        Accuracy = ('&gt;=', 82),\n        RMSRE = ('&lt;=', 20.9),\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"TPF\")\n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_TPF = filterSimulations(functype='TPF', VPDstress=False, cmb=c_TPF, met=m_TPF, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_TPF\n</pre> %%time # path of the combinations and metrics files c_TPF = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_noStress\", \"combinations_Yield_TPF_noStress.parquet\") m_TPF = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_noStress\", \"metrics_Yield_TPF_noStress.parquet\")  #\u00a0Filters cmb_filters = dict(                 RUE = ('RUE', '=', 3.0 ),                 TminFactor = ('TminFactor', '=', 0.25 )             ) met_filters = dict(         Cb = ('&gt;=', 0.94),         CCC = ('&gt;=', 0.8),         Accuracy = ('&gt;=', 82),         RMSRE = ('&lt;=', 20.9),     ) outputPath = os.path.join(config['RESULTS_PATH'], \"TPF\")  #\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session #\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large. #\u00a0Use dispFig=True if the filtered table is small. filtered_c_TPF = filterSimulations(functype='TPF', VPDstress=False, cmb=c_TPF, met=m_TPF,                                   cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True,                                   dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',                                  saveResults=True, outputPath=outputPath, fmt='parquet')  filtered_c_TPF <pre>Loading combinations...\nLoading metrics...\n750 combinations found\n13 combinations found after applied filter\nFiltered data set saved at /Users/ernestogiron/Desktop/TemperatureFunctions/results/TPF/TPF_filtered/filtered_metrics_combinations_Yield_TPF_noStress_20231001.parquet\nCPU times: user 1.21 s, sys: 164 ms, total: 1.37 s\nWall time: 748 ms\n</pre> Out[19]: UID country location loc_code cycle ObsYield RUE Tmin Toptmin Toptmax Tmax TminFactor SimYield MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.0 14.0 19.0 39.0 0.25 2.29 0.772 1.001 1.000 20.832 17.193 3.050376e-15 0.73 0.611 0.3912 0.7970 0.94 0.82 82.81 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.0 14.0 19.0 39.0 0.25 4.08 0.772 1.001 1.000 20.832 17.193 3.050376e-15 0.73 0.611 0.3912 0.7970 0.94 0.82 82.81 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.0 14.0 19.0 39.0 0.25 3.01 0.772 1.001 1.000 20.832 17.193 3.050376e-15 0.73 0.611 0.3912 0.7970 0.94 0.82 82.81 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.0 14.0 19.0 39.0 0.25 3.23 0.772 1.001 1.000 20.832 17.193 3.050376e-15 0.73 0.611 0.3912 0.7970 0.94 0.82 82.81 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.0 14.0 19.0 39.0 0.25 3.84 0.772 1.001 1.000 20.832 17.193 3.050376e-15 0.73 0.611 0.3912 0.7970 0.94 0.82 82.81 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 645 46 India Pusa PUS-LS 2018 1.44 3.0 4.0 18.0 19.0 39.0 0.25 1.17 0.759 0.968 0.984 20.738 17.005 7.516897e-15 0.72 0.624 0.3755 0.8174 0.96 0.83 83.00 646 47 India Pusa PUS-LS 2019 3.10 3.0 4.0 18.0 19.0 39.0 0.25 2.50 0.759 0.968 0.984 20.738 17.005 7.516897e-15 0.72 0.624 0.3755 0.8174 0.96 0.83 83.00 647 48 India Ludhiana LDH-NS 2022 6.09 3.0 4.0 18.0 19.0 39.0 0.25 3.84 0.759 0.968 0.984 20.738 17.005 7.516897e-15 0.72 0.624 0.3755 0.8174 0.96 0.83 83.00 648 49 India Ludhiana LDH-LS 2022 4.77 3.0 4.0 18.0 19.0 39.0 0.25 2.09 0.759 0.968 0.984 20.738 17.005 7.516897e-15 0.72 0.624 0.3755 0.8174 0.96 0.83 83.00 649 50 Spain Spain SPN 2018 8.35 3.0 4.0 18.0 19.0 39.0 0.25 7.17 0.759 0.968 0.984 20.738 17.005 7.516897e-15 0.72 0.624 0.3755 0.8174 0.96 0.83 83.00 <p>650 rows \u00d7 26 columns</p> In\u00a0[20]: Copied! <pre>%%time\n\n# Path of the combinations and metrics files\nc_TPF_SFvpd = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_SFvpd\", \"combinations_Yield_TPF_SFvpd.parquet\")\nm_TPF_SFvpd = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_SFvpd\", \"metrics_Yield_TPF_SFvpd.parquet\")\n\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;=', 0.86),\n        CCC = ('&gt;=', 0.7),\n        #Accuracy = ('&gt;=', 78),\n        RMSRE = ('&lt;=', 28),\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"TPF\") \n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_TPF_SFvpd = filterSimulations(functype='TPF', VPDstress=True, cmb=c_TPF_SFvpd, met=m_TPF_SFvpd, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_TPF_SFvpd\n</pre> %%time  # Path of the combinations and metrics files c_TPF_SFvpd = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_SFvpd\", \"combinations_Yield_TPF_SFvpd.parquet\") m_TPF_SFvpd = os.path.join(config['RESULTS_PATH'], \"TPF\", \"TPF_SFvpd\", \"metrics_Yield_TPF_SFvpd.parquet\")  cmb_filters = dict(                 RUE = ('RUE', '=', 3.0 ),                 TminFactor = ('TminFactor', '=', 0.25 )             ) met_filters = dict(         Cb = ('&gt;=', 0.86),         CCC = ('&gt;=', 0.7),         #Accuracy = ('&gt;=', 78),         RMSRE = ('&lt;=', 28),     ) outputPath = os.path.join(config['RESULTS_PATH'], \"TPF\")   #\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session #\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large. #\u00a0Use dispFig=True if the filtered table is small. filtered_c_TPF_SFvpd = filterSimulations(functype='TPF', VPDstress=True, cmb=c_TPF_SFvpd, met=m_TPF_SFvpd,                                   cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True,                                   dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',                                  saveResults=True, outputPath=outputPath, fmt='parquet')  filtered_c_TPF_SFvpd <pre>Loading combinations...\nLoading metrics...\n15000 combinations found\n13 combinations found after applied filter\nFiltered data set saved at /Users/ernestogiron/Desktop/TemperatureFunctions/results/TPF/TPF_filtered/filtered_metrics_combinations_Yield_TPF_SFvpd_20231001.parquet\nCPU times: user 1.54 s, sys: 217 ms, total: 1.76 s\nWall time: 814 ms\n</pre> Out[20]: UID country location loc_code cycle ObsYield RUE Tmin Toptmin Toptmax Tmax TminFactor Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 4.0 16.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 2.12 1.019 1.613 1.270 26.564 22.086 1.068685e-12 0.656 0.373 0.3621 0.7380 0.86 0.72 77.91 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 4.0 16.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 4.04 1.019 1.613 1.270 26.564 22.086 1.068685e-12 0.656 0.373 0.3621 0.7380 0.86 0.72 77.91 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 4.0 16.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 3.04 1.019 1.613 1.270 26.564 22.086 1.068685e-12 0.656 0.373 0.3621 0.7380 0.86 0.72 77.91 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 4.0 16.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 2.83 1.019 1.613 1.270 26.564 22.086 1.068685e-12 0.656 0.373 0.3621 0.7380 0.86 0.72 77.91 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 4.0 16.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 3.55 1.019 1.613 1.270 26.564 22.086 1.068685e-12 0.656 0.373 0.3621 0.7380 0.86 0.72 77.91 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 595 46 India Pusa PUS-LS 2018 1.44 3.0 2.0 15.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 0.93 1.018 1.614 1.271 26.407 21.984 4.441160e-13 0.668 0.372 0.3486 0.7355 0.86 0.72 78.02 596 47 India Pusa PUS-LS 2019 3.10 3.0 2.0 15.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 1.74 1.018 1.614 1.271 26.407 21.984 4.441160e-13 0.668 0.372 0.3486 0.7355 0.86 0.72 78.02 597 48 India Ludhiana LDH-NS 2022 6.09 3.0 2.0 15.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 3.57 1.018 1.614 1.271 26.407 21.984 4.441160e-13 0.668 0.372 0.3486 0.7355 0.86 0.72 78.02 598 49 India Ludhiana LDH-LS 2022 4.77 3.0 2.0 15.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 1.75 1.018 1.614 1.271 26.407 21.984 4.441160e-13 0.668 0.372 0.3486 0.7355 0.86 0.72 78.02 599 50 Spain Spain SPN 2018 8.35 3.0 2.0 15.0 19.0 39.0 0.25 3.0 3.5 0.8 1.0 6.69 1.018 1.614 1.271 26.407 21.984 4.441160e-13 0.668 0.372 0.3486 0.7355 0.86 0.72 78.02 <p>600 rows \u00d7 30 columns</p> In\u00a0[21]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'],'TPF', 'TPF_filtered')\nfigures.plot_corrTempFunct(cmb_noStress=filtered_c_TPF, cmb_noStress_filtered=filtered_c_TPF, \n                           cmb_SFvpd=filtered_c_TPF_SFvpd, cmb_SFvpd_filtered=filtered_c_TPF_SFvpd,\n                   functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=40, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'],'TPF', 'TPF_filtered') figures.plot_corrTempFunct(cmb_noStress=filtered_c_TPF, cmb_noStress_filtered=filtered_c_TPF,                             cmb_SFvpd=filtered_c_TPF_SFvpd, cmb_SFvpd_filtered=filtered_c_TPF_SFvpd,                    functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=40, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered', fmt='jpg') In\u00a0[22]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF', 'TPF_filtered')\nfigures.plot_corrTempFunct(cmb_noStress=filtered_c_TPF, cmb_noStress_filtered=filtered_c_TPF, \n                           cmb_SFvpd=filtered_c_TPF_SFvpd, cmb_SFvpd_filtered=filtered_c_TPF_SFvpd,\n                   functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered_errorbar', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF', 'TPF_filtered') figures.plot_corrTempFunct(cmb_noStress=filtered_c_TPF, cmb_noStress_filtered=filtered_c_TPF,                             cmb_SFvpd=filtered_c_TPF_SFvpd, cmb_SFvpd_filtered=filtered_c_TPF_SFvpd,                    functype='TPF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered_errorbar', fmt='jpg') In\u00a0[25]: Copied! <pre>%%time\n#\u00a0Prepare data as a input for create comparison figures by site and/or best combinations\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF', 'TPF_filtered')\ndf_TDays_vs_TempResponse, df_TDays_vs_TempResponse_mean_allSites = \\\nfigures.createFigure_Type_III_TPF(sites, cmb=filtered_c_TPF, roundVal=3, maxTDay=50, saveTable=True,\n                        path_to_save_results=path_to_save_results, fmt='parquet')\ndf_TDays_vs_TempResponse.head()\n</pre> %%time #\u00a0Prepare data as a input for create comparison figures by site and/or best combinations path_to_save_results=os.path.join(config['RESULTS_PATH'], 'TPF', 'TPF_filtered') df_TDays_vs_TempResponse, df_TDays_vs_TempResponse_mean_allSites = \\ figures.createFigure_Type_III_TPF(sites, cmb=filtered_c_TPF, roundVal=3, maxTDay=50, saveTable=True,                         path_to_save_results=path_to_save_results, fmt='parquet') df_TDays_vs_TempResponse.head() <pre>CPU times: user 24.3 s, sys: 2.03 s, total: 26.4 s\nWall time: 26.9 s\n</pre> Out[25]: TDay TempResponse UID country location loc_code cycle RUE TminFactor Tmin Toptmin Toptmax Tmax ObsYield SimYield 0 0.0 0.000 1 Nepal Bhairahawa BHR 2019 3.0 0.25 0.0 14.0 19.0 39.0 2.97 2.29 1 0.1 0.007 1 Nepal Bhairahawa BHR 2019 3.0 0.25 0.0 14.0 19.0 39.0 2.97 2.29 2 0.2 0.014 1 Nepal Bhairahawa BHR 2019 3.0 0.25 0.0 14.0 19.0 39.0 2.97 2.29 3 0.3 0.021 1 Nepal Bhairahawa BHR 2019 3.0 0.25 0.0 14.0 19.0 39.0 2.97 2.29 4 0.4 0.029 1 Nepal Bhairahawa BHR 2019 3.0 0.25 0.0 14.0 19.0 39.0 2.97 2.29 In\u00a0[26]: Copied! <pre>%%time\nfigures.diplay_Figure_Type_II_TPF_InOneFig(cmb=filtered_c_TPF, fnct='TPF', \n                                           df_tdays=df_TDays_vs_TempResponse, \n                                           df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,\n                                           saveFig=True,showFig=True, fmt='jpg', leg_ncol=2,\n                                           path_to_save_results=path_to_save_results)\n</pre> %%time figures.diplay_Figure_Type_II_TPF_InOneFig(cmb=filtered_c_TPF, fnct='TPF',                                             df_tdays=df_TDays_vs_TempResponse,                                             df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,                                            saveFig=True,showFig=True, fmt='jpg', leg_ncol=2,                                            path_to_save_results=path_to_save_results) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 50/50 [00:32&lt;00:00,  1.53it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:00&lt;00:00, 21.11it/s]\n</pre> <pre>CPU times: user 39.3 s, sys: 696 ms, total: 40 s\nWall time: 39.7 s\n</pre> In\u00a0[28]: Copied! <pre>%%time\nfigures.display_FigTDay_vs_TempResponseBySiteYrs_TPF(cmb=filtered_c_TPF, df_tdays=df_TDays_vs_TempResponse, \n                                         roundVal=2, maxTDay=50, fnct='TPF', \n                                         saveFig=True, showFig=True, fmt='jpg', cols=5, leg_ncol=2,\n                                         path_to_save_results=path_to_save_results)\n</pre> %%time figures.display_FigTDay_vs_TempResponseBySiteYrs_TPF(cmb=filtered_c_TPF, df_tdays=df_TDays_vs_TempResponse,                                           roundVal=2, maxTDay=50, fnct='TPF',                                           saveFig=True, showFig=True, fmt='jpg', cols=5, leg_ncol=2,                                          path_to_save_results=path_to_save_results) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:52&lt;00:00,  5.22s/it]\n</pre> <pre>CPU times: user 1min 1s, sys: 898 ms, total: 1min 2s\nWall time: 1min 2s\n</pre> In\u00a0[27]: Copied! <pre>uid = 1\ndf0 = filtered_c_TPF[filtered_c_TPF['UID']==uid].reset_index(drop=True)\nfigures.diplay_Figure_Type_II_TPF_InOneFig(cmb=df0, fnct='TPF', \n                                           df_tdays=df_TDays_vs_TempResponse, \n                                           df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,\n                                           saveFig=True,showFig=True, fmt='jpg', leg_ncol=2,\n                                           path_to_save_results=path_to_save_results) #fname = \"Figure_TPF_SiteYrs_Comparison\"\n</pre> uid = 1 df0 = filtered_c_TPF[filtered_c_TPF['UID']==uid].reset_index(drop=True) figures.diplay_Figure_Type_II_TPF_InOneFig(cmb=df0, fnct='TPF',                                             df_tdays=df_TDays_vs_TempResponse,                                             df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,                                            saveFig=True,showFig=True, fmt='jpg', leg_ncol=2,                                            path_to_save_results=path_to_save_results) #fname = \"Figure_TPF_SiteYrs_Comparison\"  <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:00&lt;00:00, 14.76it/s]\n</pre> In\u00a0[24]: Copied! <pre>print(filtered_c_TPF['Tmin'].sort_values().unique())\nprint(filtered_c_TPF['Toptmin'].sort_values().unique())\nprint(filtered_c_TPF['Toptmax'].sort_values().unique())\nprint(filtered_c_TPF['Tmax'].sort_values().unique())\nprint(filtered_c_TPF_SFvpd['Tmin'].sort_values().unique())\nprint(filtered_c_TPF_SFvpd['Toptmin'].sort_values().unique())\nprint(filtered_c_TPF_SFvpd['Toptmax'].sort_values().unique())\nprint(filtered_c_TPF_SFvpd['Tmax'].sort_values().unique())\nprint(filtered_c_TPF_SFvpd['Lvpd'].sort_values().unique())\nprint(filtered_c_TPF_SFvpd['Uvpd'].sort_values().unique())\nprint(filtered_c_TPF_SFvpd['SFvpd_Lthres'].sort_values().unique())\nprint(filtered_c_TPF_SFvpd['SFvpd_Uthres'].sort_values().unique())\n</pre> print(filtered_c_TPF['Tmin'].sort_values().unique()) print(filtered_c_TPF['Toptmin'].sort_values().unique()) print(filtered_c_TPF['Toptmax'].sort_values().unique()) print(filtered_c_TPF['Tmax'].sort_values().unique()) print(filtered_c_TPF_SFvpd['Tmin'].sort_values().unique()) print(filtered_c_TPF_SFvpd['Toptmin'].sort_values().unique()) print(filtered_c_TPF_SFvpd['Toptmax'].sort_values().unique()) print(filtered_c_TPF_SFvpd['Tmax'].sort_values().unique()) print(filtered_c_TPF_SFvpd['Lvpd'].sort_values().unique()) print(filtered_c_TPF_SFvpd['Uvpd'].sort_values().unique()) print(filtered_c_TPF_SFvpd['SFvpd_Lthres'].sort_values().unique()) print(filtered_c_TPF_SFvpd['SFvpd_Uthres'].sort_values().unique()) <pre>[0. 1. 2. 3. 4.]\n[14. 15. 16. 17. 18.]\n[19.]\n[39.]\n[2. 3. 4.]\n[14. 15. 16. 17. 18.]\n[19.]\n[38. 39.]\n[3.]\n[3.5]\n[0.8]\n[1.]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/Using%20TPF/#estimating-grain-yield-using-tpf","title":"Estimating grain yield using TPF\u00b6","text":"<p>Here we use the temperature Trapezoid temperature function with different cardinal temperature combinations with and without VPD stress function for the period from heading to maturity (grain filling period).</p> <p>Authors:</p> <ul> <li>Azam Lashkari (CIMMYT-China, azam.lashkari@jic.ac.uk)</li> <li>Urs Christoph Schulthess (CIMMYT-China, U.Schulthess@cgiar.org)</li> <li>Ernesto Giron Echeverry (Independent Researcher, e.giron.e@gmail.com)</li> </ul> <p>Last updated: October 01, 2023</p>"},{"location":"notebooks/Using%20TPF/#load-libraries","title":"Load libraries\u00b6","text":""},{"location":"notebooks/Using%20TPF/#load-phenology-ndvi-and-weather-example-datasets","title":"Load Phenology, NDVI and Weather example datasets\u00b6","text":""},{"location":"notebooks/Using%20TPF/#create-a-model","title":"Create a model\u00b6","text":"<p>The model contains all of the required functions to analyse the data</p>"},{"location":"notebooks/Using%20TPF/#trapezoid-temperature-function-tpf","title":"Trapezoid temperature function (TPF)\u00b6","text":""},{"location":"notebooks/Using%20TPF/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Using%20TPF/#stressed-vpd","title":"Stressed VPD\u00b6","text":""},{"location":"notebooks/Using%20TPF/#display-grain-yield","title":"Display Grain Yield\u00b6","text":"<p>Create a figure to compare simulated grain yield against observed.</p>"},{"location":"notebooks/Using%20TPF/#combinations","title":"Combinations\u00b6","text":"<p>To establish the optimum temperature response for grain-filling period, you can run several models using a wide range of cardinal temperatures.</p> <p>The optimum temperature for photosynthesis depends on the choosen temperature function.</p>"},{"location":"notebooks/Using%20TPF/#tpf-combinations","title":"TPF combinations\u00b6","text":""},{"location":"notebooks/Using%20TPF/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Using%20TPF/#no-stress-metrics","title":"No stress Metrics\u00b6","text":""},{"location":"notebooks/Using%20TPF/#stressed-vapor-pressure-deficit-vpd","title":"Stressed Vapor pressure deficit (VPD)\u00b6","text":""},{"location":"notebooks/Using%20TPF/#display-grain-yield-comparison-with-and-without-vpd-stress","title":"Display grain yield comparison with and without VPD stress\u00b6","text":""},{"location":"notebooks/Using%20TPF/#select-the-best-results-using-filters","title":"Select the best results using filters\u00b6","text":"<p>After running several models you can filter results to see which one look better.</p> <p>The following table is an example of one filter used to evaluate the best models, it only use three (3) evaluation metrics (Cb, CCC, and RMSRE) to select the top ones.</p> Temperature Function Cb CCC RMSRE TPF 0.94 &gt; 0.8 &lt; 20.9 TPF vpd stress 0.86 &gt; 0.7 &lt; 28"},{"location":"notebooks/Using%20TPF/#filter-tpf-manually","title":"filter TPF manually\u00b6","text":""},{"location":"notebooks/Using%20TPF/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Using%20TPF/#vpd-stress-conditions","title":"VPD stress conditions\u00b6","text":""},{"location":"notebooks/Using%20TPF/#comparison-of-the-best-combinations","title":"Comparison of the best combinations\u00b6","text":""},{"location":"notebooks/Using%20TPF/#conclusion","title":"Conclusion\u00b6","text":"<p>Congratulations! You have run a simulation using a prebuilt dataset and the Temperature Functions API.</p>"},{"location":"notebooks/Using%20TPF/#type-3-four-cardinal-temperatures","title":"Type 3- Four cardinal temperatures\u00b6","text":"Model Parameters No stress VPD stress RUE 3.0 3.0 TminFactor 0.25 0.25 Tmin 0-4 \u00b0C 2-4 \u00b0C Toptmin 14-18 \u00b0C 14-18 \u00b0C Toptmax 19 \u00b0C 19 \u00b0C Tmax 39 \u00b0C 38-39 \u00b0C SFvpdL 0.8 SFvpdU 1 VPDL 3 kPa VPDU 3.5 kPa"},{"location":"notebooks/Using%20WETF/","title":"Estimating Yield using WETF","text":"In\u00a0[1]: Copied! <pre>import os, sys, gc\nimport pandas as pd\n#import datetime as dt\npd.set_option('display.max_columns', None)\n\n#\u00a0Import Temperature Response Functions package\nimport tfunct\nfrom tfunct.data import load_dataset #\u00a0Function to load existing dataset\nfrom tfunct.model import Model # Load module to create a model\nfrom tfunct.model import tday, gpp  # Module to calculate GPP and estimated yield\nfrom tfunct.util import figures #\u00a0module to create figures\n\nprint(tfunct.__version__)\n</pre> import os, sys, gc import pandas as pd #import datetime as dt pd.set_option('display.max_columns', None)  #\u00a0Import Temperature Response Functions package import tfunct from tfunct.data import load_dataset #\u00a0Function to load existing dataset from tfunct.model import Model # Load module to create a model from tfunct.model import tday, gpp  # Module to calculate GPP and estimated yield from tfunct.util import figures #\u00a0module to create figures  print(tfunct.__version__) <pre>tfunct version 1.0.0\n</pre> In\u00a0[2]: Copied! <pre>%%time\n#\u00a0Load example dataset (Phenology, NDVI and Weather data for each site)\ndata = load_dataset()\n</pre> %%time #\u00a0Load example dataset (Phenology, NDVI and Weather data for each site) data = load_dataset() <pre>CPU times: user 72.1 ms, sys: 48.1 ms, total: 120 ms\nWall time: 52.2 ms\n</pre> <p>Note: For details how to display phenology, ndvi and weather tables, please see Getting Started</p> In\u00a0[3]: Copied! <pre>%%time \n\n# Define the Path where the output data will be stored\nPATH_PRJ = '/Users/ernestogiron/Desktop/TemperatureFunctions/'\nRESULTS_PATH = PATH_PRJ + 'results/'\n\nconfig = {\n    \"PROJECT_PATH\": PATH_PRJ,\n    \"RESULTS_PATH\": RESULTS_PATH, #'./', # Results will be put in the same folder where the model is running\n}\n\n#\u00a0create model to estimate grain yield\nmodel = Model(config)\nmodel.preprocess_raw_datasets(data) #\u00a0Preprocess datasets\n# Prepare dataset to run all process in parallel using NDVIA GPU if available\nsites = model.prepareData()\n</pre> %%time   # Define the Path where the output data will be stored PATH_PRJ = '/Users/ernestogiron/Desktop/TemperatureFunctions/' RESULTS_PATH = PATH_PRJ + 'results/'  config = {     \"PROJECT_PATH\": PATH_PRJ,     \"RESULTS_PATH\": RESULTS_PATH, #'./', # Results will be put in the same folder where the model is running }  #\u00a0create model to estimate grain yield model = Model(config) model.preprocess_raw_datasets(data) #\u00a0Preprocess datasets # Prepare dataset to run all process in parallel using NDVIA GPU if available sites = model.prepareData() <pre>50it [00:01, 36.45it/s]</pre> <pre>CPU times: user 1.68 s, sys: 79.8 ms, total: 1.76 s\nWall time: 1.76 s\n</pre> <pre>\n</pre> In\u00a0[4]: Copied! <pre>%%time\nWETF_noStress = model.getYield(tfun='WETF', sites=sites, is_VPDStress=False, expCSV=True)\nWETF_noStress.head()\n</pre> %%time WETF_noStress = model.getYield(tfun='WETF', sites=sites, is_VPDStress=False, expCSV=True) WETF_noStress.head() <pre>CPU times: user 705 ms, sys: 31.4 ms, total: 737 ms\nWall time: 745 ms\n</pre> Out[4]: UID country location loc_code cycle ObsYield RUE Tmin Topt Tmax TminFactor SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 9.0 18.0 34.0 0.25 2.44 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 9.0 18.0 34.0 0.25 4.31 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 9.0 18.0 34.0 0.25 3.09 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 9.0 18.0 34.0 0.25 3.41 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 9.0 18.0 34.0 0.25 3.97 In\u00a0[5]: Copied! <pre>%%time\nWETF_SFvpd = model.getYield(tfun='WETF', sites=sites, is_VPDStress=True, expCSV=True)\nWETF_SFvpd.head()\n</pre> %%time WETF_SFvpd = model.getYield(tfun='WETF', sites=sites, is_VPDStress=True, expCSV=True) WETF_SFvpd.head() <pre>CPU times: user 132 ms, sys: 3.89 ms, total: 136 ms\nWall time: 137 ms\n</pre> Out[5]: UID country location loc_code cycle ObsYield RUE TminFactor Tmin Topt Tmax Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 9.0 18.0 34.0 0.25 1.0 4.0 0.2 1.0 1.61 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 9.0 18.0 34.0 0.25 1.0 4.0 0.2 1.0 3.20 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 9.0 18.0 34.0 0.25 1.0 4.0 0.2 1.0 2.61 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 9.0 18.0 34.0 0.25 1.0 4.0 0.2 1.0 2.20 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 9.0 18.0 34.0 0.25 1.0 4.0 0.2 1.0 2.34 In\u00a0[6]: Copied! <pre>%%time\ndirname=os.path.join(config['RESULTS_PATH'], 'WETF', 'Figures')\nfigures.chart_compareResults(df_result=WETF_noStress, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code', \n                             loc_leg=2, ncol=2, ha='left', va='top',\n                             title='WETF\\nNo streess condition', #xlabel='', ylabel='', \n                             dirname=dirname, fname='WETF_noStress', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</pre> %%time dirname=os.path.join(config['RESULTS_PATH'], 'WETF', 'Figures') figures.chart_compareResults(df_result=WETF_noStress, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code',                               loc_leg=2, ncol=2, ha='left', va='top',                              title='WETF\\nNo streess condition', #xlabel='', ylabel='',                               dirname=dirname, fname='WETF_noStress',                               dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')  <pre>CPU times: user 1.14 s, sys: 135 ms, total: 1.27 s\nWall time: 766 ms\n</pre> In\u00a0[7]: Copied! <pre>%%time\ndirname=os.path.join(config['RESULTS_PATH'], 'WETF', 'Figures')\nfigures.chart_compareResults(df_result=WETF_SFvpd, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code', \n                             loc_leg=2, ncol=2, ha='left', va='top',\n                             title='WETF\\nVPD streess condition', #xlabel='', ylabel='', \n                             dirname=dirname, fname='WETF_SFvpd', \n                             dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')\n</pre> %%time dirname=os.path.join(config['RESULTS_PATH'], 'WETF', 'Figures') figures.chart_compareResults(df_result=WETF_SFvpd, fld1=\"ObsYield\", fld2=\"SimYield\", alpha=.75, s=45, xy_lim=2, hue='loc_code',                               loc_leg=2, ncol=2, ha='left', va='top',                              title='WETF\\nVPD streess condition', #xlabel='', ylabel='',                               dirname=dirname, fname='WETF_SFvpd',                               dispScore=True, dispLegend=True, saveFig=True, showFig=True, fmt='jpg')  <pre>CPU times: user 877 ms, sys: 86.7 ms, total: 964 ms\nWall time: 563 ms\n</pre> In\u00a0[8]: Copied! <pre>%%time\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF')\nfigures.plot_corrTempFunct(cmb_noStress=WETF_noStress, cmb_noStress_filtered=None, \n                           cmb_SFvpd=WETF_SFvpd, cmb_SFvpd_filtered=None,\n                   functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_1_errorbar', fmt='pdf')\n</pre> %%time path_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF') figures.plot_corrTempFunct(cmb_noStress=WETF_noStress, cmb_noStress_filtered=None,                             cmb_SFvpd=WETF_SFvpd, cmb_SFvpd_filtered=None,                    functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_1_errorbar', fmt='pdf') <pre>CPU times: user 1.67 s, sys: 227 ms, total: 1.9 s\nWall time: 924 ms\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[9]: Copied! <pre>%%time\n\nfunctype='WETF'\nisVPDStress=False\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# 1) Combinations for WETF (no stress)\nRUE = [3.0] #[2.8, 2.9, 3.0, 3.1, 3.2]\nTmin = [x for x in range(0, 11)]\nTopt = [x for x in range(10, 26)]\nTmax = [x for x in range(30, 46)]\nTminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5]\n\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, \n                                                           Tmin=Tmin, Topt=Topt, Tmax=Tmax, TminFactor=TminFactor, \n                                                           isVPDStress=isVPDStress)\ncmb_WETF_noStress = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                                    isVPDStress, array_results, saveFile=True)\ncmb_WETF_noStress\n</pre> %%time  functype='WETF' isVPDStress=False df_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data # 1) Combinations for WETF (no stress) RUE = [3.0] #[2.8, 2.9, 3.0, 3.1, 3.2] Tmin = [x for x in range(0, 11)] Topt = [x for x in range(10, 26)] Tmax = [x for x in range(30, 46)] TminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5]  #\u00a0No stress conditions array_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE,                                                             Tmin=Tmin, Topt=Topt, Tmax=Tmax, TminFactor=TminFactor,                                                             isVPDStress=isVPDStress) cmb_WETF_noStress = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,                                                      isVPDStress, array_results, saveFile=True) cmb_WETF_noStress  <pre>CPU times: user 1.81 s, sys: 64.4 ms, total: 1.88 s\nWall time: 1.89 s\n</pre> Out[9]: UID country location loc_code cycle ObsYield RUE Tmin Topt Tmax TminFactor SimYield 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 0.0 10.0 30.0 0.25 1.42 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 0.0 10.0 30.0 0.25 2.82 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 0.0 10.0 30.0 0.25 2.21 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 0.0 10.0 30.0 0.25 1.73 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 0.0 10.0 30.0 0.25 2.32 ... ... ... ... ... ... ... ... ... ... ... ... ... 139995 46 India Pusa PUS-LS 2018 1.44 3.0 10.0 25.0 45.0 0.25 2.27 139996 47 India Pusa PUS-LS 2019 3.10 3.0 10.0 25.0 45.0 0.25 4.72 139997 48 India Ludhiana LDH-NS 2022 6.09 3.0 10.0 25.0 45.0 0.25 5.02 139998 49 India Ludhiana LDH-LS 2022 4.77 3.0 10.0 25.0 45.0 0.25 3.97 139999 50 Spain Spain SPN 2018 8.35 3.0 10.0 25.0 45.0 0.25 6.86 <p>140000 rows \u00d7 12 columns</p> In\u00a0[10]: Copied! <pre>%%time\n\nm_WETF_noStress = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                                 array_params_to_run, array_results, saveFile=True) #, fmt='parquet')\nm_WETF_noStress\n</pre> %%time  m_WETF_noStress = model.getCombinations_Metrics(functype, isVPDStress, df_GYield,                                                   array_params_to_run, array_results, saveFile=True) #, fmt='parquet') m_WETF_noStress <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2800/2800 [00:31&lt;00:00, 88.46it/s]\n</pre> <pre>CPU times: user 29.2 s, sys: 4.13 s, total: 33.3 s\nWall time: 31.7 s\n</pre> Out[10]: RUE Tmin Topt Tmax TminFactor MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 3.0 0.0 10.0 30.0 0.25 2.209 6.027 2.455 53.218 49.527 1.178069e-09 0.541 -1.343 -0.2075 0.5646 0.44 0.33 50.47 1 3.0 0.0 10.0 31.0 0.25 2.000 5.019 2.240 47.998 44.507 1.120526e-10 0.583 -0.951 -0.1076 0.5895 0.49 0.38 55.49 2 3.0 0.0 10.0 32.0 0.25 1.808 4.183 2.045 43.180 39.845 1.176255e-11 0.620 -0.626 -0.0046 0.6099 0.54 0.44 60.16 3 3.0 0.0 10.0 33.0 0.25 1.637 3.512 1.874 38.998 35.691 1.720306e-12 0.649 -0.365 0.0901 0.6276 0.59 0.49 64.31 4 3.0 0.0 10.0 34.0 0.25 1.483 2.971 1.724 35.400 31.970 3.164497e-13 0.673 -0.155 0.1711 0.6441 0.64 0.54 68.03 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 2795 3.0 10.0 25.0 41.0 0.25 1.018 1.493 1.222 37.183 27.317 2.313390e-11 0.609 0.419 1.2611 0.8377 0.95 0.76 72.68 2796 3.0 10.0 25.0 42.0 0.25 1.022 1.522 1.234 37.577 27.482 2.075491e-11 0.611 0.408 1.2751 0.8409 0.95 0.75 72.52 2797 3.0 10.0 25.0 43.0 0.25 1.025 1.547 1.244 37.866 27.575 1.828027e-11 0.613 0.399 1.2800 0.8451 0.94 0.75 72.42 2798 3.0 10.0 25.0 44.0 0.25 1.029 1.570 1.253 38.130 27.698 1.598582e-11 0.615 0.390 1.2866 0.8486 0.94 0.75 72.30 2799 3.0 10.0 25.0 45.0 0.25 1.033 1.590 1.261 38.384 27.817 1.453068e-11 0.617 0.382 1.2943 0.8510 0.93 0.75 72.18 <p>2800 rows \u00d7 18 columns</p> In\u00a0[11]: Copied! <pre>%%time\n\nfunctype='WETF'\nisVPDStress=True\ndf_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data\n# Combinations\nRUE = [3.0]\nTmin = [x for x in range(0, 11)]\nTopt = [x for x in range(10, 26)]\nTmax = [x for x in range(30, 46)]\nTminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5]\nLvpd = [0.5, 1, 1.5, 2, 2.5, 3, 3.5]\nUvpd = [1, 1.5, 2, 2.5, 3, 3.5, 4]\nSFvpd_Lthres = [0.2, 0.4, 0.6, 0.8] \nSFvpd_Uthres = [1]\n#\u00a0No stress conditions\narray_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Tmin=Tmin, Topt=Topt, \n                                                           Tmax=Tmax, TminFactor=TminFactor,  \n                                                           Lvpd=Lvpd, Uvpd=Uvpd, SFvpd_Lthres=SFvpd_Lthres, SFvpd_Uthres=SFvpd_Uthres,\n                                                           isVPDStress=isVPDStress)\n\n# If combinations are not big\n#cmb_WETF_SFvpd = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n#                                           isVPDStress, array_results, saveFile=True) # fmt='parquet' #csv\n# cmb_WETF_SFvpd\n\n# Use returnDF=False when the number of combinations is too large. \n#\u00a0This avoid memory issues and save the file in parquet format by default\nmodel.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, \n                                           isVPDStress, array_results, saveFile=True, returnDF=False)\n</pre> %%time  functype='WETF' isVPDStress=True df_GYield, data_input, cols = model.setup_dataInput_forCombinations(sites) # Setup input data # Combinations RUE = [3.0] Tmin = [x for x in range(0, 11)] Topt = [x for x in range(10, 26)] Tmax = [x for x in range(30, 46)] TminFactor = [0.25] #[0.0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5] Lvpd = [0.5, 1, 1.5, 2, 2.5, 3, 3.5] Uvpd = [1, 1.5, 2, 2.5, 3, 3.5, 4] SFvpd_Lthres = [0.2, 0.4, 0.6, 0.8]  SFvpd_Uthres = [1] #\u00a0No stress conditions array_params_to_run, array_results = model.getCombinations(functype=functype, cols=cols, RUE=RUE, Tmin=Tmin, Topt=Topt,                                                             Tmax=Tmax, TminFactor=TminFactor,                                                              Lvpd=Lvpd, Uvpd=Uvpd, SFvpd_Lthres=SFvpd_Lthres, SFvpd_Uthres=SFvpd_Uthres,                                                            isVPDStress=isVPDStress)  # If combinations are not big #cmb_WETF_SFvpd = model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,  #                                           isVPDStress, array_results, saveFile=True) # fmt='parquet' #csv # cmb_WETF_SFvpd  # Use returnDF=False when the number of combinations is too large.  #\u00a0This avoid memory issues and save the file in parquet format by default model.getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run,                                             isVPDStress, array_results, saveFile=True, returnDF=False) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:51&lt;00:00, 12.87s/it]\n</pre> <pre>&lt;pyarrow._parquet.FileMetaData object at 0x13ecc0c70&gt;\n  created_by: parquet-cpp-arrow version 13.0.0\n  num_columns: 16\n  num_rows: 15680000\n  num_row_groups: 15\n  format_version: 2.6\n  serialized_size: 26771\nCPU times: user 1min 36s, sys: 4.82 s, total: 1min 40s\nWall time: 1min 40s\n</pre> In\u00a0[12]: Copied! <pre>%%time\n\nm_WETF_SFvpd = model.getCombinations_Metrics(functype, isVPDStress, df_GYield, \n                                             array_params_to_run, array_results, saveFile=True)\nm_WETF_SFvpd\n</pre> %%time  m_WETF_SFvpd = model.getCombinations_Metrics(functype, isVPDStress, df_GYield,                                               array_params_to_run, array_results, saveFile=True) m_WETF_SFvpd <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 313600/313600 [03:41&lt;00:00, 1417.75it/s]\n</pre> <pre>CPU times: user 3min 2s, sys: 4min 50s, total: 7min 53s\nWall time: 3min 42s\n</pre> Out[12]: RUE Tmin Topt Tmax TminFactor Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 3.0 0.0 10.0 30.0 0.25 0.5 1.0 0.2 1.0 3.906 17.421 4.174 86.331 85.462 3.508411e-03 0.164 -5.772 0.0504 0.1357 0.09 0.04 14.54 1 3.0 0.0 10.0 30.0 0.25 0.5 1.0 0.4 1.0 3.477 13.881 3.726 77.604 76.364 1.515715e-05 0.326 -4.396 -0.0119 0.2429 0.14 0.08 23.64 2 3.0 0.0 10.0 30.0 0.25 0.5 1.0 0.6 1.0 3.047 10.786 3.284 69.057 67.227 2.315268e-07 0.430 -3.193 -0.0752 0.3508 0.22 0.15 32.77 3 3.0 0.0 10.0 30.0 0.25 0.5 1.0 0.8 1.0 2.618 8.164 2.857 60.872 58.133 1.333554e-08 0.493 -2.174 -0.1387 0.4584 0.32 0.23 41.87 4 3.0 0.0 10.0 30.0 0.25 0.5 1.5 0.2 1.0 3.607 15.231 3.903 81.541 79.345 4.124084e-03 0.159 -4.921 -0.0362 0.2200 0.17 0.07 20.66 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 313595 3.0 10.0 25.0 45.0 0.25 3.0 4.0 0.8 1.0 0.794 0.982 0.991 26.625 19.960 1.165974e-12 0.655 0.618 0.9204 0.7447 0.98 0.81 80.04 313596 3.0 10.0 25.0 45.0 0.25 3.5 4.0 0.2 1.0 0.848 1.230 1.109 28.123 20.807 1.868092e-10 0.574 0.522 1.0827 0.7203 0.99 0.77 79.19 313597 3.0 10.0 25.0 45.0 0.25 3.5 4.0 0.4 1.0 0.782 0.994 0.997 27.221 19.892 4.206708e-12 0.636 0.614 1.0721 0.7466 1.00 0.81 80.11 313598 3.0 10.0 25.0 45.0 0.25 3.5 4.0 0.6 1.0 0.732 0.889 0.943 27.375 19.337 3.777573e-13 0.670 0.655 1.0635 0.7723 1.00 0.83 80.66 313599 3.0 10.0 25.0 45.0 0.25 3.5 4.0 0.8 1.0 0.759 0.909 0.954 28.493 20.108 2.574934e-13 0.675 0.647 1.0552 0.7981 1.00 0.84 79.89 <p>313600 rows \u00d7 22 columns</p> In\u00a0[13]: Copied! <pre>%%time\n# If the process above used \"returnDF=False\", it's necessary to load the data to create figures\n# path of the combinations and metrics files\nc_WETF = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_noStress\", \"combinations_Yield_WETF_noStress.parquet\")\n#m_WETF = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_noStress\", \"metrics_Yield_WETF_noStress.parquet\")\nc_WETF_SFvpd = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_SFvpd\", \"combinations_Yield_WETF_SFvpd.parquet\")\n#m_WETF_SFvpd = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_SFvpd\", \"metrics_Yield_WETF_SFvpd.parquet\")\n\ncmb_WETF_noStress = pd.read_parquet(c_WETF)\ncmb_WETF_SFvpd = pd.read_parquet(c_WETF_SFvpd)\n#m_WETF_noStress = pd.read_parquet(m_WETF)\n#m_WETF_SFvpd = pd.read_parquet(m_WETF_SFvpd)\n</pre> %%time # If the process above used \"returnDF=False\", it's necessary to load the data to create figures # path of the combinations and metrics files c_WETF = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_noStress\", \"combinations_Yield_WETF_noStress.parquet\") #m_WETF = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_noStress\", \"metrics_Yield_WETF_noStress.parquet\") c_WETF_SFvpd = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_SFvpd\", \"combinations_Yield_WETF_SFvpd.parquet\") #m_WETF_SFvpd = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_SFvpd\", \"metrics_Yield_WETF_SFvpd.parquet\")  cmb_WETF_noStress = pd.read_parquet(c_WETF) cmb_WETF_SFvpd = pd.read_parquet(c_WETF_SFvpd) #m_WETF_noStress = pd.read_parquet(m_WETF) #m_WETF_SFvpd = pd.read_parquet(m_WETF_SFvpd) <pre>CPU times: user 3.96 s, sys: 1.54 s, total: 5.5 s\nWall time: 1.59 s\n</pre> In\u00a0[14]: Copied! <pre>%%time\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF')\nfigures.plot_corrTempFunct(cmb_noStress=cmb_WETF_noStress, cmb_noStress_filtered=cmb_WETF_noStress, \n                   cmb_SFvpd=cmb_WETF_SFvpd, cmb_SFvpd_filtered=cmb_WETF_SFvpd,\n                   functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=20, alpha=0.65, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters', fmt='jpg')\n</pre> %%time path_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF') figures.plot_corrTempFunct(cmb_noStress=cmb_WETF_noStress, cmb_noStress_filtered=cmb_WETF_noStress,                     cmb_SFvpd=cmb_WETF_SFvpd, cmb_SFvpd_filtered=cmb_WETF_SFvpd,                    functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=20, alpha=0.65, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters', fmt='jpg') <pre>CPU times: user 7min 45s, sys: 39.5 s, total: 8min 24s\nWall time: 8min 29s\n</pre> In\u00a0[15]: Copied! <pre>%%time\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF')\nfigures.plot_corrTempFunct(cmb_noStress=cmb_WETF_noStress, cmb_noStress_filtered=cmb_WETF_noStress, \n                   cmb_SFvpd=cmb_WETF_SFvpd, cmb_SFvpd_filtered=cmb_WETF_SFvpd,\n                   functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters_errorbar', fmt='jpg')\n</pre> %%time path_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF') figures.plot_corrTempFunct(cmb_noStress=cmb_WETF_noStress, cmb_noStress_filtered=cmb_WETF_noStress,                     cmb_SFvpd=cmb_WETF_SFvpd, cmb_SFvpd_filtered=cmb_WETF_SFvpd,                    functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_nofilters_errorbar', fmt='jpg') <pre>CPU times: user 4.35 s, sys: 1.87 s, total: 6.22 s\nWall time: 6.53 s\n</pre> In\u00a0[16]: Copied! <pre>#\u00a0Load module to filter combinations in an easy way\nfrom tfunct.util import filterSimulations\n</pre> #\u00a0Load module to filter combinations in an easy way from tfunct.util import filterSimulations  In\u00a0[17]: Copied! <pre>m_WETF_noStress[\n    (m_WETF_noStress['Cb']&gt;0.98) &amp; (m_WETF_noStress['CCC']&gt;0.8) \n]\n</pre> m_WETF_noStress[     (m_WETF_noStress['Cb']&gt;0.98) &amp; (m_WETF_noStress['CCC']&gt;0.8)  ] Out[17]: RUE Tmin Topt Tmax TminFactor MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 47 3.0 0.0 12.0 45.0 0.25 0.685 0.758 0.870 20.831 16.315 3.938543e-15 0.727 0.705 0.7616 0.7890 0.99 0.86 83.69 60 3.0 0.0 13.0 42.0 0.25 0.675 0.756 0.869 20.391 15.917 2.594596e-15 0.732 0.706 0.7061 0.7966 0.99 0.86 84.08 61 3.0 0.0 13.0 43.0 0.25 0.680 0.742 0.862 20.766 16.230 3.112351e-15 0.730 0.711 0.7422 0.8007 0.99 0.86 83.77 62 3.0 0.0 13.0 44.0 0.25 0.691 0.734 0.856 21.170 16.657 3.423187e-15 0.729 0.715 0.7714 0.8053 1.00 0.87 83.34 63 3.0 0.0 13.0 45.0 0.25 0.701 0.734 0.857 21.662 17.059 4.302333e-15 0.726 0.715 0.8043 0.8082 1.00 0.87 82.94 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 2757 3.0 10.0 23.0 35.0 0.25 0.800 0.983 0.991 28.038 20.535 9.372771e-14 0.689 0.618 0.8517 0.8682 0.99 0.84 79.47 2770 3.0 10.0 24.0 32.0 0.25 0.831 1.064 1.031 26.642 20.439 2.822672e-12 0.642 0.586 0.6981 0.8137 1.00 0.81 79.56 2771 3.0 10.0 24.0 33.0 0.25 0.830 1.032 1.016 27.790 21.001 2.014616e-12 0.647 0.599 0.8318 0.8222 1.00 0.82 79.00 2772 3.0 10.0 24.0 34.0 0.25 0.850 1.058 1.029 29.220 21.840 1.777281e-12 0.649 0.589 0.9223 0.8310 1.00 0.82 78.16 2773 3.0 10.0 24.0 35.0 0.25 0.880 1.111 1.054 30.613 22.897 1.796578e-12 0.648 0.568 0.9856 0.8390 0.99 0.81 77.10 <p>671 rows \u00d7 18 columns</p> In\u00a0[18]: Copied! <pre>m_WETF_SFvpd[(m_WETF_SFvpd['Cb']&gt;0.98) &amp; (m_WETF_SFvpd['CCC']&gt;0.80) &amp; (m_WETF_SFvpd['RMSRE']&lt;21.5)]\n</pre> m_WETF_SFvpd[(m_WETF_SFvpd['Cb']&gt;0.98) &amp; (m_WETF_SFvpd['CCC']&gt;0.80) &amp; (m_WETF_SFvpd['RMSRE']&lt;21.5)] Out[18]: RUE Tmin Topt Tmax TminFactor Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 12423 3.0 0.0 16.0 44.0 0.25 3.0 3.5 0.8 1.0 0.698 0.774 0.880 21.357 16.852 5.329494e-15 0.724 0.699 0.7716 0.7822 0.99 0.86 83.15 12535 3.0 0.0 16.0 45.0 0.25 3.0 3.5 0.8 1.0 0.686 0.758 0.871 21.464 16.678 4.731750e-15 0.725 0.705 0.7949 0.7837 0.99 0.86 83.32 13879 3.0 0.0 17.0 41.0 0.25 3.0 3.5 0.8 1.0 0.707 0.789 0.888 21.337 17.028 6.489510e-15 0.721 0.693 0.7306 0.7891 0.99 0.85 82.97 13991 3.0 0.0 17.0 42.0 0.25 3.0 3.5 0.8 1.0 0.695 0.768 0.876 21.469 16.866 5.550869e-15 0.723 0.701 0.7606 0.7905 0.99 0.86 83.13 15447 3.0 0.0 18.0 39.0 0.25 3.0 3.5 0.8 1.0 0.712 0.795 0.892 21.485 17.169 7.755483e-15 0.719 0.691 0.7027 0.7974 0.99 0.85 82.83 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 302279 3.0 10.0 19.0 40.0 0.25 3.0 3.5 0.8 1.0 0.702 0.789 0.888 21.308 16.894 4.997434e-15 0.724 0.693 0.6660 0.8019 0.99 0.86 83.11 302391 3.0 10.0 19.0 41.0 0.25 3.0 3.5 0.8 1.0 0.690 0.767 0.876 21.392 16.720 4.255964e-15 0.726 0.702 0.7000 0.8024 0.99 0.86 83.28 304283 3.0 10.0 20.0 42.0 0.25 2.5 3.0 0.8 1.0 0.665 0.769 0.877 21.273 16.188 2.705716e-15 0.731 0.701 0.6652 0.8010 0.99 0.86 83.81 304395 3.0 10.0 20.0 43.0 0.25 2.5 3.0 0.8 1.0 0.662 0.758 0.871 21.408 16.176 2.730790e-15 0.731 0.705 0.6876 0.8014 0.99 0.86 83.82 308187 3.0 10.0 22.0 45.0 0.25 2.0 2.5 0.8 1.0 0.649 0.742 0.862 20.905 15.722 1.859521e-15 0.735 0.711 0.7449 0.7875 0.99 0.86 84.28 <p>172 rows \u00d7 22 columns</p> <p>It's clear that these thresholds still show so many solutions. Let's try to improve the filters. For example using <code>Cb = 1.0</code> and <code>CCC &gt;= 0.88</code> and <code>Accuracy &gt;= 84%</code> and <code>RMSRE &lt;= 20.4</code>.</p> In\u00a0[19]: Copied! <pre>m_WETF_noStress[\n    (m_WETF_noStress['Cb']==1.0) &amp; (m_WETF_noStress['CCC']&gt;=0.88) \n    &amp; (m_WETF_noStress['Accuracy']&gt;=84) &amp; (m_WETF_noStress['RMSRE'] &lt;= 20.4) \n]\n</pre> m_WETF_noStress[     (m_WETF_noStress['Cb']==1.0) &amp; (m_WETF_noStress['CCC']&gt;=0.88)      &amp; (m_WETF_noStress['Accuracy']&gt;=84) &amp; (m_WETF_noStress['RMSRE'] &lt;= 20.4)  ] Out[19]: RUE Tmin Topt Tmax TminFactor MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 2425 3.0 9.0 17.0 39.0 0.25 0.662 0.717 0.847 20.317 15.750 1.266149e-15 0.739 0.721 0.6236 0.8404 1.0 0.88 84.25 2439 3.0 9.0 18.0 37.0 0.25 0.667 0.719 0.848 20.323 15.890 1.057484e-15 0.741 0.721 0.5713 0.8565 1.0 0.88 84.11 2679 3.0 10.0 18.0 37.0 0.25 0.668 0.722 0.850 20.074 15.852 9.833239e-16 0.742 0.719 0.5450 0.8536 1.0 0.88 84.15 In\u00a0[20]: Copied! <pre>m_WETF_SFvpd[\n    (m_WETF_SFvpd['Cb']==1.00) &amp; (m_WETF_SFvpd['CCC']&gt;=0.8) \n    &amp; (m_WETF_SFvpd['Accuracy']&gt;=83) &amp; (m_WETF_SFvpd['RMSRE'] &lt;= 21.85) \n]\n</pre> m_WETF_SFvpd[     (m_WETF_SFvpd['Cb']==1.00) &amp; (m_WETF_SFvpd['CCC']&gt;=0.8)      &amp; (m_WETF_SFvpd['Accuracy']&gt;=83) &amp; (m_WETF_SFvpd['RMSRE'] &lt;= 21.85)  ] Out[20]: RUE Tmin Topt Tmax TminFactor Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 189495 3.0 6.0 19.0 41.0 0.25 3.0 3.5 0.8 1.0 0.679 0.743 0.862 21.825 16.692 4.293063e-15 0.726 0.711 0.7679 0.8046 1.0 0.87 83.31 275735 3.0 9.0 19.0 43.0 0.25 3.0 3.5 0.8 1.0 0.670 0.730 0.855 21.781 16.489 3.147023e-15 0.729 0.716 0.7732 0.8048 1.0 0.87 83.51 302727 3.0 10.0 19.0 44.0 0.25 3.0 3.5 0.8 1.0 0.667 0.729 0.854 21.810 16.448 3.041049e-15 0.730 0.717 0.7756 0.8049 1.0 0.87 83.55 In\u00a0[21]: Copied! <pre>%%time\n# path of the combinations and metrics files\nc_WETF = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_noStress\", \"combinations_Yield_WETF_noStress.parquet\")\nm_WETF = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_noStress\", \"metrics_Yield_WETF_noStress.parquet\")\n\n#\u00a0Filters\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;=', 1.00),\n        CCC = ('&gt;=', 0.88),\n        Accuracy = ('&gt;=', 84),\n        RMSRE = ('&lt;=', 20.4),\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"WETF\")\n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_WETF = filterSimulations(functype='WETF', VPDstress=False, cmb=c_WETF, met=m_WETF, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_WETF\n</pre> %%time # path of the combinations and metrics files c_WETF = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_noStress\", \"combinations_Yield_WETF_noStress.parquet\") m_WETF = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_noStress\", \"metrics_Yield_WETF_noStress.parquet\")  #\u00a0Filters cmb_filters = dict(                 RUE = ('RUE', '=', 3.0 ),                 TminFactor = ('TminFactor', '=', 0.25 )             ) met_filters = dict(         Cb = ('&gt;=', 1.00),         CCC = ('&gt;=', 0.88),         Accuracy = ('&gt;=', 84),         RMSRE = ('&lt;=', 20.4),     ) outputPath = os.path.join(config['RESULTS_PATH'], \"WETF\")  #\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session #\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large. #\u00a0Use dispFig=True if the filtered table is small. filtered_c_WETF = filterSimulations(functype='WETF', VPDstress=False, cmb=c_WETF, met=m_WETF,                                   cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True,                                   dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',                                  saveResults=True, outputPath=outputPath, fmt='parquet')  filtered_c_WETF <pre>Loading combinations...\nLoading metrics...\n2800 combinations found\n3 combinations found after applied filter\nFiltered data set saved at /Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_filtered/filtered_metrics_combinations_Yield_WETF_noStress_20231001.parquet\nCPU times: user 1.7 s, sys: 462 ms, total: 2.16 s\nWall time: 1.52 s\n</pre> Out[21]: UID country location loc_code cycle ObsYield RUE Tmin Topt Tmax TminFactor SimYield MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 9.0 17.0 39.0 0.25 2.51 0.662 0.717 0.847 20.317 15.750 1.266149e-15 0.739 0.721 0.6236 0.8404 1.0 0.88 84.25 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 9.0 17.0 39.0 0.25 4.35 0.662 0.717 0.847 20.317 15.750 1.266149e-15 0.739 0.721 0.6236 0.8404 1.0 0.88 84.25 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 9.0 17.0 39.0 0.25 3.13 0.662 0.717 0.847 20.317 15.750 1.266149e-15 0.739 0.721 0.6236 0.8404 1.0 0.88 84.25 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 9.0 17.0 39.0 0.25 3.67 0.662 0.717 0.847 20.317 15.750 1.266149e-15 0.739 0.721 0.6236 0.8404 1.0 0.88 84.25 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 9.0 17.0 39.0 0.25 4.21 0.662 0.717 0.847 20.317 15.750 1.266149e-15 0.739 0.721 0.6236 0.8404 1.0 0.88 84.25 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 145 46 India Pusa PUS-LS 2018 1.44 3.0 10.0 18.0 37.0 0.25 1.39 0.668 0.722 0.850 20.074 15.852 9.833239e-16 0.742 0.719 0.5450 0.8536 1.0 0.88 84.15 146 47 India Pusa PUS-LS 2019 3.10 3.0 10.0 18.0 37.0 0.25 2.95 0.668 0.722 0.850 20.074 15.852 9.833239e-16 0.742 0.719 0.5450 0.8536 1.0 0.88 84.15 147 48 India Ludhiana LDH-NS 2022 6.09 3.0 10.0 18.0 37.0 0.25 4.16 0.668 0.722 0.850 20.074 15.852 9.833239e-16 0.742 0.719 0.5450 0.8536 1.0 0.88 84.15 148 49 India Ludhiana LDH-LS 2022 4.77 3.0 10.0 18.0 37.0 0.25 2.47 0.668 0.722 0.850 20.074 15.852 9.833239e-16 0.742 0.719 0.5450 0.8536 1.0 0.88 84.15 149 50 Spain Spain SPN 2018 8.35 3.0 10.0 18.0 37.0 0.25 7.10 0.668 0.722 0.850 20.074 15.852 9.833239e-16 0.742 0.719 0.5450 0.8536 1.0 0.88 84.15 <p>150 rows \u00d7 25 columns</p> In\u00a0[22]: Copied! <pre>%%time\n\n# Path of the combinations and metrics files\nc_WETF_SFvpd = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_SFvpd\", \"combinations_Yield_WETF_SFvpd.parquet\")\nm_WETF_SFvpd = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_SFvpd\", \"metrics_Yield_WETF_SFvpd.parquet\")\n\ncmb_filters = dict(\n                RUE = ('RUE', '=', 3.0 ),\n                TminFactor = ('TminFactor', '=', 0.25 )\n            )\nmet_filters = dict(\n        Cb = ('&gt;=', 1.00),\n        CCC = ('&gt;=', 0.8),\n        Accuracy = ('&gt;=', 83),\n        RMSRE = ('&lt;=', 21.85),\n    )\noutputPath = os.path.join(config['RESULTS_PATH'], \"WETF\") \n\n#\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session\n#\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large.\n#\u00a0Use dispFig=True if the filtered table is small.\nfiltered_c_WETF_SFvpd = filterSimulations(functype='WETF', VPDstress=True, cmb=c_WETF_SFvpd, met=m_WETF_SFvpd, \n                                 cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True, \n                                 dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',\n                                 saveResults=True, outputPath=outputPath, fmt='parquet')\n\nfiltered_c_WETF_SFvpd\n</pre> %%time  # Path of the combinations and metrics files c_WETF_SFvpd = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_SFvpd\", \"combinations_Yield_WETF_SFvpd.parquet\") m_WETF_SFvpd = os.path.join(config['RESULTS_PATH'], \"WETF\", \"WETF_SFvpd\", \"metrics_Yield_WETF_SFvpd.parquet\")  cmb_filters = dict(                 RUE = ('RUE', '=', 3.0 ),                 TminFactor = ('TminFactor', '=', 0.25 )             ) met_filters = dict(         Cb = ('&gt;=', 1.00),         CCC = ('&gt;=', 0.8),         Accuracy = ('&gt;=', 83),         RMSRE = ('&lt;=', 21.85),     ) outputPath = os.path.join(config['RESULTS_PATH'], \"WETF\")   #\u00a0Use pdFormat=True to display filtered table. Use when the results are small to avoid freeze you computer session #\u00a0Use fmt='parquet' and avoid fmt='csv' when the results are quite large. #\u00a0Use dispFig=True if the filtered table is small. filtered_c_WETF_SFvpd = filterSimulations(functype='WETF', VPDstress=True, cmb=c_WETF_SFvpd, met=m_WETF_SFvpd,                                   cmb_filters=cmb_filters, met_filters=met_filters, pdFormat=True,                                   dispFig=True, saveFig=True, figname='Fig_topComb_avgYield', figfmt='pdf',                                  saveResults=True, outputPath=outputPath, fmt='parquet')  filtered_c_WETF_SFvpd <pre>Loading combinations...\nLoading metrics...\n313600 combinations found\n3 combinations found after applied filter\nFiltered data set saved at /Users/ernestogiron/Desktop/TemperatureFunctions/results/WETF/WETF_filtered/filtered_metrics_combinations_Yield_WETF_SFvpd_20231001.parquet\nCPU times: user 9.75 s, sys: 5.87 s, total: 15.6 s\nWall time: 4.59 s\n</pre> Out[22]: UID country location loc_code cycle ObsYield RUE Tmin Topt Tmax TminFactor Lvpd Uvpd SFvpd_Lthres SFvpd_Uthres SimYield MAE MSE RMSE RMSRE MAPE pvalue R2 EF intercept slope Cb CCC Accuracy 0 1 Nepal Bhairahawa BHR 2019 2.97 3.0 6.0 19.0 41.0 0.25 3.0 3.5 0.8 1.0 2.50 0.679 0.743 0.862 21.825 16.692 4.293063e-15 0.726 0.711 0.7679 0.8046 1.0 0.87 83.31 1 2 Pakistan Faisalabad FAS 2014 4.88 3.0 6.0 19.0 41.0 0.25 3.0 3.5 0.8 1.0 4.55 0.679 0.743 0.862 21.825 16.692 4.293063e-15 0.726 0.711 0.7679 0.8046 1.0 0.87 83.31 2 3 Pakistan Faisalabad FAS 2015 3.59 3.0 6.0 19.0 41.0 0.25 3.0 3.5 0.8 1.0 3.24 0.679 0.743 0.862 21.825 16.692 4.293063e-15 0.726 0.711 0.7679 0.8046 1.0 0.87 83.31 3 4 Pakistan Faisalabad FAS 2016 2.86 3.0 6.0 19.0 41.0 0.25 3.0 3.5 0.8 1.0 3.54 0.679 0.743 0.862 21.825 16.692 4.293063e-15 0.726 0.711 0.7679 0.8046 1.0 0.87 83.31 4 5 Pakistan Faisalabad FAS 2017 3.93 3.0 6.0 19.0 41.0 0.25 3.0 3.5 0.8 1.0 4.18 0.679 0.743 0.862 21.825 16.692 4.293063e-15 0.726 0.711 0.7679 0.8046 1.0 0.87 83.31 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 145 46 India Pusa PUS-LS 2018 1.44 3.0 10.0 19.0 44.0 0.25 3.0 3.5 0.8 1.0 1.45 0.667 0.729 0.854 21.810 16.448 3.041049e-15 0.730 0.717 0.7756 0.8049 1.0 0.87 83.55 146 47 India Pusa PUS-LS 2019 3.10 3.0 10.0 19.0 44.0 0.25 3.0 3.5 0.8 1.0 2.67 0.667 0.729 0.854 21.810 16.448 3.041049e-15 0.730 0.717 0.7756 0.8049 1.0 0.87 83.55 147 48 India Ludhiana LDH-NS 2022 6.09 3.0 10.0 19.0 44.0 0.25 3.0 3.5 0.8 1.0 4.40 0.667 0.729 0.854 21.810 16.448 3.041049e-15 0.730 0.717 0.7756 0.8049 1.0 0.87 83.55 148 49 India Ludhiana LDH-LS 2022 4.77 3.0 10.0 19.0 44.0 0.25 3.0 3.5 0.8 1.0 2.69 0.667 0.729 0.854 21.810 16.448 3.041049e-15 0.730 0.717 0.7756 0.8049 1.0 0.87 83.55 149 50 Spain Spain SPN 2018 8.35 3.0 10.0 19.0 44.0 0.25 3.0 3.5 0.8 1.0 7.06 0.667 0.729 0.854 21.810 16.448 3.041049e-15 0.730 0.717 0.7756 0.8049 1.0 0.87 83.55 <p>150 rows \u00d7 29 columns</p> In\u00a0[23]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'],'WETF', 'WETF_filtered')\nfigures.plot_corrTempFunct(cmb_noStress=filtered_c_WETF, cmb_noStress_filtered=filtered_c_WETF, \n                           cmb_SFvpd=filtered_c_WETF_SFvpd, cmb_SFvpd_filtered=filtered_c_WETF_SFvpd,\n                   functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=40, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'],'WETF', 'WETF_filtered') figures.plot_corrTempFunct(cmb_noStress=filtered_c_WETF, cmb_noStress_filtered=filtered_c_WETF,                             cmb_SFvpd=filtered_c_WETF_SFvpd, cmb_SFvpd_filtered=filtered_c_WETF_SFvpd,                    functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=40, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=False, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered', fmt='jpg') In\u00a0[24]: Copied! <pre>path_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF', 'WETF_filtered')\nfigures.plot_corrTempFunct(cmb_noStress=filtered_c_WETF, cmb_noStress_filtered=filtered_c_WETF, \n                           cmb_SFvpd=filtered_c_WETF_SFvpd, cmb_SFvpd_filtered=filtered_c_WETF_SFvpd,\n                   functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1, \n                   fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,\n                   path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered_errorbar', fmt='jpg')\n</pre> path_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF', 'WETF_filtered') figures.plot_corrTempFunct(cmb_noStress=filtered_c_WETF, cmb_noStress_filtered=filtered_c_WETF,                             cmb_SFvpd=filtered_c_WETF_SFvpd, cmb_SFvpd_filtered=filtered_c_WETF_SFvpd,                    functype='WETF',fld1='ObsYield',fld2='SimYield',hue='location', ncol=6, s=80, alpha=0.95, xy_lim=1,                     fonts_axes=10, fonts_titles=12, dispScore=True, errorbar=True, saveFig=True, showFig=True,                    path_to_save_results=path_to_save_results, dirname='Figures', fname='Fig_2_filtered_errorbar', fmt='jpg') In\u00a0[25]: Copied! <pre>%%time\n#\u00a0Prepare data as a input for create comparison figures by site and/or best combinations\npath_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF', 'WETF_filtered')\ndf_TDays_vs_TempResponse, df_TDays_vs_TempResponse_mean_allSites = \\\nfigures.createFigure_Type_II_WETF(sites, cmb=filtered_c_WETF, roundVal=3, maxTDay=40, saveTable=True,\n                        path_to_save_results=path_to_save_results, fmt='parquet')\ndf_TDays_vs_TempResponse.head()\n</pre> %%time #\u00a0Prepare data as a input for create comparison figures by site and/or best combinations path_to_save_results=os.path.join(config['RESULTS_PATH'], 'WETF', 'WETF_filtered') df_TDays_vs_TempResponse, df_TDays_vs_TempResponse_mean_allSites = \\ figures.createFigure_Type_II_WETF(sites, cmb=filtered_c_WETF, roundVal=3, maxTDay=40, saveTable=True,                         path_to_save_results=path_to_save_results, fmt='parquet') df_TDays_vs_TempResponse.head() <pre>Calculating average value for all simulations...\nCPU times: user 4.45 s, sys: 344 ms, total: 4.8 s\nWall time: 5.11 s\n</pre> Out[25]: TDay TempResponse UID country location loc_code cycle RUE TminFactor Tmin Topt Tmax ObsYield SimYield 0 0.0 0.0 1 Nepal Bhairahawa BHR 2019 3.0 0.25 9.0 17.0 39.0 2.97 2.53 1 0.1 0.0 1 Nepal Bhairahawa BHR 2019 3.0 0.25 9.0 17.0 39.0 2.97 2.53 2 0.2 0.0 1 Nepal Bhairahawa BHR 2019 3.0 0.25 9.0 17.0 39.0 2.97 2.53 3 0.3 0.0 1 Nepal Bhairahawa BHR 2019 3.0 0.25 9.0 17.0 39.0 2.97 2.53 4 0.4 0.0 1 Nepal Bhairahawa BHR 2019 3.0 0.25 9.0 17.0 39.0 2.97 2.53 In\u00a0[26]: Copied! <pre>%%time\nfigures.diplay_Figure_Type_II_WETF_InOneFig(cmb=filtered_c_WETF, fnct='WETF', \n                                           df_tdays=df_TDays_vs_TempResponse, \n                                           df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,\n                                           saveFig=True,showFig=True, fmt='jpg', leg_ncol=2,\n                                           path_to_save_results=path_to_save_results)\n</pre> %%time figures.diplay_Figure_Type_II_WETF_InOneFig(cmb=filtered_c_WETF, fnct='WETF',                                             df_tdays=df_TDays_vs_TempResponse,                                             df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,                                            saveFig=True,showFig=True, fmt='jpg', leg_ncol=2,                                            path_to_save_results=path_to_save_results) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 50/50 [00:28&lt;00:00,  1.76it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:00&lt;00:00,  5.93it/s]\n</pre> <pre>CPU times: user 32.7 s, sys: 928 ms, total: 33.6 s\nWall time: 33.6 s\n</pre> In\u00a0[27]: Copied! <pre>%%time\n#cmb = [cmb_WETF_noStress['UID']==uid].reset_index(drop=True)\nfigures.display_FigTDay_vs_TempResponseBySiteYrs_WETF(cmb=filtered_c_WETF, df_tdays=df_TDays_vs_TempResponse, \n                                         roundVal=2, maxTDay=40, fnct='WETF', \n                                         saveFig=True, showFig=True, fmt='jpg', cols=5, leg_ncol=2,\n                                         path_to_save_results=path_to_save_results)\n</pre> %%time #cmb = [cmb_WETF_noStress['UID']==uid].reset_index(drop=True) figures.display_FigTDay_vs_TempResponseBySiteYrs_WETF(cmb=filtered_c_WETF, df_tdays=df_TDays_vs_TempResponse,                                           roundVal=2, maxTDay=40, fnct='WETF',                                           saveFig=True, showFig=True, fmt='jpg', cols=5, leg_ncol=2,                                          path_to_save_results=path_to_save_results) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:54&lt;00:00,  5.46s/it]\n</pre> <pre>CPU times: user 1min 2s, sys: 2.47 s, total: 1min 5s\nWall time: 1min 7s\n</pre> In\u00a0[28]: Copied! <pre>uid = 1\ndf0 = filtered_c_WETF[filtered_c_WETF['UID']==uid].reset_index(drop=True)\nfigures.diplay_Figure_Type_II_WETF_InOneFig(cmb=df0, fnct='WETF', \n                                           df_tdays=df_TDays_vs_TempResponse, \n                                           df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,\n                                           saveFig=True,showFig=True, fmt='jpg', leg_ncol=2,\n                                           path_to_save_results=path_to_save_results) #fname = \"Figure_WETF_SiteYrs_Comparison\"\n</pre> uid = 1 df0 = filtered_c_WETF[filtered_c_WETF['UID']==uid].reset_index(drop=True) figures.diplay_Figure_Type_II_WETF_InOneFig(cmb=df0, fnct='WETF',                                             df_tdays=df_TDays_vs_TempResponse,                                             df_tdays_mean=df_TDays_vs_TempResponse_mean_allSites,                                            saveFig=True,showFig=True, fmt='jpg', leg_ncol=2,                                            path_to_save_results=path_to_save_results) #fname = \"Figure_WETF_SiteYrs_Comparison\"  <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:00&lt;00:00,  4.12it/s]\n</pre> In\u00a0[29]: Copied! <pre>print(filtered_c_WETF['Tmin'].sort_values().unique())\nprint(filtered_c_WETF['Topt'].sort_values().unique())\nprint(filtered_c_WETF['Tmax'].sort_values().unique())\nprint(filtered_c_WETF_SFvpd['Tmin'].sort_values().unique())\nprint(filtered_c_WETF_SFvpd['Topt'].sort_values().unique())\nprint(filtered_c_WETF_SFvpd['Tmax'].sort_values().unique())\nprint(filtered_c_WETF_SFvpd['Lvpd'].sort_values().unique())\nprint(filtered_c_WETF_SFvpd['Uvpd'].sort_values().unique())\nprint(filtered_c_WETF_SFvpd['SFvpd_Lthres'].sort_values().unique())\nprint(filtered_c_WETF_SFvpd['SFvpd_Uthres'].sort_values().unique())\n</pre> print(filtered_c_WETF['Tmin'].sort_values().unique()) print(filtered_c_WETF['Topt'].sort_values().unique()) print(filtered_c_WETF['Tmax'].sort_values().unique()) print(filtered_c_WETF_SFvpd['Tmin'].sort_values().unique()) print(filtered_c_WETF_SFvpd['Topt'].sort_values().unique()) print(filtered_c_WETF_SFvpd['Tmax'].sort_values().unique()) print(filtered_c_WETF_SFvpd['Lvpd'].sort_values().unique()) print(filtered_c_WETF_SFvpd['Uvpd'].sort_values().unique()) print(filtered_c_WETF_SFvpd['SFvpd_Lthres'].sort_values().unique()) print(filtered_c_WETF_SFvpd['SFvpd_Uthres'].sort_values().unique()) <pre>[ 9. 10.]\n[17. 18.]\n[37. 39.]\n[ 6.  9. 10.]\n[19.]\n[41. 43. 44.]\n[3.]\n[3.5]\n[0.8]\n[1.]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/Using%20WETF/#estimating-grain-yield-using-wetf","title":"Estimating grain yield using WETF\u00b6","text":"<p>Here we use the temperature Wang-Engel temperature function with different cardinal temperature combinations with and without VPD stress function for the period from heading to maturity (grain filling period).</p> <p>Authors:</p> <ul> <li>Azam Lashkari (CIMMYT-China, azam.lashkari@jic.ac.uk)</li> <li>Urs Christoph Schulthess (CIMMYT-China, U.Schulthess@cgiar.org)</li> <li>Ernesto Giron Echeverry (Independent Researcher, e.giron.e@gmail.com)</li> </ul> <p>Last updated: September 29, 2023</p>"},{"location":"notebooks/Using%20WETF/#load-libraries","title":"Load libraries\u00b6","text":""},{"location":"notebooks/Using%20WETF/#load-phenology-ndvi-and-weather-example-datasets","title":"Load Phenology, NDVI and Weather example datasets\u00b6","text":""},{"location":"notebooks/Using%20WETF/#create-a-model","title":"Create a model\u00b6","text":"<p>The model contains all of the required functions to analyse the data</p>"},{"location":"notebooks/Using%20WETF/#wang-engel-temperature-function-weft","title":"Wang-Engel temperature function (WEFT)\u00b6","text":"<p>Calculating grain yield using a simplified Arrhenius-type function, developed for responses to temperature and depending on minimum, optimum, and maximum temperatures (Wang et al., 2017)</p>"},{"location":"notebooks/Using%20WETF/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Using%20WETF/#stressed-vpd","title":"Stressed VPD\u00b6","text":""},{"location":"notebooks/Using%20WETF/#display-grain-yield","title":"Display Grain Yield\u00b6","text":"<p>Create a figure to compare simulated grain yield against observed.</p>"},{"location":"notebooks/Using%20WETF/#combinations","title":"Combinations\u00b6","text":"<p>To establish the optimum temperature response for grain-filling period, you can run several models using a wide range of cardinal temperatures.</p> <p>The optimum temperature for photosynthesis depends on the choosen temperature function.</p>"},{"location":"notebooks/Using%20WETF/#wetf-combinations","title":"WETF combinations\u00b6","text":""},{"location":"notebooks/Using%20WETF/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Using%20WETF/#no-stress-metrics","title":"No stress Metrics\u00b6","text":""},{"location":"notebooks/Using%20WETF/#stressed-vapor-pressure-deficit-vpd","title":"stressed Vapor pressure deficit (VPD)\u00b6","text":""},{"location":"notebooks/Using%20WETF/#display-grain-yield-comparison-with-and-without-vpd-stress","title":"Display grain yield comparison with and without VPD stress\u00b6","text":""},{"location":"notebooks/Using%20WETF/#select-the-best-results-using-filters","title":"Select the best results using filters\u00b6","text":"<p>After running several models you can filter results to see which one look better.</p> <p>The following table is an example of one filter used to evaluate the best models, it only use three (3) evaluation metrics (Cb, CCC, and RMSRE) to select the top ones.</p> Temperature Function Cb CCC RMSRE WETF 0.98 &gt; 0.8 WETF vpd stress 0.98 &gt; 0.8 &lt; 21.5"},{"location":"notebooks/Using%20WETF/#filter-wetf-manually","title":"filter WETF manually\u00b6","text":""},{"location":"notebooks/Using%20WETF/#no-stress-conditions","title":"No stress conditions\u00b6","text":""},{"location":"notebooks/Using%20WETF/#vpd-stress-conditions","title":"VPD stress conditions\u00b6","text":""},{"location":"notebooks/Using%20WETF/#comparison-of-the-best-combinations","title":"Comparison of the best combinations\u00b6","text":""},{"location":"notebooks/Using%20WETF/#conclusion","title":"Conclusion\u00b6","text":"<p>Congratulations! You have run a simulation using a prebuilt dataset and the Temperature Functions API.</p>"},{"location":"notebooks/Using%20WETF/#type-2-three-cardinal-temperatures","title":"Type 2- Three cardinal temperatures\u00b6","text":"Model Parameters No stress VPD stress RUE 3.0 3.0 TminFactor 0.25 0.25 Tmin 9-10 \u00b0C 6-10 \u00b0C Topt 17-18 \u00b0C 19 \u00b0C Tmax 37-39 \u00b0C 41-44 \u00b0C SFvpdL 0.8 SFvpdU 1 VPDL 3 kPa VPDU 3.5 kPa"},{"location":"reference/","title":"API reference","text":""},{"location":"reference/#temperature-response-functions-classes","title":"Temperature Response Functions classes","text":""},{"location":"reference/#tfunct.Site","title":"<code>Site(uid, attributes, params=None)</code>","text":"<p>             Bases: <code>object</code></p> <p>Site class</p> <p>Object containing attributes and functions related to the nursery site.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>integer</code> <p>The unique identifier for the site.</p> <code>attributes</code> <code>object</code> <p>The default attributes for each location in IWIN dataset.</p> <code>params</code> <code>dictionary</code> <p>The parameters to use during calculations.</p> <code>pheno_dates</code> <code>array</code> <p>The phenology dates of the trial.</p> <code>weather</code> <code>array</code> <p>Table with daily weather data for each location.</p> <code>raw_ndvi</code> <code>array</code> <p>NDVI values during growing period.</p> <code>inputWPN</code> <code>object</code> <p>A dataframe with phenology, NDVI and weather data for each site.</p> <code>errors</code> <code>dictionary</code> <p>Dictionary with different errors presented during the model processing.</p> <p>Methods:</p> Name Description <code>getAttr </code> <p>Get the attibutes of the site</p>"},{"location":"reference/#tfunct.Site.getTDay","title":"<code>getTDay(m=None, tminFactor=None)</code>","text":"<p>Calculate day time temperature for the selected site.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>Model with information to estimate grain yield</p> <code>None</code> <code>tminFactor</code> <code>float</code> <p>Minimum Temperature factor</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>A number or array of Day Temperature</p>"},{"location":"reference/#tfunct.Site.getPRFT","title":"<code>getPRFT(m=None, TDay=None, TOpt=None)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT) for each site.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model</p> <code>None</code> <code>TDay</code> <code>float</code> <p>Number or array of Day Temperatures</p> <code>None</code> <code>TOpt</code> <code>float</code> <p>Optimum Temperature. Default value 18</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>A number or array of PRFT</p>"},{"location":"reference/#tfunct.Site.getSFvpd","title":"<code>getSFvpd(m=None, VPDMAX=None, Lvpd=None, Uvpd=None, SFvpd_Lthres=None, SFvpd_Uthres=None)</code>","text":"<p>Calculation of Vapor pressure deficit (VPD) stress factor for each site</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model</p> <code>None</code> <code>VPDMAX</code> <code>array</code> <p>Array of daily temperature values</p> <code>None</code> <code>Lvpd</code> <code>float</code> <p>A number for threshold of lower VPD. Default is 1</p> <code>None</code> <code>Uvpd</code> <code>array</code> <p>A number for threshold of upper VPD. Default is 4</p> <code>None</code> <code>SFvpd_Lthres</code> <code>array</code> <p>A number for threshold of stress factor of lower VPD. Default is 0.2</p> <code>None</code> <code>SFvpd_Uthres</code> <code>array</code> <p>A number for threshold of stress factor of upper VPD. Default is 1</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>A number or array of stressed factors of VPD</p>"},{"location":"reference/#tfunct.Site.getGPP","title":"<code>getGPP(m=None, SolRad=None, PRFT=None, iPAR=None, RUE=3.0, stressFactor=1.0, SFvpd=None, is_VPDStress=False)</code>","text":"<p>Estimate the Gross primary production (GPP) for each site</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model</p> <code>None</code> <code>SolRad</code> <code>float</code> <p>Solar Radiation</p> <code>None</code> <code>PRFT</code> <code>float</code> <p>Photosynthesis reduction factor</p> <code>None</code> <code>iPAR</code> <code>float</code> <p>the photosynthetically active radiation (PAR) intercepted by a plant or crop</p> <code>None</code> <code>RUE</code> <code>float</code> <p>Radiation-use efficiency. Default value is 3.0</p> <code>3.0</code> <code>stressFactor</code> <code>float</code> <p>Stress Factor</p> <code>1.0</code> <code>SFvpd</code> <code>float</code> <p>Stress Factor for VPD</p> <code>None</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor pressure deficit stress. Default is <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>float</code> <p>the gross primary production (GPP)</p>"},{"location":"reference/#tfunct.Site.fit","title":"<code>fit(m=None, ft='PRFT', is_VPDStress=False, verbose=False)</code>","text":"<p>Run a model to fit yield for a selected site using a specific temperature function</p> Deprecated. <p>This function was depreciated on Dec, 2022.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>Model to run</p> <code>None</code> <code>ft</code> <code>str</code> <p>Name of the temperature response function: Default is 'PRFT'</p> <code>'PRFT'</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor pressure deficit stress. Default is <code>False</code></p> <code>False</code> <code>verbose</code> <code>bool</code> <p>Display comments during processing</p> <code>False</code> <p>Returns:</p> Type Description <code>array</code> <p>An array of Sites with intermediate results</p>"},{"location":"reference/#tfunct.__main__","title":"<code>__main__</code>","text":""},{"location":"reference/#tfunct.__main__.PathType","title":"<code>PathType</code>","text":"<p>             Bases: <code>Path</code></p> <p>A Click path argument that returns a pathlib Path, not a string</p>"},{"location":"reference/#tfunct.data","title":"<code>data</code>","text":""},{"location":"reference/#tfunct.data.load_dataset","title":"<code>load_dataset()</code>","text":"<p>Load example (Phenology, NDVI, and Weather) datasets from International Wheat Improvement Network (IWIN) sites and  the other locations across the globe to estimate yield under non-stressed and Vapor pressure Deficit (VPD)  stressed conditions as a function of temperature.</p> Return <p>A data dictionary with all raw data and information needed to carry out the demo.</p> <p>Examples:</p> <pre><code>    &gt;&gt;&gt; from tfunct.data import load_dataset\n    &gt;&gt;&gt; #\u00a0Load example dataset (Phenology, NDVI and Weather data for each site)\n    &gt;&gt;&gt; data = load_dataset()\n    &gt;&gt;&gt; print(data.keys()) # dict_keys(['Pheno', 'NDVI', 'Weather'])\n    &gt;&gt;&gt; # Display Pheno data\n    &gt;&gt;&gt; data['Pheno']\n    &gt;&gt;&gt; # Display NDVI data\n    &gt;&gt;&gt; data['NDVI']\n    &gt;&gt;&gt; # Display Weather data\n    &gt;&gt;&gt; data['Weather']\n</code></pre>"},{"location":"reference/#tfunct.model","title":"<code>model</code>","text":""},{"location":"reference/#tfunct.model.Model","title":"<code>Model(config, params=None)</code>","text":"<p>             Bases: <code>object</code></p>"},{"location":"reference/#tfunct.model.Model.load_raw_datasets","title":"<code>load_raw_datasets()</code>","text":"<p>Load raw phenology and AgERA5 datasets </p> Return <p>A existing dataset including WeatherFile, PhenoFile, NDVIFile. The raw data can be seen in config object. eg. config['PhenoFile']</p>"},{"location":"reference/#tfunct.model.Model.preprocess_raw_datasets","title":"<code>preprocess_raw_datasets(data)</code>","text":"<p>Preprocess raw datasets </p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dictionary</code> <p>The phenology, ndvi and weather data for each location in example dataset.</p> required Return <p>A dataset in a specific format for the tfunct package</p>"},{"location":"reference/#tfunct.model.Model.getTDay","title":"<code>getTDay(m=None, w=None, tminFactor=None)</code>","text":"<p>Calculate day time temperature</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model with sites and the necessary information</p> <code>None</code> <code>w</code> <code>array</code> <p>Table of weather data with minimum and maximum temperature records</p> <code>None</code> <code>tminFactor</code> <code>float</code> <p>Minimum Temperature factor. Default is usually 0.25.                  It can be reviewed in configuration parameters such as <code>TMIN_PERC_FACTOR</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>A number or array of Day Temperature</p>"},{"location":"reference/#tfunct.model.Model.getIPAR","title":"<code>getIPAR(m=None, ndvi=None)</code>","text":"<p>Total light interception - iPAR</p> Reference <p>iPAR = NDVI * 1.25 - 0.19 # between heading and maturity (Campos et al. 2018)</p> <p>iPAR = NDVI * 1.25 - 0.21 Daughtry et al. (1992)</p> <ul> <li> <p>Asrar, G., Fuchs, M., Kanemasu, E.T., Hatfield, J.L., 1984.  Estimating absorbed photosynthetic radiation and leaf area index from spectral reflectance  in wheat. Agron. J. 76, 30-306.</p> </li> <li> <p>Campos 2018 Remote sensing-based crop biomass with water or light-driven crop growth models in  wheat commercial fields.</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model </p> <code>None</code> <code>ndvi</code> <code>array</code> <p>Array of float values</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>An array of Total light interception values</p>"},{"location":"reference/#tfunct.model.Model.getYield","title":"<code>getYield(tfun='PRFT', sites=None, is_VPDStress=False, expCSV=True)</code>","text":"<p>Get yield using a defined temperature function and default parameters</p> <p>Parameters:</p> Name Type Description Default <code>tfun</code> <code>str</code> <p>Name of the temperature function</p> <code>'PRFT'</code> <code>sites</code> <code>dictionary</code> <p>List of sites with the basic information to estimate yield.</p> <code>None</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor Pressure Deficit stress. Default is False.</p> <code>False</code> <code>expCSV</code> <code>bool</code> <p>Export grain yield results in an individual file. Default is True.</p> <code>True</code> <p>Returns:</p> Type Description <code>array</code> <p>A dataframe with simulated grain yield values</p>"},{"location":"reference/#tfunct.model.Model.runCombinations_PRFT","title":"<code>runCombinations_PRFT(data=None, sites=None, comb=None, is_VPDStress=False, expCSV=True, individualCSV=False, target=None)</code>","text":"<p>Run several combinations using different parameters for PRFT model </p> Deprecated <p>Stop using this function.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>object</code> <p>Array of base data.</p> <code>None</code> <code>sites</code> <code>object</code> <p>Array of sites</p> <code>None</code> <code>comb</code> <code>object</code> <p>Array of combinations</p> <code>None</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor Pressure Deficit stress. Default is False</p> <code>False</code> <code>expCSV</code> <code>bool</code> <p>Save results in CSV format. Default is True</p> <code>True</code> <code>individualCSV</code> <code>bool</code> <p>Default is False</p> <code>False</code> <code>target</code> <code>str</code> <p>Name of the target device. Available values are <code>cpu</code>, <code>parallel</code> and <code>cuda</code>. Default is <code>cpu</code></p> <code>None</code> <p>Returns:</p> Type Description <code>object</code> <p>A dataframe with estimated grain yield of all combinations.</p>"},{"location":"reference/#tfunct.model.Model.fit","title":"<code>fit(data=None, sites=None, comb=None, ft='PRFT', is_VPDStress=False, expCSV=True, individualCSV=False, n_jobs=4, verbose=False)</code>","text":"<p>Run a model to fit yield</p> Deprecated on Dec, 2022. <p>Stop using this function.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>object</code> <p>Array of base data.</p> <code>None</code> <code>sites</code> <code>object</code> <p>Array of sites</p> <code>None</code> <code>comb</code> <code>object</code> <p>Array of combinations</p> <code>None</code> <code>ft</code> <code>str</code> <p>Name of the temperature response function. Default is 'PRFT'. </p> <code>'PRFT'</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor Pressure Deficit stress. Default is False</p> <code>False</code> <code>expCSV</code> <code>bool</code> <p>Save results in CSV format. Default is True</p> <code>True</code> <code>individualCSV</code> <code>bool</code> <p>Default is False</p> <code>False</code> <code>n_jobs</code> <code>int</code> <p>Number of CPU cores to use in paralell processing. Default is 4.</p> <code>4</code> <code>verbose</code> <code>bool</code> <p>Display comments during processing. Default is False</p> <code>False</code> <p>Returns:</p> Type Description <code>array</code> <p>An array of sites with intermediate results</p>"},{"location":"reference/#tfunct.model.Model.setup_dataInput_forCombinations","title":"<code>setup_dataInput_forCombinations(sites)</code>","text":"<p>Set up data for each sites to estimate grain yield from different combinations</p> <p>Parameters:</p> Name Type Description Default <code>sites</code> <code>dictionary</code> required Return <p>Array of arrays with weather, iPAR and GPP data</p>"},{"location":"reference/#tfunct.model.Model.getCombinations","title":"<code>getCombinations(functype='PRFT', cols=None, RUE=None, Tmin=None, Toptmin=None, Topt=None, Toptmax=None, Tmax=None, TminFactor=None, Lvpd=None, Uvpd=None, SFvpd_Lthres=None, SFvpd_Uthres=None, isVPDStress=False)</code>","text":"<p>Generate combinations to establish the optimum temperature response for grain-filling period  and estimate grain yield.</p> <p>Parameters:</p> Name Type Description Default <code>functype</code> <code>str</code> <p>Type of temperature response function (eg. PRFT, WETF, TPF)</p> <code>'PRFT'</code> <code>cols</code> <code>int</code> <p>Number of daily records in growing period</p> <code>None</code> <code>RUE</code> <code>array</code> <p>Array of RUE values</p> <code>None</code> <code>Tmin</code> <code>array</code> <p>Array of minimum temperature values</p> <code>None</code> <code>Toptmin</code> <code>array</code> <p>Array of Optimun minimum temperature values</p> <code>None</code> <code>Topt</code> <code>array</code> <p>Array of Optimun temperature values</p> <code>None</code> <code>Toptmax</code> <code>array</code> <p>Array of Optimun maximum temperature values</p> <code>None</code> <code>Tmax</code> <code>array</code> <p>Array of maximum temperature values</p> <code>None</code> <code>TminFactor</code> <code>array</code> <p>Array of minimum temperature factor</p> <code>None</code> <code>Lvpd</code> <code>array</code> <p>Array of lower VPD values</p> <code>None</code> <code>Uvpd</code> <code>array</code> <p>Array of lower VPD values</p> <code>None</code> <code>SFvpd_Lthres</code> <code>array</code> <p>Array of lower VPD stress factor values</p> <code>None</code> <code>SFvpd_Uthres</code> <code>array</code> <p>Array of lower VPD stress factor values</p> <code>None</code> <code>isVPDStress</code> <code>bool</code> <p>True/False value for using VPD stress condition</p> <code>False</code> Return <p>Array of combinations and an array to save results</p>"},{"location":"reference/#tfunct.model.Model.getGYield_forCombinations","title":"<code>getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, isVPDStress, array_results, saveFile=True, returnDF=True, fmt='parquet')</code>","text":"<p>Estimate grain yield using parameters for each combinations</p> <p>Parameters:</p> Name Type Description Default <code>df_GYield</code> <code>array</code> <p>Dataframe with observed grain yield</p> required <code>data_input</code> <code>array</code> <p>Array of inputs containing weather, iPAR, PRFT and GPP data for each site.</p> required <code>array_params_to_run</code> <code>array</code> <p>Array of combinations (RUE, TOpt and TminFactor) to simulate</p> required <code>isVPDStress</code> <code>bool</code> <p>True/False value for using VPD stress condition</p> required <code>array_results</code> <code>array</code> <p>Array used to save results</p> required <code>saveFile</code> <code>bool</code> <p>True if save file in results folder</p> <code>True</code> <code>returnDF</code> <code>bool</code> <p>True if return a pandas dataframe. Use False when the combinations are too large.</p> <code>True</code> <code>fmt</code> <code>str</code> <p>Format to save file. Comma separate value (csv) or Apache parquet (parquet).         Default is <code>parquet</code></p> <code>'parquet'</code> Return <p>A dataframe or table with results</p>"},{"location":"reference/#tfunct.model.Model.getCombinations_Metrics","title":"<code>getCombinations_Metrics(functype, isVPDStress, df_GYield, array_params_to_run, array_results, saveFile=True, fmt='parquet')</code>","text":"<p>Get evaluation metrics for each simulation</p> <p>Parameters:</p> Name Type Description Default <code>functype</code> <code>str</code> <p>Type of temperature response function (eg. PRFT, WETF, TPF)</p> required <code>isVPDStress</code> <code>bool</code> <p>True/False value for using VPD stress condition</p> required <code>df_GYield</code> <code>array</code> <p>Dataframe with observed grain yield</p> required <code>array_params_to_run</code> <code>array</code> <p>Array of combinations (RUE, TOpt and TminFactor) to simulate</p> required <code>array_results</code> <code>array</code> <p>Array used to save results</p> required <code>saveFile</code> <code>bool</code> <p>True if save file in results folder</p> <code>True</code> <code>fmt</code> <code>str</code> <p>Format to save file. Comma separate value (csv) or Apache parquet (parquet).         Default is <code>parquet</code></p> <code>'parquet'</code> Return <p>A dataframe with several metrics </p> <p>Returns:</p> Name Type Description <code>MAE</code> <code>float</code> <p>Mean Absolute Error</p> <code>MSE</code> <code>float</code> <p>Mean Squared Error</p> <code>RMSE</code> <code>float</code> <p>Root Mean Squared Error</p> <code>RMSRE</code> <code>float</code> <p>Root Mean Squared Relative Error</p> <code>MAPE</code> <code>float</code> <p>Mean Absolute Percentage Error</p> <code>pvalue</code> <code>float</code> <p>p-value </p> <code>R2</code> <code>float</code> <p>R Squared metric</p> <code>EF</code> <code>float</code> <p>Nash-Sutcliffe metric</p> <code>intercept</code> <code>float</code> <p>Intercept of the regression model</p> <code>slope</code> <code>float</code> <p>Slope of the regression model</p> <code>Cb</code> <code>float</code> <p>A bias correction factor</p> <code>CCC</code> <code>float</code> <p>Concordance correlation coefficient</p> <code>Accuracy</code> <code>float</code> <p>Accuracy in percentage</p>"},{"location":"reference/#tfunct.model.gpp","title":"<code>gpp</code>","text":""},{"location":"reference/#tfunct.model.gpp.calcGPP","title":"<code>calcGPP(SolRad, TF, iPAR, RUE=3.0, stressFactor=1.0)</code>","text":"<p>Estimate the Gross primary production</p> <p>Parameters:</p> Name Type Description Default <code>SolRad</code> <code>float</code> <p>Solar Radiation</p> required <code>TF</code> <code>float</code> <p>Temperature function result (PRFT, WETF, TPF)</p> required <code>iPAR</code> <code>float</code> <p>the photosynthetically active radiation (PAR) intercepted by a plant or crop estimated from NDVI</p> required <code>RUE</code> <code>float</code> <p>Radiation-use efficiency. Default value is 3.0 gMJ^\u22121</p> <code>3.0</code> <code>stressFactor</code> <code>float</code> <p>Stress Factor (eg. VPD stress factor)</p> <code>1.0</code> Deprecated. <p>This function only use one value for each paramters. it is not optimized for run models in parallel.</p> <p>Returns:</p> Type Description <code>float</code> <p>the gross primary production (GPP)</p>"},{"location":"reference/#tfunct.model.gpp.apply_GPP_v0","title":"<code>apply_GPP_v0(SolRad, PRFT, iPAR, RUE=3.0, stressFactor=1.0)</code>","text":""},{"location":"reference/#tfunct.model.gpp.calculateGPP","title":"<code>calculateGPP(SolRad, PRFT, iPAR, RUE=3.0, stressFactor=1.0)</code>","text":"<p>Estimate the Gross primary production.  The accumulated dry matter from heading to maturity</p> <pre><code># GPP = Solar Radiation \u00d7 TemFun \u00d7 VPD_StressFactor \u00d7 iPAR_fromNDVI \u00d7 RUE \nGPP = SolRad * 0.5 * RUE * PRFT * iPAR * stressFactor\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>SolRad</code> <code>float</code> <p>Solar Radiation</p> required <code>PRFT</code> <code>float</code> <p>Photosynthesis reduction factor</p> required <code>iPAR</code> <code>float</code> <p>the photosynthetically active radiation (PAR) intercepted by a plant or crop</p> required <code>RUE</code> <code>float</code> <p>Radiation-use efficiency. Default value is 3.0 gMJ^-1</p> <code>3.0</code> <code>stressFactor</code> <code>float</code> <p>Stress Factor</p> <code>1.0</code> <p>Returns:</p> Type Description <code>float</code> <p>a number or array of values with the gross primary production (GPP)</p>"},{"location":"reference/#tfunct.model.gpp.applyGPP_VPDStress","title":"<code>applyGPP_VPDStress(SolRad, PRFT, iPAR, SFvpd, RUE=3.0)</code>","text":""},{"location":"reference/#tfunct.model.gpp.calculateGPP_VPDStress","title":"<code>calculateGPP_VPDStress(SolRad, PRFT, iPAR, SFvpd, RUE=3.0)</code>","text":"<p>Estimate the Gross primary production with stressed VPD</p> <pre><code>GPP = SolRad * 0.5 * RUE * PRFT * iPAR * SFvpd\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>SolRad</code> <code>float</code> <p>Solar Radiation</p> required <code>PRFT</code> <code>float</code> <p>Photosynthesis reduction factor</p> required <code>iPAR</code> <code>float</code> <p>the photosynthetically active radiation (PAR) intercepted by a plant or crop</p> required <code>RUE</code> <code>float</code> <p>Radiation-use efficiency. Default value is 3.0</p> <code>3.0</code> <code>SFvpd</code> <code>float</code> <p>Vapor Pressure Deficit (VPD) stress factor</p> required <p>Returns:</p> Type Description <code>float</code> <p>a number or array of values with the gross primary production (GPP)</p>"},{"location":"reference/#tfunct.model.gpp.estimate","title":"<code>estimate(data, params, is_VPDStress, tf, results)</code>","text":"<p>An optimized function for estimating GPP for all observations using one of the three  Temperature Function (TF) such as PRFT, WETF and TPF.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>object</code> <p>Array of arrays containing tn, tx, ndvi, solrad, VPDx, ipar, GPP datasets</p> required <code>params</code> <code>object</code> <p>An array with RUE, tminFactor, Topt, Lvpd, Uvpd, SFvpd_Lthres, SFvpd_Uthres values</p> required <code>is_VPDStress</code> <code>array</code> <p>Array of one value with T/F if Vapor Pressure Deficit stress affecting grain yield. Default is [False].</p> required <code>tf</code> <code>array</code> <p>Array of one value representing the type of function. [1]: PRFT; [2]: WETF; [3]: TPF.</p> required <code>results</code> <code>array</code> <p>Empty array for outputs.</p> required <p>Returns:</p> Name Type Description <code>results</code> <code>array</code> <p>An array with estimated yield for each site.</p>"},{"location":"reference/#tfunct.model.gyield","title":"<code>gyield</code>","text":""},{"location":"reference/#tfunct.model.gyield.estimate","title":"<code>estimate(data, params, is_VPDStress, tf, results)</code>","text":"<p>An optimized function for estimating grain yield in one step for all observations using one of the three  Temperature Function (TF) such as PRFT, WETF and TPF.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>object</code> <p>Array of arrays containing tn, tx, ndvi, solrad, VPDx, ipar, GPP datasets</p> required <code>params</code> <code>object</code> <p>An array with RUE, tminFactor, Topt, Lvpd, Uvpd, SFvpd_Lthres, SFvpd_Uthres values</p> required <code>is_VPDStress</code> <code>array</code> <p>Array of one value with T/F if Vapor Pressure Deficit stress affecting grain yield. Default is [False].</p> required <code>tf</code> <code>array</code> <p>Array of one value representing the type of function. [1]: PRFT; [2]: WETF; [3]: TPF.</p> required <code>results</code> <code>array</code> <p>Empty array for outputs.</p> required <p>Returns:</p> Name Type Description <code>results</code> <code>array</code> <p>An array with estimated yield for each site.</p>"},{"location":"reference/#tfunct.model.ipar","title":"<code>ipar</code>","text":""},{"location":"reference/#tfunct.model.ipar.calcIPAR","title":"<code>calcIPAR(ndvi)</code>","text":"<p>Total light interception - iPAR</p> Reference <p>iPAR = NDVI * 1.25 - 0.19 # between heading and maturity (Campos et al. 2018)</p> <p>iPAR = NDVI * 1.25 - 0.21 Daughtry et al. (1992)</p> <ul> <li> <p>Asrar, G., Fuchs, M., Kanemasu, E.T., Hatfield, J.L., 1984.  Estimating absorbed photosynthetic radiation and leaf area index from spectral reflectance  in wheat. Agron. J. 76, 30-306.</p> </li> <li> <p>Campos 2018 Remote sensing-based crop biomass with water or light-driven crop growth models in      wheat commercial fields.</p> </li> </ul> Deprecated. <p>Stop using this function. This function estimate iPAR using only one value for each parameters.</p> <p>Parameters:</p> Name Type Description Default <code>ndvi</code> <code>array</code> <p>Array of float values</p> required <p>Returns:</p> Type Description <code>array</code> <p>An array of Total light interception values</p>"},{"location":"reference/#tfunct.model.ipar.estimate_IPAR","title":"<code>estimate_IPAR(ndvi=None)</code>","text":"<p>Total light interception - iPAR.</p> <p>It is assumed that NDVI at maturity is 0.25.</p> Reference <p>iPAR = NDVI * 1.25 - 0.19 # between heading and maturity (Campos et al. 2018)</p> <p>iPAR = NDVI * 1.25 - 0.21 Daughtry et al. (1992)</p> <ul> <li> <p>Asrar, G., Fuchs, M., Kanemasu, E.T., Hatfield, J.L., 1984.  Estimating absorbed photosynthetic radiation and leaf area index from spectral reflectance  in wheat. Agron. J. 76, 30-306.</p> </li> <li> <p>Campos 2018 Remote sensing-based crop biomass with water or light-driven crop growth models in      wheat commercial fields.</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>ndvi</code> <code>array</code> <p>Array of float values</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>An array of Total light interception values</p>"},{"location":"reference/#tfunct.model.prft","title":"<code>prft</code>","text":""},{"location":"reference/#tfunct.model.prft.calcPRFT","title":"<code>calcPRFT(TDay, TOpt=18)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT) <pre><code>PRFT = 1 - 0.0025 * (TDay - TOpt)^2\n</code></pre></p> Deprecated. <p>Stop using this function. This function estimate PRFT using only one value for each parameters.</p> <p>Parameters:</p> Name Type Description Default <code>TDay</code> <code>float</code> <p>Number or array of Day Temperatures</p> required <code>TOpt</code> <code>float</code> <p>Optimum Temperature. Default value 18</p> <code>18</code> <p>Returns:</p> Type Description <code>float</code> <p>A number or array of PRFT</p>"},{"location":"reference/#tfunct.model.prft.calculatePRFT","title":"<code>calculatePRFT(Tday, Topt=18)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT) in parallel.</p> <pre><code>PRFT = 1 - 0.0025 * (TDay - TOpt)^2\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>Tday</code> <code>float</code> <p>Number or array of Day Temperatures</p> required <code>Topt</code> <code>float</code> <p>Optimum Temperature. Default value 18</p> <code>18</code> <p>Returns:</p> Type Description <code>float</code> <p>A number or array of PRFT</p>"},{"location":"reference/#tfunct.model.sfvpd","title":"<code>sfvpd</code>","text":""},{"location":"reference/#tfunct.model.sfvpd.calcSFvpd","title":"<code>calcSFvpd(VPDx, Lvpd, Uvpd, SFvpd_Lthres, SFvpd_Uthres)</code>","text":""},{"location":"reference/#tfunct.model.sfvpd.getSFvpd","title":"<code>getSFvpd(VPDx, Lvpd, Uvpd, SFvpd_Lthres, SFvpd_Uthres)</code>","text":""},{"location":"reference/#tfunct.model.sfvpd.apply_SFvpd","title":"<code>apply_SFvpd(VPDMAX, Lvpd=1, Uvpd=4, SFvpd_Lthres=0.2, SFvpd_Uthres=1)</code>","text":""},{"location":"reference/#tfunct.model.sfvpd.calculateSFvpd","title":"<code>calculateSFvpd(VPDMAX, Lvpd=1, Uvpd=4, SFvpd_Lthres=0.2, SFvpd_Uthres=1)</code>","text":"<p>Calculation of Vapor pressure deficit (VPD) stress factor</p> <p>Parameters:</p> Name Type Description Default <code>VPDMAX</code> <code>array</code> <p>Array of daily temperature values</p> required <code>Lvpd</code> <code>float</code> <p>A number for threshold of lower VPD. Default is 1</p> <code>1</code> <code>Uvpd</code> <code>array</code> <p>A number for threshold of upper VPD. Default is 4</p> <code>4</code> <code>SFvpd_Lthres</code> <code>array</code> <p>A number for threshold of stress factor of lower VPD. Default is 0.2</p> <code>0.2</code> <code>SFvpd_Uthres</code> <code>array</code> <p>A number for threshold of stress factor of upper VPD. Default is 1</p> <code>1</code> <p>Returns:</p> Type Description <code>array</code> <p>A number or array of stressed factors of VPD</p>"},{"location":"reference/#tfunct.model.tday","title":"<code>tday</code>","text":""},{"location":"reference/#tfunct.model.tday.calcTDay","title":"<code>calcTDay(Tmin, Tmax, tminFactor=0.25)</code>","text":"<p>Calculate day time temperature.  TDay is a function of weighted Tmin and weighted Tmax.</p> <pre><code> TDay = 0.75 * Tmax + 0.25 * TMin\n</code></pre> Deprecated. <p>Stop using this function. This function estimate day time temperature (TDay) using only one value for each parameters.</p> <p>Parameters:</p> Name Type Description Default <code>Tmin</code> <code>float</code> <p>Number or array of Minimum Temperatures</p> required <code>Tmax</code> <code>float</code> <p>Number or array of Maximum Temperatures</p> required <code>tminFactor</code> <code>float</code> <p>Minimum Temperature factor</p> <code>0.25</code> <p>Returns:</p> Type Description <code>float</code> <p>A number of Day Temperatures</p>"},{"location":"reference/#tfunct.model.tday.getTDay","title":"<code>getTDay(Tmin, Tmax, tminFactor=0.25)</code>","text":""},{"location":"reference/#tfunct.model.tday.apply_TDay","title":"<code>apply_TDay(Tmin, Tmax, tminFactor)</code>","text":""},{"location":"reference/#tfunct.model.tday.estimate_TDay","title":"<code>estimate_TDay(Tmin=None, Tmax=None, tminFactor=0.25)</code>","text":"<p>An optimized function to calculate day time temperature in parallel.</p> <pre><code> TDay = 0.75 * Tmax + 0.25 * TMin\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>Tmin</code> <code>float</code> <p>Number or array of Minimum Temperatures</p> <code>None</code> <code>Tmax</code> <code>float</code> <p>Number or array of Maximum Temperatures</p> <code>None</code> <code>tminFactor</code> <code>float</code> <p>Minimum Temperature factor</p> <code>0.25</code> <p>Returns:</p> Type Description <code>float</code> <p>A number of Day Temperatures</p>"},{"location":"reference/#tfunct.util","title":"<code>util</code>","text":""},{"location":"reference/#tfunct.util.find_nearest_value","title":"<code>find_nearest_value(array, value)</code>","text":"<p>Find nearest value to a user define value from array</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>array</code> <p>Array of values</p> required <code>value</code> <code>int</code> <p>value to find into the array</p> required <p>Returns:</p> Type Description <code>int</code> <p>a number with the nearest value found</p>"},{"location":"reference/#tfunct.util.find_nearest_index","title":"<code>find_nearest_index(array, values)</code>","text":"<p>Find nearest index to a user define value from array</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>array</code> <p>Array of values</p> required <code>values</code> <code>int</code> <p>value to find into the array</p> required <p>Returns:</p> Type Description <code>int</code> <p>a number with the nearest index found</p>"},{"location":"reference/#tfunct.util.find_nearest","title":"<code>find_nearest(array, value)</code>","text":"<p>Find nearest index and value to a user define value from array</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>array</code> <p>Array of values</p> required <code>value</code> <code>int</code> <p>value to find into the array</p> required <p>Returns:</p> Type Description <code>int</code> <p>a number with the nearest value found</p>"},{"location":"reference/#tfunct.util.CCC","title":"<code>CCC(y_true, y_pred)</code>","text":"<p>Lin's Concordance correlation coefficient</p> <p>Computes Lin's (1989, 2000) concordance correlation coefficient for  agreement on a continuous measure obtained by two methods. The  concordance correlation coefficient combines measures of both precision  and accuracy to determine how far the observed data deviate from the  line of perfect concordance (that is, the line at 45 degrees on a square  scatter plot). </p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>array</code> <p>Array of observed values</p> required <code>y_pred</code> <code>array</code> <p>Array of predicted values</p> required <p>Returns:</p> Type Description <code>float</code> <p>Concordance correlation coefficient</p>"},{"location":"reference/#tfunct.util.Cb","title":"<code>Cb(x, y)</code>","text":"<p>A bias correction factor that measures how far the best-fit line deviates  from a line at 45 degrees (a measure of accuracy). </p> <p>No deviation from the 45 degree line occurs when Cb = 1. See Lin (1989 page 258).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>array</code> <p>Array of observed values</p> required <code>y</code> <code>array</code> <p>Array of predicted values</p> required <p>Returns:</p> Type Description <code>float</code> <p>Bias correction factor</p>"},{"location":"reference/#tfunct.util.getScores","title":"<code>getScores(df, fld1=None, fld2=None)</code>","text":"<p>Get stats for model results </p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>array</code> <p>A pandas dataframe with Observed and Simulated values </p> required <code>fld1</code> <code>str</code> <p>Name of the columns or field with observed values</p> <code>None</code> <code>fld2</code> <code>str</code> <p>Name of the columns or field with predicted values</p> <code>None</code> <p>Returns:</p> Name Type Description <code>r2score</code> <code>float</code> <p>R squared metric</p> <code>mape</code> <code>float</code> <p>Mean absolute percentage error</p> <code>rmse</code> <code>float</code> <p>Root mean squared error</p> <code>n_rmse</code> <code>float</code> <p>Normalized RMSE</p> <code>d_index</code> <code>float</code> <p>d-index metric</p> <code>ef</code> <code>float</code> <p>Nash-Sutcliffe metric</p> <code>ccc</code> <code>float</code> <p>Concordance correlation coefficient</p> <code>cb</code> <code>float</code> <p>A bias correction factor</p> <code>accuracy</code> <code>float</code> <p>Accuracy in percentage</p>"},{"location":"reference/#tfunct.util.filterTopCombinations","title":"<code>filterTopCombinations(df_m, df_cmb, fnct='PRFT', VPDstress=False, top=3, Cb=1.0, ccc=0.86, rmsre=100)</code>","text":"<p>Filter combinations for selecting Top 3 of the best simulations</p> Deprecated <p>Stop using this function, instead use <code>filterSimulations</code>.</p> <p>Parameters:</p> Name Type Description Default <code>df_m</code> <code>array</code> <p>A dataframe with metrics from each simulations</p> required <code>df_cmb</code> <code>array</code> <p>A dataframe with combinations results</p> required <code>fnct</code> <code>str</code> <p>Temperature response function. default 'PRFT'</p> <code>'PRFT'</code> <code>VPDstress</code> <code>bool</code> <p>Stressed VPD. default False</p> <code>False</code> <code>top</code> <code>int</code> <p>Number of selected records. default 3</p> <code>3</code> <code>Cb</code> <code>float</code> <p>A threshold for Cb metric. default 1.0</p> <code>1.0</code> <code>ccc</code> <code>float</code> <p>A threshold for CCC metric. default 0.86</p> <code>0.86</code> <code>rmsre</code> <code>float</code> <p>A threshold for RMSRE metric. default 100</p> <code>100</code> <p>Returns:</p> Type Description <code>object</code> <p>A dataframe with all filtered combinations</p>"},{"location":"reference/#tfunct.util.filterSimulations","title":"<code>filterSimulations(functype='PRFT', VPDstress=False, cmb=None, met=None, cmb_filters=None, met_filters=None, pdFormat=False, dispFig=True, saveFig=False, figname='Fig_topComb_avgYield', figfmt='jpg', saveResults=True, outputPath='./', fmt='parquet')</code>","text":"<p>Filter a table with several combinations results from the three temperature functions. This function is similar to <code>util.filterTopCombinations</code> function but  optimized to work only with Apache parquet files.</p> <p>Parameters:</p> Name Type Description Default <code>functype</code> <code>str</code> <p>Name of the temperature response function. Default 'PRFT'</p> <code>'PRFT'</code> <code>VPDstress</code> <code>bool</code> <p>Stressed VPD. default False</p> <code>False</code> <code>cmb</code> <code>str</code> <p>Full path of the combinations result file</p> <code>None</code> <code>met</code> <code>str</code> <p>Full path of the metrics result file</p> <code>None</code> <code>cmb_filters</code> <code>dict</code> <p>Dictionary with the parameters to use as a constraints in combonation filters.                 it must match with the respective temperature function parameters.                  Default filters: dict( RUE = ('RUE', '=', 3.0 ), TminFactor = ('TminFactor', '=', 0.25 ) )</p> <code>None</code> <code>met_filters</code> <code>dict</code> <p>Dictionary with the parameters to use as a constraints in metrics filters.                 Default values: metfilters = dict( Cb = ('&gt;=', 0.9), CCC = ('&gt;=', 0.8) )</p> <code>None</code> <code>pdFormat</code> <code>bool</code> <p>Export filtered dataset in pandas format. Default <code>False</code> </p> <code>False</code> <code>dispFig</code> <code>bool</code> <p>Display figure of grain yield correlation. Default is <code>True</code></p> <code>True</code> <code>saveFig</code> <code>bool</code> <p>Save figure. Default is <code>False</code></p> <code>False</code> <code>figname</code> <code>str</code> <p>Name of the figure file to be saved</p> <code>'Fig_topComb_avgYield'</code> <code>figfmt</code> <code>str</code> <p>Format of the figure file. <code>JPEG</code> or <code>PDF</code> formats are the available options. Default is <code>pdf</code>.</p> <code>'jpg'</code> <code>saveResults</code> <code>bool</code> <p>Save filtered data. Default <code>True</code></p> <code>True</code> <code>outputPath</code> <code>str</code> <p>Output folder to save the data</p> <code>'./'</code> <code>fmt</code> <code>str</code> <p>File format to save in csv or parquet. Default is <code>parquet</code></p> <code>'parquet'</code> <p>Returns:</p> Type Description <code>object</code> <p>A dataframe or parquet file with the filtered dataset</p>"},{"location":"reference/#tfunct.util.figures","title":"<code>figures</code>","text":""},{"location":"reference/#tfunct.util.figures.chart_compareResults","title":"<code>chart_compareResults(df_result=None, fld1=None, fld2=None, alpha=0.75, s=15, xy_lim=2, hue=None, loc_leg=2, ncol=2, ha='left', va='top', title='Observed vs Simulated grain yield', xlabel='Observed Yield (tha$^{-1}$)', ylabel='Simulated Yield (tha$^{-1}$)', dirname='Figures_tFunt', fname='Fig_model_', dispScore=True, dispLegend=True, saveFig=False, showFig=True, fmt='pdf')</code>","text":"<p>Display a scatter plot to compare two variables in the results</p> <p>Parameters:</p> Name Type Description Default <code>df_result</code> <code>array</code> <p>A pandas DataFrame with the results and variables to compare</p> <code>None</code> <code>fld1</code> <code>str</code> <p>Variable or column name to compare</p> <code>None</code> <code>fld2</code> <code>str</code> <p>Variable or column name to compare</p> <code>None</code> <code>alpha</code> <code>float</code> <p>Transparency of the points in chart</p> <code>0.75</code> <code>s</code> <code>float</code> <p>Size of the points in chart</p> <code>15</code> <code>xy_lim</code> <code>int</code> <p>Used to extend the x-axis limit. Default 2 units</p> <code>2</code> <code>hue</code> <code>str</code> <p>Variable to classify or discriminate the results in colors</p> <code>None</code> <code>title</code> <code>str</code> <p>Title of the figure</p> <code>'Observed vs Simulated grain yield'</code> <code>xlabel</code> <code>str</code> <p>Label of the x-axis</p> <code>'Observed Yield (tha$^{-1}$)'</code> <code>ylabel</code> <code>str</code> <p>Label of the y-axis</p> <code>'Simulated Yield (tha$^{-1}$)'</code> <code>dirname</code> <code>str</code> <p>Folder name to save results</p> <code>'Figures_tFunt'</code> <code>fname</code> <code>str</code> <p>File name to save the figure</p> <code>'Fig_model_'</code> <code>dispScore</code> <code>bool</code> <p>Display the accurracy and others stats of the model</p> <code>True</code> <code>dispLegend</code> <code>bool</code> <p>Display the legend of the chart</p> <code>True</code> <code>saveFig</code> <code>bool</code> <p>Save file in JPG or PDF format</p> <code>False</code> <code>fmt</code> <code>str</code> <p>Format of the output</p> <code>'pdf'</code> <p>Returns:</p> Type Description <code>object</code> <p>A figure in JPG or PDF format with the filename specified into the folder name</p>"},{"location":"reference/#tfunct.util.figures.plot_TempFunct","title":"<code>plot_TempFunct(fld1='ObsYield', fld2='SimYield', hue='location', ncol=6, s=80, alpha=0.45, xy_lim=1, fonts_axes=12, fonts_titles=14, dispScore=False, errorbar=False, saveFig=True, showFig=True, path_to_save_results='./', dirname='Figures', fname='Fig_1', fmt='pdf')</code>","text":""},{"location":"reference/data/","title":"Data","text":""},{"location":"reference/data/#tfunct.data.load_dataset","title":"<code>load_dataset()</code>","text":"<p>Load example (Phenology, NDVI, and Weather) datasets from International Wheat Improvement Network (IWIN) sites and  the other locations across the globe to estimate yield under non-stressed and Vapor pressure Deficit (VPD)  stressed conditions as a function of temperature.</p> Return <p>A data dictionary with all raw data and information needed to carry out the demo.</p> <p>Examples:</p> <pre><code>    &gt;&gt;&gt; from tfunct.data import load_dataset\n    &gt;&gt;&gt; #\u00a0Load example dataset (Phenology, NDVI and Weather data for each site)\n    &gt;&gt;&gt; data = load_dataset()\n    &gt;&gt;&gt; print(data.keys()) # dict_keys(['Pheno', 'NDVI', 'Weather'])\n    &gt;&gt;&gt; # Display Pheno data\n    &gt;&gt;&gt; data['Pheno']\n    &gt;&gt;&gt; # Display NDVI data\n    &gt;&gt;&gt; data['NDVI']\n    &gt;&gt;&gt; # Display Weather data\n    &gt;&gt;&gt; data['Weather']\n</code></pre>"},{"location":"reference/model/","title":"Model","text":"<p>This class allows to manipulate the datasets in an efficient manner. it contains the necessary functions to load nad pre-process the raw data, calculate GPP, iPAR, Stress Factor, Day Temperature and estimate grain yield.</p>"},{"location":"reference/model/#tfunct.model.Model","title":"<code>Model(config, params=None)</code>","text":"<p>             Bases: <code>object</code></p>"},{"location":"reference/model/#tfunct.model.Model.load_raw_datasets","title":"<code>load_raw_datasets()</code>","text":"<p>Load raw phenology and AgERA5 datasets </p> Return <p>A existing dataset including WeatherFile, PhenoFile, NDVIFile. The raw data can be seen in config object. eg. config['PhenoFile']</p>"},{"location":"reference/model/#tfunct.model.Model.preprocess_raw_datasets","title":"<code>preprocess_raw_datasets(data)</code>","text":"<p>Preprocess raw datasets </p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dictionary</code> <p>The phenology, ndvi and weather data for each location in example dataset.</p> required Return <p>A dataset in a specific format for the tfunct package</p>"},{"location":"reference/model/#tfunct.model.Model.getTDay","title":"<code>getTDay(m=None, w=None, tminFactor=None)</code>","text":"<p>Calculate day time temperature</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model with sites and the necessary information</p> <code>None</code> <code>w</code> <code>array</code> <p>Table of weather data with minimum and maximum temperature records</p> <code>None</code> <code>tminFactor</code> <code>float</code> <p>Minimum Temperature factor. Default is usually 0.25.                  It can be reviewed in configuration parameters such as <code>TMIN_PERC_FACTOR</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>A number or array of Day Temperature</p>"},{"location":"reference/model/#tfunct.model.Model.getIPAR","title":"<code>getIPAR(m=None, ndvi=None)</code>","text":"<p>Total light interception - iPAR</p> Reference <p>iPAR = NDVI * 1.25 - 0.19 # between heading and maturity (Campos et al. 2018)</p> <p>iPAR = NDVI * 1.25 - 0.21 Daughtry et al. (1992)</p> <ul> <li> <p>Asrar, G., Fuchs, M., Kanemasu, E.T., Hatfield, J.L., 1984.  Estimating absorbed photosynthetic radiation and leaf area index from spectral reflectance  in wheat. Agron. J. 76, 30-306.</p> </li> <li> <p>Campos 2018 Remote sensing-based crop biomass with water or light-driven crop growth models in  wheat commercial fields.</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model </p> <code>None</code> <code>ndvi</code> <code>array</code> <p>Array of float values</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>An array of Total light interception values</p>"},{"location":"reference/model/#tfunct.model.Model.getYield","title":"<code>getYield(tfun='PRFT', sites=None, is_VPDStress=False, expCSV=True)</code>","text":"<p>Get yield using a defined temperature function and default parameters</p> <p>Parameters:</p> Name Type Description Default <code>tfun</code> <code>str</code> <p>Name of the temperature function</p> <code>'PRFT'</code> <code>sites</code> <code>dictionary</code> <p>List of sites with the basic information to estimate yield.</p> <code>None</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor Pressure Deficit stress. Default is False.</p> <code>False</code> <code>expCSV</code> <code>bool</code> <p>Export grain yield results in an individual file. Default is True.</p> <code>True</code> <p>Returns:</p> Type Description <code>array</code> <p>A dataframe with simulated grain yield values</p>"},{"location":"reference/model/#tfunct.model.Model.runCombinations_PRFT","title":"<code>runCombinations_PRFT(data=None, sites=None, comb=None, is_VPDStress=False, expCSV=True, individualCSV=False, target=None)</code>","text":"<p>Run several combinations using different parameters for PRFT model </p> Deprecated <p>Stop using this function.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>object</code> <p>Array of base data.</p> <code>None</code> <code>sites</code> <code>object</code> <p>Array of sites</p> <code>None</code> <code>comb</code> <code>object</code> <p>Array of combinations</p> <code>None</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor Pressure Deficit stress. Default is False</p> <code>False</code> <code>expCSV</code> <code>bool</code> <p>Save results in CSV format. Default is True</p> <code>True</code> <code>individualCSV</code> <code>bool</code> <p>Default is False</p> <code>False</code> <code>target</code> <code>str</code> <p>Name of the target device. Available values are <code>cpu</code>, <code>parallel</code> and <code>cuda</code>. Default is <code>cpu</code></p> <code>None</code> <p>Returns:</p> Type Description <code>object</code> <p>A dataframe with estimated grain yield of all combinations.</p>"},{"location":"reference/model/#tfunct.model.Model.fit","title":"<code>fit(data=None, sites=None, comb=None, ft='PRFT', is_VPDStress=False, expCSV=True, individualCSV=False, n_jobs=4, verbose=False)</code>","text":"<p>Run a model to fit yield</p> Deprecated on Dec, 2022. <p>Stop using this function.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>object</code> <p>Array of base data.</p> <code>None</code> <code>sites</code> <code>object</code> <p>Array of sites</p> <code>None</code> <code>comb</code> <code>object</code> <p>Array of combinations</p> <code>None</code> <code>ft</code> <code>str</code> <p>Name of the temperature response function. Default is 'PRFT'. </p> <code>'PRFT'</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor Pressure Deficit stress. Default is False</p> <code>False</code> <code>expCSV</code> <code>bool</code> <p>Save results in CSV format. Default is True</p> <code>True</code> <code>individualCSV</code> <code>bool</code> <p>Default is False</p> <code>False</code> <code>n_jobs</code> <code>int</code> <p>Number of CPU cores to use in paralell processing. Default is 4.</p> <code>4</code> <code>verbose</code> <code>bool</code> <p>Display comments during processing. Default is False</p> <code>False</code> <p>Returns:</p> Type Description <code>array</code> <p>An array of sites with intermediate results</p>"},{"location":"reference/model/#tfunct.model.Model.setup_dataInput_forCombinations","title":"<code>setup_dataInput_forCombinations(sites)</code>","text":"<p>Set up data for each sites to estimate grain yield from different combinations</p> <p>Parameters:</p> Name Type Description Default <code>sites</code> <code>dictionary</code> required Return <p>Array of arrays with weather, iPAR and GPP data</p>"},{"location":"reference/model/#tfunct.model.Model.getCombinations","title":"<code>getCombinations(functype='PRFT', cols=None, RUE=None, Tmin=None, Toptmin=None, Topt=None, Toptmax=None, Tmax=None, TminFactor=None, Lvpd=None, Uvpd=None, SFvpd_Lthres=None, SFvpd_Uthres=None, isVPDStress=False)</code>","text":"<p>Generate combinations to establish the optimum temperature response for grain-filling period  and estimate grain yield.</p> <p>Parameters:</p> Name Type Description Default <code>functype</code> <code>str</code> <p>Type of temperature response function (eg. PRFT, WETF, TPF)</p> <code>'PRFT'</code> <code>cols</code> <code>int</code> <p>Number of daily records in growing period</p> <code>None</code> <code>RUE</code> <code>array</code> <p>Array of RUE values</p> <code>None</code> <code>Tmin</code> <code>array</code> <p>Array of minimum temperature values</p> <code>None</code> <code>Toptmin</code> <code>array</code> <p>Array of Optimun minimum temperature values</p> <code>None</code> <code>Topt</code> <code>array</code> <p>Array of Optimun temperature values</p> <code>None</code> <code>Toptmax</code> <code>array</code> <p>Array of Optimun maximum temperature values</p> <code>None</code> <code>Tmax</code> <code>array</code> <p>Array of maximum temperature values</p> <code>None</code> <code>TminFactor</code> <code>array</code> <p>Array of minimum temperature factor</p> <code>None</code> <code>Lvpd</code> <code>array</code> <p>Array of lower VPD values</p> <code>None</code> <code>Uvpd</code> <code>array</code> <p>Array of lower VPD values</p> <code>None</code> <code>SFvpd_Lthres</code> <code>array</code> <p>Array of lower VPD stress factor values</p> <code>None</code> <code>SFvpd_Uthres</code> <code>array</code> <p>Array of lower VPD stress factor values</p> <code>None</code> <code>isVPDStress</code> <code>bool</code> <p>True/False value for using VPD stress condition</p> <code>False</code> Return <p>Array of combinations and an array to save results</p>"},{"location":"reference/model/#tfunct.model.Model.getGYield_forCombinations","title":"<code>getGYield_forCombinations(functype, df_GYield, data_input, array_params_to_run, isVPDStress, array_results, saveFile=True, returnDF=True, fmt='parquet')</code>","text":"<p>Estimate grain yield using parameters for each combinations</p> <p>Parameters:</p> Name Type Description Default <code>df_GYield</code> <code>array</code> <p>Dataframe with observed grain yield</p> required <code>data_input</code> <code>array</code> <p>Array of inputs containing weather, iPAR, PRFT and GPP data for each site.</p> required <code>array_params_to_run</code> <code>array</code> <p>Array of combinations (RUE, TOpt and TminFactor) to simulate</p> required <code>isVPDStress</code> <code>bool</code> <p>True/False value for using VPD stress condition</p> required <code>array_results</code> <code>array</code> <p>Array used to save results</p> required <code>saveFile</code> <code>bool</code> <p>True if save file in results folder</p> <code>True</code> <code>returnDF</code> <code>bool</code> <p>True if return a pandas dataframe. Use False when the combinations are too large.</p> <code>True</code> <code>fmt</code> <code>str</code> <p>Format to save file. Comma separate value (csv) or Apache parquet (parquet).         Default is <code>parquet</code></p> <code>'parquet'</code> Return <p>A dataframe or table with results</p>"},{"location":"reference/model/#tfunct.model.Model.getCombinations_Metrics","title":"<code>getCombinations_Metrics(functype, isVPDStress, df_GYield, array_params_to_run, array_results, saveFile=True, fmt='parquet')</code>","text":"<p>Get evaluation metrics for each simulation</p> <p>Parameters:</p> Name Type Description Default <code>functype</code> <code>str</code> <p>Type of temperature response function (eg. PRFT, WETF, TPF)</p> required <code>isVPDStress</code> <code>bool</code> <p>True/False value for using VPD stress condition</p> required <code>df_GYield</code> <code>array</code> <p>Dataframe with observed grain yield</p> required <code>array_params_to_run</code> <code>array</code> <p>Array of combinations (RUE, TOpt and TminFactor) to simulate</p> required <code>array_results</code> <code>array</code> <p>Array used to save results</p> required <code>saveFile</code> <code>bool</code> <p>True if save file in results folder</p> <code>True</code> <code>fmt</code> <code>str</code> <p>Format to save file. Comma separate value (csv) or Apache parquet (parquet).         Default is <code>parquet</code></p> <code>'parquet'</code> Return <p>A dataframe with several metrics </p> <p>Returns:</p> Name Type Description <code>MAE</code> <code>float</code> <p>Mean Absolute Error</p> <code>MSE</code> <code>float</code> <p>Mean Squared Error</p> <code>RMSE</code> <code>float</code> <p>Root Mean Squared Error</p> <code>RMSRE</code> <code>float</code> <p>Root Mean Squared Relative Error</p> <code>MAPE</code> <code>float</code> <p>Mean Absolute Percentage Error</p> <code>pvalue</code> <code>float</code> <p>p-value </p> <code>R2</code> <code>float</code> <p>R Squared metric</p> <code>EF</code> <code>float</code> <p>Nash-Sutcliffe metric</p> <code>intercept</code> <code>float</code> <p>Intercept of the regression model</p> <code>slope</code> <code>float</code> <p>Slope of the regression model</p> <code>Cb</code> <code>float</code> <p>A bias correction factor</p> <code>CCC</code> <code>float</code> <p>Concordance correlation coefficient</p> <code>Accuracy</code> <code>float</code> <p>Accuracy in percentage</p>"},{"location":"reference/model/#tfunct.model.gpp","title":"<code>gpp</code>","text":""},{"location":"reference/model/#tfunct.model.gpp.calcGPP","title":"<code>calcGPP(SolRad, TF, iPAR, RUE=3.0, stressFactor=1.0)</code>","text":"<p>Estimate the Gross primary production</p> <p>Parameters:</p> Name Type Description Default <code>SolRad</code> <code>float</code> <p>Solar Radiation</p> required <code>TF</code> <code>float</code> <p>Temperature function result (PRFT, WETF, TPF)</p> required <code>iPAR</code> <code>float</code> <p>the photosynthetically active radiation (PAR) intercepted by a plant or crop estimated from NDVI</p> required <code>RUE</code> <code>float</code> <p>Radiation-use efficiency. Default value is 3.0 gMJ^\u22121</p> <code>3.0</code> <code>stressFactor</code> <code>float</code> <p>Stress Factor (eg. VPD stress factor)</p> <code>1.0</code> Deprecated. <p>This function only use one value for each paramters. it is not optimized for run models in parallel.</p> <p>Returns:</p> Type Description <code>float</code> <p>the gross primary production (GPP)</p>"},{"location":"reference/model/#tfunct.model.gpp.apply_GPP_v0","title":"<code>apply_GPP_v0(SolRad, PRFT, iPAR, RUE=3.0, stressFactor=1.0)</code>","text":""},{"location":"reference/model/#tfunct.model.gpp.calculateGPP","title":"<code>calculateGPP(SolRad, PRFT, iPAR, RUE=3.0, stressFactor=1.0)</code>","text":"<p>Estimate the Gross primary production.  The accumulated dry matter from heading to maturity</p> <pre><code># GPP = Solar Radiation \u00d7 TemFun \u00d7 VPD_StressFactor \u00d7 iPAR_fromNDVI \u00d7 RUE \nGPP = SolRad * 0.5 * RUE * PRFT * iPAR * stressFactor\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>SolRad</code> <code>float</code> <p>Solar Radiation</p> required <code>PRFT</code> <code>float</code> <p>Photosynthesis reduction factor</p> required <code>iPAR</code> <code>float</code> <p>the photosynthetically active radiation (PAR) intercepted by a plant or crop</p> required <code>RUE</code> <code>float</code> <p>Radiation-use efficiency. Default value is 3.0 gMJ^-1</p> <code>3.0</code> <code>stressFactor</code> <code>float</code> <p>Stress Factor</p> <code>1.0</code> <p>Returns:</p> Type Description <code>float</code> <p>a number or array of values with the gross primary production (GPP)</p>"},{"location":"reference/model/#tfunct.model.gpp.applyGPP_VPDStress","title":"<code>applyGPP_VPDStress(SolRad, PRFT, iPAR, SFvpd, RUE=3.0)</code>","text":""},{"location":"reference/model/#tfunct.model.gpp.calculateGPP_VPDStress","title":"<code>calculateGPP_VPDStress(SolRad, PRFT, iPAR, SFvpd, RUE=3.0)</code>","text":"<p>Estimate the Gross primary production with stressed VPD</p> <pre><code>GPP = SolRad * 0.5 * RUE * PRFT * iPAR * SFvpd\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>SolRad</code> <code>float</code> <p>Solar Radiation</p> required <code>PRFT</code> <code>float</code> <p>Photosynthesis reduction factor</p> required <code>iPAR</code> <code>float</code> <p>the photosynthetically active radiation (PAR) intercepted by a plant or crop</p> required <code>RUE</code> <code>float</code> <p>Radiation-use efficiency. Default value is 3.0</p> <code>3.0</code> <code>SFvpd</code> <code>float</code> <p>Vapor Pressure Deficit (VPD) stress factor</p> required <p>Returns:</p> Type Description <code>float</code> <p>a number or array of values with the gross primary production (GPP)</p>"},{"location":"reference/model/#tfunct.model.gpp.estimate","title":"<code>estimate(data, params, is_VPDStress, tf, results)</code>","text":"<p>An optimized function for estimating GPP for all observations using one of the three  Temperature Function (TF) such as PRFT, WETF and TPF.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>object</code> <p>Array of arrays containing tn, tx, ndvi, solrad, VPDx, ipar, GPP datasets</p> required <code>params</code> <code>object</code> <p>An array with RUE, tminFactor, Topt, Lvpd, Uvpd, SFvpd_Lthres, SFvpd_Uthres values</p> required <code>is_VPDStress</code> <code>array</code> <p>Array of one value with T/F if Vapor Pressure Deficit stress affecting grain yield. Default is [False].</p> required <code>tf</code> <code>array</code> <p>Array of one value representing the type of function. [1]: PRFT; [2]: WETF; [3]: TPF.</p> required <code>results</code> <code>array</code> <p>Empty array for outputs.</p> required <p>Returns:</p> Name Type Description <code>results</code> <code>array</code> <p>An array with estimated yield for each site.</p>"},{"location":"reference/model/#tfunct.model.gyield","title":"<code>gyield</code>","text":""},{"location":"reference/model/#tfunct.model.gyield.estimate","title":"<code>estimate(data, params, is_VPDStress, tf, results)</code>","text":"<p>An optimized function for estimating grain yield in one step for all observations using one of the three  Temperature Function (TF) such as PRFT, WETF and TPF.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>object</code> <p>Array of arrays containing tn, tx, ndvi, solrad, VPDx, ipar, GPP datasets</p> required <code>params</code> <code>object</code> <p>An array with RUE, tminFactor, Topt, Lvpd, Uvpd, SFvpd_Lthres, SFvpd_Uthres values</p> required <code>is_VPDStress</code> <code>array</code> <p>Array of one value with T/F if Vapor Pressure Deficit stress affecting grain yield. Default is [False].</p> required <code>tf</code> <code>array</code> <p>Array of one value representing the type of function. [1]: PRFT; [2]: WETF; [3]: TPF.</p> required <code>results</code> <code>array</code> <p>Empty array for outputs.</p> required <p>Returns:</p> Name Type Description <code>results</code> <code>array</code> <p>An array with estimated yield for each site.</p>"},{"location":"reference/model/#tfunct.model.ipar","title":"<code>ipar</code>","text":""},{"location":"reference/model/#tfunct.model.ipar.calcIPAR","title":"<code>calcIPAR(ndvi)</code>","text":"<p>Total light interception - iPAR</p> Reference <p>iPAR = NDVI * 1.25 - 0.19 # between heading and maturity (Campos et al. 2018)</p> <p>iPAR = NDVI * 1.25 - 0.21 Daughtry et al. (1992)</p> <ul> <li> <p>Asrar, G., Fuchs, M., Kanemasu, E.T., Hatfield, J.L., 1984.  Estimating absorbed photosynthetic radiation and leaf area index from spectral reflectance  in wheat. Agron. J. 76, 30-306.</p> </li> <li> <p>Campos 2018 Remote sensing-based crop biomass with water or light-driven crop growth models in      wheat commercial fields.</p> </li> </ul> Deprecated. <p>Stop using this function. This function estimate iPAR using only one value for each parameters.</p> <p>Parameters:</p> Name Type Description Default <code>ndvi</code> <code>array</code> <p>Array of float values</p> required <p>Returns:</p> Type Description <code>array</code> <p>An array of Total light interception values</p>"},{"location":"reference/model/#tfunct.model.ipar.estimate_IPAR","title":"<code>estimate_IPAR(ndvi=None)</code>","text":"<p>Total light interception - iPAR.</p> <p>It is assumed that NDVI at maturity is 0.25.</p> Reference <p>iPAR = NDVI * 1.25 - 0.19 # between heading and maturity (Campos et al. 2018)</p> <p>iPAR = NDVI * 1.25 - 0.21 Daughtry et al. (1992)</p> <ul> <li> <p>Asrar, G., Fuchs, M., Kanemasu, E.T., Hatfield, J.L., 1984.  Estimating absorbed photosynthetic radiation and leaf area index from spectral reflectance  in wheat. Agron. J. 76, 30-306.</p> </li> <li> <p>Campos 2018 Remote sensing-based crop biomass with water or light-driven crop growth models in      wheat commercial fields.</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>ndvi</code> <code>array</code> <p>Array of float values</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>An array of Total light interception values</p>"},{"location":"reference/model/#tfunct.model.prft","title":"<code>prft</code>","text":""},{"location":"reference/model/#tfunct.model.prft.calcPRFT","title":"<code>calcPRFT(TDay, TOpt=18)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT) <pre><code>PRFT = 1 - 0.0025 * (TDay - TOpt)^2\n</code></pre></p> Deprecated. <p>Stop using this function. This function estimate PRFT using only one value for each parameters.</p> <p>Parameters:</p> Name Type Description Default <code>TDay</code> <code>float</code> <p>Number or array of Day Temperatures</p> required <code>TOpt</code> <code>float</code> <p>Optimum Temperature. Default value 18</p> <code>18</code> <p>Returns:</p> Type Description <code>float</code> <p>A number or array of PRFT</p>"},{"location":"reference/model/#tfunct.model.prft.calculatePRFT","title":"<code>calculatePRFT(Tday, Topt=18)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT) in parallel.</p> <pre><code>PRFT = 1 - 0.0025 * (TDay - TOpt)^2\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>Tday</code> <code>float</code> <p>Number or array of Day Temperatures</p> required <code>Topt</code> <code>float</code> <p>Optimum Temperature. Default value 18</p> <code>18</code> <p>Returns:</p> Type Description <code>float</code> <p>A number or array of PRFT</p>"},{"location":"reference/model/#tfunct.model.sfvpd","title":"<code>sfvpd</code>","text":""},{"location":"reference/model/#tfunct.model.sfvpd.calcSFvpd","title":"<code>calcSFvpd(VPDx, Lvpd, Uvpd, SFvpd_Lthres, SFvpd_Uthres)</code>","text":""},{"location":"reference/model/#tfunct.model.sfvpd.getSFvpd","title":"<code>getSFvpd(VPDx, Lvpd, Uvpd, SFvpd_Lthres, SFvpd_Uthres)</code>","text":""},{"location":"reference/model/#tfunct.model.sfvpd.apply_SFvpd","title":"<code>apply_SFvpd(VPDMAX, Lvpd=1, Uvpd=4, SFvpd_Lthres=0.2, SFvpd_Uthres=1)</code>","text":""},{"location":"reference/model/#tfunct.model.sfvpd.calculateSFvpd","title":"<code>calculateSFvpd(VPDMAX, Lvpd=1, Uvpd=4, SFvpd_Lthres=0.2, SFvpd_Uthres=1)</code>","text":"<p>Calculation of Vapor pressure deficit (VPD) stress factor</p> <p>Parameters:</p> Name Type Description Default <code>VPDMAX</code> <code>array</code> <p>Array of daily temperature values</p> required <code>Lvpd</code> <code>float</code> <p>A number for threshold of lower VPD. Default is 1</p> <code>1</code> <code>Uvpd</code> <code>array</code> <p>A number for threshold of upper VPD. Default is 4</p> <code>4</code> <code>SFvpd_Lthres</code> <code>array</code> <p>A number for threshold of stress factor of lower VPD. Default is 0.2</p> <code>0.2</code> <code>SFvpd_Uthres</code> <code>array</code> <p>A number for threshold of stress factor of upper VPD. Default is 1</p> <code>1</code> <p>Returns:</p> Type Description <code>array</code> <p>A number or array of stressed factors of VPD</p>"},{"location":"reference/model/#tfunct.model.tday","title":"<code>tday</code>","text":""},{"location":"reference/model/#tfunct.model.tday.calcTDay","title":"<code>calcTDay(Tmin, Tmax, tminFactor=0.25)</code>","text":"<p>Calculate day time temperature.  TDay is a function of weighted Tmin and weighted Tmax.</p> <pre><code> TDay = 0.75 * Tmax + 0.25 * TMin\n</code></pre> Deprecated. <p>Stop using this function. This function estimate day time temperature (TDay) using only one value for each parameters.</p> <p>Parameters:</p> Name Type Description Default <code>Tmin</code> <code>float</code> <p>Number or array of Minimum Temperatures</p> required <code>Tmax</code> <code>float</code> <p>Number or array of Maximum Temperatures</p> required <code>tminFactor</code> <code>float</code> <p>Minimum Temperature factor</p> <code>0.25</code> <p>Returns:</p> Type Description <code>float</code> <p>A number of Day Temperatures</p>"},{"location":"reference/model/#tfunct.model.tday.getTDay","title":"<code>getTDay(Tmin, Tmax, tminFactor=0.25)</code>","text":""},{"location":"reference/model/#tfunct.model.tday.apply_TDay","title":"<code>apply_TDay(Tmin, Tmax, tminFactor)</code>","text":""},{"location":"reference/model/#tfunct.model.tday.estimate_TDay","title":"<code>estimate_TDay(Tmin=None, Tmax=None, tminFactor=0.25)</code>","text":"<p>An optimized function to calculate day time temperature in parallel.</p> <pre><code> TDay = 0.75 * Tmax + 0.25 * TMin\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>Tmin</code> <code>float</code> <p>Number or array of Minimum Temperatures</p> <code>None</code> <code>Tmax</code> <code>float</code> <p>Number or array of Maximum Temperatures</p> <code>None</code> <code>tminFactor</code> <code>float</code> <p>Minimum Temperature factor</p> <code>0.25</code> <p>Returns:</p> Type Description <code>float</code> <p>A number of Day Temperatures</p>"},{"location":"reference/site/","title":"Site","text":"<p>             Bases: <code>object</code></p> <p>Site class</p> <p>Object containing attributes and functions related to the nursery site.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>integer</code> <p>The unique identifier for the site.</p> <code>attributes</code> <code>object</code> <p>The default attributes for each location in IWIN dataset.</p> <code>params</code> <code>dictionary</code> <p>The parameters to use during calculations.</p> <code>pheno_dates</code> <code>array</code> <p>The phenology dates of the trial.</p> <code>weather</code> <code>array</code> <p>Table with daily weather data for each location.</p> <code>raw_ndvi</code> <code>array</code> <p>NDVI values during growing period.</p> <code>inputWPN</code> <code>object</code> <p>A dataframe with phenology, NDVI and weather data for each site.</p> <code>errors</code> <code>dictionary</code> <p>Dictionary with different errors presented during the model processing.</p> <p>Methods:</p> Name Description <code>getAttr </code> <p>Get the attibutes of the site</p>"},{"location":"reference/site/#tfunct.Site.getTDay","title":"<code>getTDay(m=None, tminFactor=None)</code>","text":"<p>Calculate day time temperature for the selected site.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>Model with information to estimate grain yield</p> <code>None</code> <code>tminFactor</code> <code>float</code> <p>Minimum Temperature factor</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>A number or array of Day Temperature</p>"},{"location":"reference/site/#tfunct.Site.getPRFT","title":"<code>getPRFT(m=None, TDay=None, TOpt=None)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT) for each site.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model</p> <code>None</code> <code>TDay</code> <code>float</code> <p>Number or array of Day Temperatures</p> <code>None</code> <code>TOpt</code> <code>float</code> <p>Optimum Temperature. Default value 18</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>A number or array of PRFT</p>"},{"location":"reference/site/#tfunct.Site.getSFvpd","title":"<code>getSFvpd(m=None, VPDMAX=None, Lvpd=None, Uvpd=None, SFvpd_Lthres=None, SFvpd_Uthres=None)</code>","text":"<p>Calculation of Vapor pressure deficit (VPD) stress factor for each site</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model</p> <code>None</code> <code>VPDMAX</code> <code>array</code> <p>Array of daily temperature values</p> <code>None</code> <code>Lvpd</code> <code>float</code> <p>A number for threshold of lower VPD. Default is 1</p> <code>None</code> <code>Uvpd</code> <code>array</code> <p>A number for threshold of upper VPD. Default is 4</p> <code>None</code> <code>SFvpd_Lthres</code> <code>array</code> <p>A number for threshold of stress factor of lower VPD. Default is 0.2</p> <code>None</code> <code>SFvpd_Uthres</code> <code>array</code> <p>A number for threshold of stress factor of upper VPD. Default is 1</p> <code>None</code> <p>Returns:</p> Type Description <code>array</code> <p>A number or array of stressed factors of VPD</p>"},{"location":"reference/site/#tfunct.Site.getGPP","title":"<code>getGPP(m=None, SolRad=None, PRFT=None, iPAR=None, RUE=3.0, stressFactor=1.0, SFvpd=None, is_VPDStress=False)</code>","text":"<p>Estimate the Gross primary production (GPP) for each site</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>A tfunct model</p> <code>None</code> <code>SolRad</code> <code>float</code> <p>Solar Radiation</p> <code>None</code> <code>PRFT</code> <code>float</code> <p>Photosynthesis reduction factor</p> <code>None</code> <code>iPAR</code> <code>float</code> <p>the photosynthetically active radiation (PAR) intercepted by a plant or crop</p> <code>None</code> <code>RUE</code> <code>float</code> <p>Radiation-use efficiency. Default value is 3.0</p> <code>3.0</code> <code>stressFactor</code> <code>float</code> <p>Stress Factor</p> <code>1.0</code> <code>SFvpd</code> <code>float</code> <p>Stress Factor for VPD</p> <code>None</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor pressure deficit stress. Default is <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>float</code> <p>the gross primary production (GPP)</p>"},{"location":"reference/site/#tfunct.Site.fit","title":"<code>fit(m=None, ft='PRFT', is_VPDStress=False, verbose=False)</code>","text":"<p>Run a model to fit yield for a selected site using a specific temperature function</p> Deprecated. <p>This function was depreciated on Dec, 2022.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>object</code> <p>Model to run</p> <code>None</code> <code>ft</code> <code>str</code> <p>Name of the temperature response function: Default is 'PRFT'</p> <code>'PRFT'</code> <code>is_VPDStress</code> <code>bool</code> <p>Vapor pressure deficit stress. Default is <code>False</code></p> <code>False</code> <code>verbose</code> <code>bool</code> <p>Display comments during processing</p> <code>False</code> <p>Returns:</p> Type Description <code>array</code> <p>An array of Sites with intermediate results</p>"},{"location":"reference/util/","title":"Util","text":""},{"location":"reference/util/#tfunct.util.find_nearest_value","title":"<code>find_nearest_value(array, value)</code>","text":"<p>Find nearest value to a user define value from array</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>array</code> <p>Array of values</p> required <code>value</code> <code>int</code> <p>value to find into the array</p> required <p>Returns:</p> Type Description <code>int</code> <p>a number with the nearest value found</p>"},{"location":"reference/util/#tfunct.util.find_nearest_index","title":"<code>find_nearest_index(array, values)</code>","text":"<p>Find nearest index to a user define value from array</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>array</code> <p>Array of values</p> required <code>values</code> <code>int</code> <p>value to find into the array</p> required <p>Returns:</p> Type Description <code>int</code> <p>a number with the nearest index found</p>"},{"location":"reference/util/#tfunct.util.find_nearest","title":"<code>find_nearest(array, value)</code>","text":"<p>Find nearest index and value to a user define value from array</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>array</code> <p>Array of values</p> required <code>value</code> <code>int</code> <p>value to find into the array</p> required <p>Returns:</p> Type Description <code>int</code> <p>a number with the nearest value found</p>"},{"location":"reference/util/#tfunct.util.CCC","title":"<code>CCC(y_true, y_pred)</code>","text":"<p>Lin's Concordance correlation coefficient</p> <p>Computes Lin's (1989, 2000) concordance correlation coefficient for  agreement on a continuous measure obtained by two methods. The  concordance correlation coefficient combines measures of both precision  and accuracy to determine how far the observed data deviate from the  line of perfect concordance (that is, the line at 45 degrees on a square  scatter plot). </p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>array</code> <p>Array of observed values</p> required <code>y_pred</code> <code>array</code> <p>Array of predicted values</p> required <p>Returns:</p> Type Description <code>float</code> <p>Concordance correlation coefficient</p>"},{"location":"reference/util/#tfunct.util.Cb","title":"<code>Cb(x, y)</code>","text":"<p>A bias correction factor that measures how far the best-fit line deviates  from a line at 45 degrees (a measure of accuracy). </p> <p>No deviation from the 45 degree line occurs when Cb = 1. See Lin (1989 page 258).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>array</code> <p>Array of observed values</p> required <code>y</code> <code>array</code> <p>Array of predicted values</p> required <p>Returns:</p> Type Description <code>float</code> <p>Bias correction factor</p>"},{"location":"reference/util/#tfunct.util.getScores","title":"<code>getScores(df, fld1=None, fld2=None)</code>","text":"<p>Get stats for model results </p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>array</code> <p>A pandas dataframe with Observed and Simulated values </p> required <code>fld1</code> <code>str</code> <p>Name of the columns or field with observed values</p> <code>None</code> <code>fld2</code> <code>str</code> <p>Name of the columns or field with predicted values</p> <code>None</code> <p>Returns:</p> Name Type Description <code>r2score</code> <code>float</code> <p>R squared metric</p> <code>mape</code> <code>float</code> <p>Mean absolute percentage error</p> <code>rmse</code> <code>float</code> <p>Root mean squared error</p> <code>n_rmse</code> <code>float</code> <p>Normalized RMSE</p> <code>d_index</code> <code>float</code> <p>d-index metric</p> <code>ef</code> <code>float</code> <p>Nash-Sutcliffe metric</p> <code>ccc</code> <code>float</code> <p>Concordance correlation coefficient</p> <code>cb</code> <code>float</code> <p>A bias correction factor</p> <code>accuracy</code> <code>float</code> <p>Accuracy in percentage</p>"},{"location":"reference/util/#tfunct.util.filterTopCombinations","title":"<code>filterTopCombinations(df_m, df_cmb, fnct='PRFT', VPDstress=False, top=3, Cb=1.0, ccc=0.86, rmsre=100)</code>","text":"<p>Filter combinations for selecting Top 3 of the best simulations</p> Deprecated <p>Stop using this function, instead use <code>filterSimulations</code>.</p> <p>Parameters:</p> Name Type Description Default <code>df_m</code> <code>array</code> <p>A dataframe with metrics from each simulations</p> required <code>df_cmb</code> <code>array</code> <p>A dataframe with combinations results</p> required <code>fnct</code> <code>str</code> <p>Temperature response function. default 'PRFT'</p> <code>'PRFT'</code> <code>VPDstress</code> <code>bool</code> <p>Stressed VPD. default False</p> <code>False</code> <code>top</code> <code>int</code> <p>Number of selected records. default 3</p> <code>3</code> <code>Cb</code> <code>float</code> <p>A threshold for Cb metric. default 1.0</p> <code>1.0</code> <code>ccc</code> <code>float</code> <p>A threshold for CCC metric. default 0.86</p> <code>0.86</code> <code>rmsre</code> <code>float</code> <p>A threshold for RMSRE metric. default 100</p> <code>100</code> <p>Returns:</p> Type Description <code>object</code> <p>A dataframe with all filtered combinations</p>"},{"location":"reference/util/#tfunct.util.filterSimulations","title":"<code>filterSimulations(functype='PRFT', VPDstress=False, cmb=None, met=None, cmb_filters=None, met_filters=None, pdFormat=False, dispFig=True, saveFig=False, figname='Fig_topComb_avgYield', figfmt='jpg', saveResults=True, outputPath='./', fmt='parquet')</code>","text":"<p>Filter a table with several combinations results from the three temperature functions. This function is similar to <code>util.filterTopCombinations</code> function but  optimized to work only with Apache parquet files.</p> <p>Parameters:</p> Name Type Description Default <code>functype</code> <code>str</code> <p>Name of the temperature response function. Default 'PRFT'</p> <code>'PRFT'</code> <code>VPDstress</code> <code>bool</code> <p>Stressed VPD. default False</p> <code>False</code> <code>cmb</code> <code>str</code> <p>Full path of the combinations result file</p> <code>None</code> <code>met</code> <code>str</code> <p>Full path of the metrics result file</p> <code>None</code> <code>cmb_filters</code> <code>dict</code> <p>Dictionary with the parameters to use as a constraints in combonation filters.                 it must match with the respective temperature function parameters.                  Default filters: dict( RUE = ('RUE', '=', 3.0 ), TminFactor = ('TminFactor', '=', 0.25 ) )</p> <code>None</code> <code>met_filters</code> <code>dict</code> <p>Dictionary with the parameters to use as a constraints in metrics filters.                 Default values: metfilters = dict( Cb = ('&gt;=', 0.9), CCC = ('&gt;=', 0.8) )</p> <code>None</code> <code>pdFormat</code> <code>bool</code> <p>Export filtered dataset in pandas format. Default <code>False</code> </p> <code>False</code> <code>dispFig</code> <code>bool</code> <p>Display figure of grain yield correlation. Default is <code>True</code></p> <code>True</code> <code>saveFig</code> <code>bool</code> <p>Save figure. Default is <code>False</code></p> <code>False</code> <code>figname</code> <code>str</code> <p>Name of the figure file to be saved</p> <code>'Fig_topComb_avgYield'</code> <code>figfmt</code> <code>str</code> <p>Format of the figure file. <code>JPEG</code> or <code>PDF</code> formats are the available options. Default is <code>pdf</code>.</p> <code>'jpg'</code> <code>saveResults</code> <code>bool</code> <p>Save filtered data. Default <code>True</code></p> <code>True</code> <code>outputPath</code> <code>str</code> <p>Output folder to save the data</p> <code>'./'</code> <code>fmt</code> <code>str</code> <p>File format to save in csv or parquet. Default is <code>parquet</code></p> <code>'parquet'</code> <p>Returns:</p> Type Description <code>object</code> <p>A dataframe or parquet file with the filtered dataset</p>"},{"location":"reference/util/#tfunct.util.figures","title":"<code>figures</code>","text":""},{"location":"reference/util/#tfunct.util.figures.chart_compareResults","title":"<code>chart_compareResults(df_result=None, fld1=None, fld2=None, alpha=0.75, s=15, xy_lim=2, hue=None, loc_leg=2, ncol=2, ha='left', va='top', title='Observed vs Simulated grain yield', xlabel='Observed Yield (tha$^{-1}$)', ylabel='Simulated Yield (tha$^{-1}$)', dirname='Figures_tFunt', fname='Fig_model_', dispScore=True, dispLegend=True, saveFig=False, showFig=True, fmt='pdf')</code>","text":"<p>Display a scatter plot to compare two variables in the results</p> <p>Parameters:</p> Name Type Description Default <code>df_result</code> <code>array</code> <p>A pandas DataFrame with the results and variables to compare</p> <code>None</code> <code>fld1</code> <code>str</code> <p>Variable or column name to compare</p> <code>None</code> <code>fld2</code> <code>str</code> <p>Variable or column name to compare</p> <code>None</code> <code>alpha</code> <code>float</code> <p>Transparency of the points in chart</p> <code>0.75</code> <code>s</code> <code>float</code> <p>Size of the points in chart</p> <code>15</code> <code>xy_lim</code> <code>int</code> <p>Used to extend the x-axis limit. Default 2 units</p> <code>2</code> <code>hue</code> <code>str</code> <p>Variable to classify or discriminate the results in colors</p> <code>None</code> <code>title</code> <code>str</code> <p>Title of the figure</p> <code>'Observed vs Simulated grain yield'</code> <code>xlabel</code> <code>str</code> <p>Label of the x-axis</p> <code>'Observed Yield (tha$^{-1}$)'</code> <code>ylabel</code> <code>str</code> <p>Label of the y-axis</p> <code>'Simulated Yield (tha$^{-1}$)'</code> <code>dirname</code> <code>str</code> <p>Folder name to save results</p> <code>'Figures_tFunt'</code> <code>fname</code> <code>str</code> <p>File name to save the figure</p> <code>'Fig_model_'</code> <code>dispScore</code> <code>bool</code> <p>Display the accurracy and others stats of the model</p> <code>True</code> <code>dispLegend</code> <code>bool</code> <p>Display the legend of the chart</p> <code>True</code> <code>saveFig</code> <code>bool</code> <p>Save file in JPG or PDF format</p> <code>False</code> <code>fmt</code> <code>str</code> <p>Format of the output</p> <code>'pdf'</code> <p>Returns:</p> Type Description <code>object</code> <p>A figure in JPG or PDF format with the filename specified into the folder name</p>"},{"location":"reference/util/#tfunct.util.figures.plot_TempFunct","title":"<code>plot_TempFunct(fld1='ObsYield', fld2='SimYield', hue='location', ncol=6, s=80, alpha=0.45, xy_lim=1, fonts_axes=12, fonts_titles=14, dispScore=False, errorbar=False, saveFig=True, showFig=True, path_to_save_results='./', dirname='Figures', fname='Fig_1', fmt='pdf')</code>","text":""}]}